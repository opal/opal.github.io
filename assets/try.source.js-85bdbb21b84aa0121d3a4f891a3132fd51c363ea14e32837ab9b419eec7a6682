Opal.queue(function(Opal) {/* Generated by Opal 1.8.1 */
  var $klass = Opal.klass, $def = Opal.def, $lambda = Opal.lambda, $slice = Opal.slice, $send = Opal.send, $gvars = Opal.gvars, $truthy = Opal.truthy, $to_a = Opal.to_a, $ensure_kwargs = Opal.ensure_kwargs, $hash_get = Opal.hash_get, $a, $b, self = Opal.top, $nesting = [], $$ = Opal.$r($nesting), nil = Opal.nil;
  if ($gvars.$ == null) $gvars.$ = nil;
  if ($gvars["try"] == null) $gvars["try"] = nil;
  if ($gvars.stderr == null) $gvars.stderr = nil;
  if ($gvars.stdout == null) $gvars.stdout = nil;

  Opal.add_stubs('require,to_n,new,run_code,addEventListener,querySelector,[],[]=,encodeURIComponent,value,innerText=,each,createElement,createTextNode,value=,compile_code,replaceState,log,appendChild,decodeURIComponent,start_with?,size,strip,setup_links,setup_code,map,to_proc,css,compile,log_error,eval_code,puts,<<,join,p,setup,attempt_compilation,write_proc=,proc,print_to_output');
  
  self.$require("_vendor/codemirror");
  self.$require("_vendor/ruby");
  self.$require("_vendor/javascript");
  self.$require("try/examples");
  (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'TryOpal');

    var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting), $proto = self.$$prototype;

    $proto.editor = $proto.output = $proto.viewer = $proto.flush = $proto.ready = $proto.parser = nil;
    
    (function($base, $super) {
      var self = $klass($base, $super, 'Editor');

      var $proto = self.$$prototype;

      $proto["native"] = nil;
      
      
      $def(self, '$initialize', function $$initialize(dom_id, options) {
        var self = this;

        return (self["native"] = CodeMirror(document.getElementById(dom_id), options.$to_n()))
      });
      
      $def(self, '$value=', function $Editor_value$eq$1(str) {
        var self = this;

        return self["native"].setValue(str)
      });
      return $def(self, '$value', function $$value() {
        var self = this;

        return self["native"].getValue()
      });
    })($nesting[0], null);
    
    $def(self, '$initialize', function $$initialize() {
      var self = this;

      
      self.flush = [];
      self.output = $$('Editor').$new("output", (new Map([["lineNumbers", false], ["mode", "text"], ["readOnly", true]])));
      self.viewer = $$('Editor').$new("viewer", (new Map([["lineNumbers", true], ["mode", "javascript"], ["readOnly", true], ["theme", "tomorrow-night-eighties"]])));
      return (self.editor = $$('Editor').$new("editor", (new Map([["lineNumbers", true], ["mode", "ruby"], ["tabMode", "shift"], ["theme", "tomorrow-night-eighties"], ["extraKeys", (new Map([["Cmd-Enter", $lambda(function $$2($a){var $post_args, q, self = $$2.$$s == null ? this : $$2.$$s;

        
        $post_args = $slice(arguments);
        q = $post_args;
        return self.$run_code();}, {$$arity: -1, $$s: self})]]))]]))));
    });
    
    $def(self, '$setup_links', function $$setup_links() {
      var self = this, examples_container = nil;
      if ($gvars.$ == null) $gvars.$ = nil;

      
      $send($gvars.$['$[]']("document").$querySelector("#run_code"), 'addEventListener', ["click"], function $$3(event){var self = $$3.$$s == null ? this : $$3.$$s;

        
        if (event == null) event = nil;
        event.preventDefault();
        event.stopPropagation();
        return self.$run_code();}, {$$s: self});
      $send($gvars.$['$[]']("document").$querySelector("#link_code"), 'addEventListener', ["click"], function $$4(event){var $a, self = $$4.$$s == null ? this : $$4.$$s;
        if (self.editor == null) self.editor = nil;
        if ($gvars.$ == null) $gvars.$ = nil;

        
        if (event == null) event = nil;
        event.preventDefault();
        event.stopPropagation();
        $gvars.$['$[]']("location")['$[]=']("hash", "");
        return ($a = ["search", "code=" + ($gvars.$.$encodeURIComponent(self.editor.$value()))], $send($gvars.$['$[]']("location"), '[]=', $a), $a[$a.length - 1]);}, {$$s: self});
      examples_container = $gvars.$['$[]']("document").$querySelector("#examples");
      examples_container['$innerText=']("");
      return $send($$('TRY_EXAMPLES'), 'each', [], function $$5(title, code){var self = $$5.$$s == null ? this : $$5.$$s, url = nil, link = nil, spacer = nil;
        if ($gvars.$ == null) $gvars.$ = nil;
        if ($gvars.console == null) $gvars.console = nil;

        
        if (title == null) title = nil;
        if (code == null) code = nil;
        url = "?example=" + ($gvars.$.$encodeURIComponent(title));
        link = $gvars.$['$[]']("document").$createElement("a");
        link['$[]=']("href", url);
        link['$[]=']("innerText", title);
        spacer = $gvars.$['$[]']("document").$createTextNode(" Â  ");
        $send(link, 'addEventListener', ["click"], function $$6(event){var self = $$6.$$s == null ? this : $$6.$$s;
          if (self.editor == null) self.editor = nil;
          if ($gvars.$ == null) $gvars.$ = nil;

          
          if (event == null) event = nil;
          event.preventDefault();
          event.stopPropagation();
          self.editor['$value='](code);
          self.$compile_code();
          return $gvars.$['$[]']("history").$replaceState((new Map([["title", title], ["code", code]])), nil.$to_n(), url);}, {$$s: self});
        $gvars.console.$log(link);
        examples_container.$appendChild(spacer);
        return examples_container.$appendChild(link);}, {$$s: self});
    });
    
    $def(self, '$setup_code', function $$setup_code() {
      var self = this, hash = nil, search = nil, run = nil, title = nil, code = nil;
      if ($gvars.$ == null) $gvars.$ = nil;

      
      hash = $gvars.$.$decodeURIComponent($gvars.$['$[]']("location")['$[]']("hash"));
      search = $gvars.$.$decodeURIComponent($gvars.$['$[]']("location")['$[]']("search"));
      run = false;
      if ($truthy(hash['$start_with?']("#code="))) {
        
        title = "Code from url (hash)";
        code = hash['$[]'](Opal.Range.$new("#code=".$size(), -1, false));
      } else if ($truthy(hash['$start_with?']("#code:"))) {
        
        title = "Code from url (hash)";
        code = hash['$[]'](Opal.Range.$new("#code:".$size(), -1, false));
      } else if ($truthy(search['$start_with?']("?code="))) {
        
        title = "Code from url (query)";
        code = search['$[]'](Opal.Range.$new("?code=".$size(), -1, false));
      } else if ($truthy(search['$start_with?']("?example="))) {
        
        title = search['$[]'](Opal.Range.$new("?example=".$size(), -1, false));
        code = $$('TRY_EXAMPLES')['$[]'](title).$strip();
      } else {
        
        title = "Overview";
        code = $$('TRY_EXAMPLES')['$[]'](title).$strip();
        run = true;
      };
      self.editor['$value='](code);
      self.$compile_code();
      if ($truthy(run)) {
        return self.$run_code()
      } else {
        return nil
      };
    });
    
    $def(self, '$setup', function $$setup() {
      var self = this;

      
      self.$setup_links();
      return self.$setup_code();
    });
    
    $def(self, '$p', function $$p($a) {
      var $post_args, args;
      if ($gvars.console == null) $gvars.console = nil;

      
      $post_args = $slice(arguments);
      args = $post_args;
      $send($gvars.console, 'log', $to_a($send(args, 'map', [], "inspect".$to_proc())));
      return $to_a(args);
    }, -1);
    
    $def(self, '$compile_code', function $$compile_code() {
      var $a, self = this, code = nil, err = nil;
      if ($gvars.$ == null) $gvars.$ = nil;

      try {
        
        self.output['$value=']("click \"Run\" to see the output");
        $gvars.$['$[]']("document").$querySelector("#output").$css((new Map([["opacity", "0.5"]])));
        code = $$('Opal').$compile(self.editor.$value(), (new Map([["source_map_enabled", false]])));
        return ($a = [code], $send(self.viewer, 'value=', $a), $a[$a.length - 1]);
      } catch ($err) {
        if (Opal.rescue($err, [$$('StandardError'), $$('SyntaxError')])) {(err = $err)
          try {
            return self.$log_error(err)
          } finally { Opal.pop_exception($err); }
        } else { throw $err; }
      }
    });
    
    $def(self, '$run_code', function $$run_code() {
      var $a, self = this, err = nil;
      if ($gvars.$ == null) $gvars.$ = nil;

      try {
        
        self.$compile_code();
        self.flush = [];
        self.output['$value=']("");
        self.$eval_code(self.viewer.$value());
        return ($a = ["opacity", "1"], $send($gvars.$['$[]']("document").$querySelector("#output")['$[]']("style"), '[]=', $a), $a[$a.length - 1]);
      } catch ($err) {
        if (Opal.rescue($err, [$$('StandardError'), $$('SyntaxError')])) {(err = $err)
          try {
            return self.$log_error(err)
          } finally { Opal.pop_exception($err); }
        } else { throw $err; }
      }
    });
    
    $def(self, '$eval_code', function $$eval_code(js_code) {
      
      return eval(js_code);
    });
    
    $def(self, '$log_error', function $$log_error(err) {
      var self = this;

      return self.$puts("" + (err) + "\n" + (err.stack))
    });
    
    $def(self, '$print_to_output', function $$print_to_output(str) {
      var $a, self = this;

      
      self.flush['$<<'](str);
      return ($a = [self.flush.$join("")], $send(self.output, 'value=', $a), $a[$a.length - 1]);
    });
    return $def(self, '$attempt_compilation', function $$attempt_compilation($kwargs) {
      var ready, parser, self = this, $ret_or_1 = nil;

      
      $kwargs = $ensure_kwargs($kwargs);
      
      ready = $hash_get($kwargs, "ready");if (ready == null) ready = nil;
      
      parser = $hash_get($kwargs, "parser");if (parser == null) parser = nil;
      self.ready = ($truthy(($ret_or_1 = self.ready)) ? ($ret_or_1) : (ready));
      self.parser = ($truthy(($ret_or_1 = self.parser)) ? ($ret_or_1) : (parser));
      if (($truthy(self.ready) && ($truthy(self.parser)))) {
        return self.$compile_code()
      } else {
        return nil
      };
    }, -1);
  })($nesting[0], null, $nesting);
  $gvars["try"] = $$('TryOpal').$new();
  self.$p($gvars.$['$[]']("document")['$[]']("readyState"));
  
  switch ($gvars.$['$[]']("document")['$[]']("readyState").valueOf()) {
    case "complete":
    case "loaded":
    case "interactive":
      
      $gvars["try"].$setup();
      $gvars["try"].$attempt_compilation((new Map([["ready", true]])));
      break;
    default:
      $send($gvars.$['$[]']("document"), 'addEventListener', ["DOMContentLoaded"], function $$7(){        if ($gvars["try"] == null) $gvars["try"] = nil;

        
        $gvars["try"].$setup();
        return $gvars["try"].$attempt_compilation((new Map([["ready", true]])));})
  };
  $send($gvars.$['$[]']("document"), 'addEventListener', ["parser_loaded"], function $$8(){var self = $$8.$$s == null ? this : $$8.$$s;
    if ($gvars["try"] == null) $gvars["try"] = nil;

    
    self.$p("parser_loaded");
    return $gvars["try"].$attempt_compilation((new Map([["parser", true]])));}, {$$s: self});
  return ($a = [($b = [$send(self, 'proc', [], function $$9(str){    if ($gvars["try"] == null) $gvars["try"] = nil;

    
    if (str == null) str = nil;
    return $gvars["try"].$print_to_output(str);})], $send($gvars.stderr, 'write_proc=', $b), $b[$b.length - 1])], $send($gvars.stdout, 'write_proc=', $a), $a[$a.length - 1]);
});

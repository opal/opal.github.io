Opal.queue(function(Opal) {/* Generated by Opal 1.8.2 */
  var $module = Opal.module, $klass = Opal.klass, $truthy = Opal.truthy, $const_set = Opal.const_set, $defs = Opal.defs, $gvars = Opal.gvars, $rb_lt = Opal.rb_lt, $def = Opal.def, $to_ary = Opal.to_ary, $send = Opal.send, $neqeq = Opal.neqeq, $rb_plus = Opal.rb_plus, $eqeq = Opal.eqeq, $rb_ge = Opal.rb_ge, $rb_gt = Opal.rb_gt, $rb_minus = Opal.rb_minus, $rb_le = Opal.rb_le, $rb_times = Opal.rb_times, $assign_ivar_val = Opal.assign_ivar_val, $a, $nesting = [], $$ = Opal.$r($nesting), nil = Opal.nil, $$$ = Opal.$$$;

  Opal.add_stubs('[],class,<,size,[]=,__send__,_racc_setup,raise,_racc_init_sysvars,catch,!=,next_token,racc_read_token,+,==,>=,_racc_evalact,!,>,-,push,racc_shift,-@,_racc_do_reduce,racc_accept,throw,on_error,<=,pop,racc_e_pop,inspect,racc_next_state,*,racc_reduce,sprintf,token_to_str,print,racc_token2str,puts,racc_print_stacks,empty?,each,racc_print_states,each_index');
  
  (function($base, $parent_nesting) {
    var self = $module($base, 'Racc');

    var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting);

    return ($klass($nesting[0], $$('StandardError'), 'ParseError'), nil)
  })($nesting[0], $nesting);
  if (!$truthy((($a = $$$('::', 'ParseError', 'skip_raise')) ? 'constant' : nil))) {
    $const_set($nesting[0], 'ParseError', $$$($$('Racc'), 'ParseError'))
  };
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Racc');

    var $a, $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting);

    
    if (!$truthy((($a = $$('Racc_No_Extensions', 'skip_raise')) ? 'constant' : nil))) {
      $const_set($nesting[0], 'Racc_No_Extensions', false)
    };
    return (function($base, $super, $parent_nesting) {
      var self = $klass($base, $super, 'Parser');

      var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting), $proto = self.$$prototype;

      $proto.yydebug = $proto.racc_debug_out = $proto.racc_error_status = $proto.racc_t = $proto.racc_vstack = $proto.racc_val = $proto.racc_state = $proto.racc_tstack = nil;
      
      $const_set($nesting[0], 'Racc_Runtime_Version', "1.4.6");
      $const_set($nesting[0], 'Racc_Runtime_Revision', ["originalRevision:", "1.8"]['$[]'](1));
      $const_set($nesting[0], 'Racc_Runtime_Core_Version_R', "1.4.6");
      $const_set($nesting[0], 'Racc_Runtime_Core_Revision_R', ["originalRevision:", "1.8"]['$[]'](1));
      $const_set($nesting[0], 'Racc_Main_Parsing_Routine', "_racc_do_parse_rb");
      $const_set($nesting[0], 'Racc_YY_Parse_Method', "_racc_yyparse_rb");
      $const_set($nesting[0], 'Racc_Runtime_Core_Version', $$('Racc_Runtime_Core_Version_R'));
      $const_set($nesting[0], 'Racc_Runtime_Core_Revision', $$('Racc_Runtime_Core_Revision_R'));
      $const_set($nesting[0], 'Racc_Runtime_Type', "ruby");
      $defs($$('Parser'), '$racc_runtime_type', function $$racc_runtime_type() {
        
        return $$('Racc_Runtime_Type')
      });
      
      $def(self, '$_racc_setup', function $$_racc_setup() {
        var $a, $b, self = this, $ret_or_1 = nil, arg = nil;
        if ($gvars.stderr == null) $gvars.stderr = nil;

        
        if (!$truthy($$$(self.$class(), 'Racc_debug_parser'))) {
          self.yydebug = false
        };
        if (!$truthy((($a = self['yydebug'], $a != null && $a !== nil) ? 'instance-variable' : nil))) {
          self.yydebug = false
        };
        if ($truthy(self.yydebug)) {
          
          if (!$truthy((($b = self['racc_debug_out'], $b != null && $b !== nil) ? 'instance-variable' : nil))) {
            self.racc_debug_out = $gvars.stderr
          };
          self.racc_debug_out = ($truthy(($ret_or_1 = self.racc_debug_out)) ? ($ret_or_1) : ($gvars.stderr));
        };
        arg = $$$(self.$class(), 'Racc_arg');
        if ($truthy($rb_lt(arg.$size(), 14))) {
          arg['$[]='](13, true)
        };
        return arg;
      });
      
      $def(self, '$_racc_init_sysvars', function $$_racc_init_sysvars() {
        var self = this;

        
        self.racc_state = [0];
        self.racc_tstack = [];
        self.racc_vstack = [];
        self.racc_t = nil;
        self.racc_val = nil;
        self.racc_read_next = true;
        self.racc_user_yyerror = false;
        return (self.racc_error_status = 0);
      });
      
      $def(self, '$do_parse', function $$do_parse() {
        var self = this;

        return self.$__send__($$('Racc_Main_Parsing_Routine'), self.$_racc_setup(), false)
      });
      
      $def(self, '$next_token', function $$next_token() {
        var self = this;

        return self.$raise($$('NotImplementedError'), "" + (self.$class()) + "#next_token is not defined")
      });
      
      $def(self, '$_racc_do_parse_rb', function $$_racc_do_parse_rb(arg, in_debug) {
        var $a, $b, self = this, action_table = nil, action_check = nil, action_default = nil, action_pointer = nil, _ = nil, token_table = nil, tok = nil, act = nil, i = nil;

        
        $b = arg, $a = $to_ary($b), (action_table = ($a[0] == null ? nil : $a[0])), (action_check = ($a[1] == null ? nil : $a[1])), (action_default = ($a[2] == null ? nil : $a[2])), (action_pointer = ($a[3] == null ? nil : $a[3])), (_ = ($a[4] == null ? nil : $a[4])), (_ = ($a[5] == null ? nil : $a[5])), (_ = ($a[6] == null ? nil : $a[6])), (_ = ($a[7] == null ? nil : $a[7])), (_ = ($a[8] == null ? nil : $a[8])), (_ = ($a[9] == null ? nil : $a[9])), (token_table = ($a[10] == null ? nil : $a[10])), (_ = ($a[11] == null ? nil : $a[11])), (_ = ($a[12] == null ? nil : $a[12])), (_ = ($a[13] == null ? nil : $a[13])), $b;
        self.$_racc_init_sysvars();
        tok = (act = (i = nil));
        return $send(self, 'catch', ["racc_end_parse"], function $$1(){var $c, $d, self = $$1.$$s == null ? this : $$1.$$s, $ret_or_1 = nil;
          if (self.racc_state == null) self.racc_state = nil;
          if (self.racc_read_next == null) self.racc_read_next = nil;
          if (self.racc_t == null) self.racc_t = nil;
          if (self.yydebug == null) self.yydebug = nil;
          if (self.racc_val == null) self.racc_val = nil;

          while ($truthy(true)) {
          
            if ($truthy((i = action_pointer['$[]'](self.racc_state['$[]'](-1))))) {
              
              if ($truthy(self.racc_read_next)) {
                if ($neqeq(self.racc_t, 0)) {
                  
                  $d = self.$next_token(), $c = $to_ary($d), (tok = ($c[0] == null ? nil : $c[0])), (self.racc_val = ($c[1] == null ? nil : $c[1])), $d;
                  if ($truthy(tok)) {
                    self.racc_t = ($truthy(($ret_or_1 = token_table['$[]'](tok))) ? ($ret_or_1) : (1))
                  } else {
                    self.racc_t = 0
                  };
                  if ($truthy(self.yydebug)) {
                    self.$racc_read_token(self.racc_t, tok, self.racc_val)
                  };
                  self.racc_read_next = false;
                }
              };
              i = $rb_plus(i, self.racc_t);
              if (!(($truthy($rb_ge(i, 0)) && ($truthy((act = action_table['$[]'](i))))) && ($eqeq(action_check['$[]'](i), self.racc_state['$[]'](-1))))) {
                act = action_default['$[]'](self.racc_state['$[]'](-1))
              };
            } else {
              act = action_default['$[]'](self.racc_state['$[]'](-1))
            };
            while ($truthy((act = self.$_racc_evalact(act, arg)))) {
            
            };
          }}, {$$s: self});
      });
      
      $def(self, '$yyparse', function $$yyparse(recv, mid) {
        var self = this;

        return self.$__send__($$('Racc_YY_Parse_Method'), recv, mid, self.$_racc_setup(), true)
      });
      
      $def(self, '$_racc_yyparse_rb', function $$_racc_yyparse_rb(recv, mid, arg, c_debug) {
        var $a, $b, self = this, action_table = nil, action_check = nil, action_default = nil, action_pointer = nil, _ = nil, token_table = nil, act = nil, i = nil;

        
        $b = arg, $a = $to_ary($b), (action_table = ($a[0] == null ? nil : $a[0])), (action_check = ($a[1] == null ? nil : $a[1])), (action_default = ($a[2] == null ? nil : $a[2])), (action_pointer = ($a[3] == null ? nil : $a[3])), (_ = ($a[4] == null ? nil : $a[4])), (_ = ($a[5] == null ? nil : $a[5])), (_ = ($a[6] == null ? nil : $a[6])), (_ = ($a[7] == null ? nil : $a[7])), (_ = ($a[8] == null ? nil : $a[8])), (_ = ($a[9] == null ? nil : $a[9])), (token_table = ($a[10] == null ? nil : $a[10])), (_ = ($a[11] == null ? nil : $a[11])), (_ = ($a[12] == null ? nil : $a[12])), (_ = ($a[13] == null ? nil : $a[13])), $b;
        self.$_racc_init_sysvars();
        act = nil;
        i = nil;
        return $send(self, 'catch', ["racc_end_parse"], function $$2(){var self = $$2.$$s == null ? this : $$2.$$s;
          if (self.racc_state == null) self.racc_state = nil;

          
          while (!($truthy((i = action_pointer['$[]'](self.racc_state['$[]'](-1)))))) {
          while ($truthy((act = self.$_racc_evalact(action_default['$[]'](self.racc_state['$[]'](-1)), arg)))) {
            
            }
          };
          return $send(recv, '__send__', [mid], function $$3(tok, val){var self = $$3.$$s == null ? this : $$3.$$s, $ret_or_1 = nil, $ret_or_2 = nil;
            if (self.racc_t == null) self.racc_t = nil;
            if (self.racc_state == null) self.racc_state = nil;
            if (self.racc_read_next == null) self.racc_read_next = nil;

            
            if (tok == null) tok = nil;
            if (val == null) val = nil;
            if ($truthy(tok)) {
              self.racc_t = ($truthy(($ret_or_1 = token_table['$[]'](tok))) ? ($ret_or_1) : (1))
            } else {
              self.racc_t = 0
            };
            self.racc_val = val;
            self.racc_read_next = false;
            i = $rb_plus(i, self.racc_t);
            if (!(($truthy($rb_ge(i, 0)) && ($truthy((act = action_table['$[]'](i))))) && ($eqeq(action_check['$[]'](i), self.racc_state['$[]'](-1))))) {
              act = action_default['$[]'](self.racc_state['$[]'](-1))
            };
            while ($truthy((act = self.$_racc_evalact(act, arg)))) {
            
            };
            while ($truthy(($truthy(($ret_or_1 = ($truthy(($ret_or_2 = (i = action_pointer['$[]'](self.racc_state['$[]'](-1)))['$!']())) ? ($ret_or_2) : (self.racc_read_next['$!']())))) ? ($ret_or_1) : (self.racc_t['$=='](0))))) {
            
              if (!(((($truthy(i) && ($truthy((i = $rb_plus(i, self.racc_t))))) && ($truthy($rb_ge(i, 0)))) && ($truthy((act = action_table['$[]'](i))))) && ($eqeq(action_check['$[]'](i), self.racc_state['$[]'](-1))))) {
                act = action_default['$[]'](self.racc_state['$[]'](-1))
              };
              while ($truthy((act = self.$_racc_evalact(act, arg)))) {
              
              };
            };}, {$$s: self});}, {$$s: self});
      });
      
      $def(self, '$_racc_evalact', function $$_racc_evalact(act, arg) {
        var $a, $b, self = this, action_table = nil, action_check = nil, _ = nil, action_pointer = nil, shift_n = nil, reduce_n = nil, code = nil, i = nil;

        
        $b = arg, $a = $to_ary($b), (action_table = ($a[0] == null ? nil : $a[0])), (action_check = ($a[1] == null ? nil : $a[1])), (_ = ($a[2] == null ? nil : $a[2])), (action_pointer = ($a[3] == null ? nil : $a[3])), (_ = ($a[4] == null ? nil : $a[4])), (_ = ($a[5] == null ? nil : $a[5])), (_ = ($a[6] == null ? nil : $a[6])), (_ = ($a[7] == null ? nil : $a[7])), (_ = ($a[8] == null ? nil : $a[8])), (_ = ($a[9] == null ? nil : $a[9])), (_ = ($a[10] == null ? nil : $a[10])), (shift_n = ($a[11] == null ? nil : $a[11])), (reduce_n = ($a[12] == null ? nil : $a[12])), (_ = ($a[13] == null ? nil : $a[13])), (_ = ($a[14] == null ? nil : $a[14])), $b;
        if (($truthy($rb_gt(act, 0)) && ($truthy($rb_lt(act, shift_n))))) {
          
          if ($truthy($rb_gt(self.racc_error_status, 0))) {
            if (!$eqeq(self.racc_t, 1)) {
              self.racc_error_status = $rb_minus(self.racc_error_status, 1)
            }
          };
          self.racc_vstack.$push(self.racc_val);
          self.racc_state.$push(act);
          self.racc_read_next = true;
          if ($truthy(self.yydebug)) {
            
            self.racc_tstack.$push(self.racc_t);
            self.$racc_shift(self.racc_t, self.racc_tstack, self.racc_vstack);
          };
        } else if (($truthy($rb_lt(act, 0)) && ($truthy($rb_gt(act, reduce_n['$-@']()))))) {
          
          code = $send(self, 'catch', ["racc_jump"], function $$4(){var self = $$4.$$s == null ? this : $$4.$$s;
            if (self.racc_state == null) self.racc_state = nil;

            
            self.racc_state.$push(self.$_racc_do_reduce(arg, act));
            return false;}, {$$s: self});
          if ($truthy(code)) {
            
            switch (code.valueOf()) {
              case 1:
                
                self.racc_user_yyerror = true;
                return reduce_n['$-@']();
              case 2:
                return shift_n
              default:
                self.$raise("[Racc Bug] unknown jump code")
            }
          };
        } else if ($eqeq(act, shift_n)) {
          
          if ($truthy(self.yydebug)) {
            self.$racc_accept()
          };
          self.$throw("racc_end_parse", self.racc_vstack['$[]'](0));
        } else if ($eqeq(act, reduce_n['$-@']())) {
          
          
          switch (self.racc_error_status.valueOf()) {
            case 0:
              if (!$truthy(arg['$[]'](21))) {
                self.$on_error(self.racc_t, self.racc_val, self.racc_vstack)
              }
              break;
            case 3:
              
              if ($eqeq(self.racc_t, 0)) {
                self.$throw("racc_end_parse", nil)
              };
              self.racc_read_next = true;
              break;
            default:
              nil
          };
          self.racc_user_yyerror = false;
          self.racc_error_status = 3;
          while ($truthy(true)) {
          
            if ($truthy((i = action_pointer['$[]'](self.racc_state['$[]'](-1))))) {
              
              i = $rb_plus(i, 1);
              if ((($truthy($rb_ge(i, 0)) && ($truthy((act = action_table['$[]'](i))))) && ($eqeq(action_check['$[]'](i), self.racc_state['$[]'](-1))))) {
                break
              };
            };
            if ($truthy($rb_le(self.racc_state.$size(), 1))) {
              self.$throw("racc_end_parse", nil)
            };
            self.racc_state.$pop();
            self.racc_vstack.$pop();
            if ($truthy(self.yydebug)) {
              
              self.racc_tstack.$pop();
              self.$racc_e_pop(self.racc_state, self.racc_tstack, self.racc_vstack);
            };
          };
          return act;
        } else {
          self.$raise("[Racc Bug] unknown action " + (act.$inspect()))
        };
        if ($truthy(self.yydebug)) {
          self.$racc_next_state(self.racc_state['$[]'](-1), self.racc_state)
        };
        return nil;
      });
      
      $def(self, '$_racc_do_reduce', function $$_racc_do_reduce(arg, act) {
        var $a, $b, self = this, _ = nil, goto_table = nil, goto_check = nil, goto_default = nil, goto_pointer = nil, nt_base = nil, reduce_table = nil, use_result = nil, state = nil, vstack = nil, tstack = nil, i = nil, len = nil, reduce_to = nil, method_id = nil, void_array = nil, tmp_t = nil, tmp_v = nil, k1 = nil, curstate = nil;

        
        $b = arg, $a = $to_ary($b), (_ = ($a[0] == null ? nil : $a[0])), (_ = ($a[1] == null ? nil : $a[1])), (_ = ($a[2] == null ? nil : $a[2])), (_ = ($a[3] == null ? nil : $a[3])), (goto_table = ($a[4] == null ? nil : $a[4])), (goto_check = ($a[5] == null ? nil : $a[5])), (goto_default = ($a[6] == null ? nil : $a[6])), (goto_pointer = ($a[7] == null ? nil : $a[7])), (nt_base = ($a[8] == null ? nil : $a[8])), (reduce_table = ($a[9] == null ? nil : $a[9])), (_ = ($a[10] == null ? nil : $a[10])), (_ = ($a[11] == null ? nil : $a[11])), (_ = ($a[12] == null ? nil : $a[12])), (use_result = ($a[13] == null ? nil : $a[13])), $b;
        state = self.racc_state;
        vstack = self.racc_vstack;
        tstack = self.racc_tstack;
        i = $rb_times(act, -3);
        len = reduce_table['$[]'](i);
        reduce_to = reduce_table['$[]']($rb_plus(i, 1));
        method_id = reduce_table['$[]']($rb_plus(i, 2));
        void_array = [];
        if ($truthy(self.yydebug)) {
          tmp_t = tstack['$[]'](len['$-@'](), len)
        };
        tmp_v = vstack['$[]'](len['$-@'](), len);
        if ($truthy(self.yydebug)) {
          tstack['$[]='](len['$-@'](), len, void_array)
        };
        vstack['$[]='](len['$-@'](), len, void_array);
        state['$[]='](len['$-@'](), len, void_array);
        if ($truthy(use_result)) {
          vstack.$push(self.$__send__(method_id, tmp_v, vstack, tmp_v['$[]'](0)))
        } else {
          vstack.$push(self.$__send__(method_id, tmp_v, vstack))
        };
        tstack.$push(reduce_to);
        if ($truthy(self.yydebug)) {
          self.$racc_reduce(tmp_t, reduce_to, tstack, vstack)
        };
        k1 = $rb_minus(reduce_to, nt_base);
        if ($truthy((i = goto_pointer['$[]'](k1)))) {
          
          i = $rb_plus(i, state['$[]'](-1));
          if ((($truthy($rb_ge(i, 0)) && ($truthy((curstate = goto_table['$[]'](i))))) && ($eqeq(goto_check['$[]'](i), k1)))) {
            return curstate
          };
        };
        return goto_default['$[]'](k1);
      });
      
      $def(self, '$on_error', function $$on_error(t, val, vstack) {
        var self = this, $ret_or_1 = nil;

        return self.$raise($$('ParseError'), self.$sprintf("\nparse error on value %s (%s)", val.$inspect(), ($truthy(($ret_or_1 = self.$token_to_str(t))) ? ($ret_or_1) : ("?"))))
      });
      
      $def(self, '$yyerror', function $$yyerror() {
        var self = this;

        return self.$throw("racc_jump", 1)
      });
      
      $def(self, '$yyaccept', function $$yyaccept() {
        var self = this;

        return self.$throw("racc_jump", 2)
      });
      
      $def(self, '$yyerrok', $assign_ivar_val("racc_error_status", 0));
      
      $def(self, '$racc_read_token', function $$racc_read_token(t, tok, val) {
        var self = this;

        
        self.racc_debug_out.$print("read    ");
        self.racc_debug_out.$print(tok.$inspect(), "(", self.$racc_token2str(t), ") ");
        self.racc_debug_out.$puts(val.$inspect());
        return self.racc_debug_out.$puts();
      });
      
      $def(self, '$racc_shift', function $$racc_shift(tok, tstack, vstack) {
        var self = this;

        
        self.racc_debug_out.$puts("shift   " + (self.$racc_token2str(tok)));
        self.$racc_print_stacks(tstack, vstack);
        return self.racc_debug_out.$puts();
      });
      
      $def(self, '$racc_reduce', function $$racc_reduce(toks, sim, tstack, vstack) {
        var self = this, out = nil;

        
        out = self.racc_debug_out;
        out.$print("reduce ");
        if ($truthy(toks['$empty?']())) {
          out.$print(" <none>")
        } else {
          $send(toks, 'each', [], function $$5(t){var self = $$5.$$s == null ? this : $$5.$$s;

            
            if (t == null) t = nil;
            return out.$print(" ", self.$racc_token2str(t));}, {$$s: self})
        };
        out.$puts(" --> " + (self.$racc_token2str(sim)));
        self.$racc_print_stacks(tstack, vstack);
        return self.racc_debug_out.$puts();
      });
      
      $def(self, '$racc_accept', function $$racc_accept() {
        var self = this;

        
        self.racc_debug_out.$puts("accept");
        return self.racc_debug_out.$puts();
      });
      
      $def(self, '$racc_e_pop', function $$racc_e_pop(state, tstack, vstack) {
        var self = this;

        
        self.racc_debug_out.$puts("error recovering mode: pop token");
        self.$racc_print_states(state);
        self.$racc_print_stacks(tstack, vstack);
        return self.racc_debug_out.$puts();
      });
      
      $def(self, '$racc_next_state', function $$racc_next_state(curstate, state) {
        var self = this;

        
        self.racc_debug_out.$puts("goto    " + (curstate));
        self.$racc_print_states(state);
        return self.racc_debug_out.$puts();
      });
      
      $def(self, '$racc_print_stacks', function $$racc_print_stacks(t, v) {
        var self = this, out = nil;

        
        out = self.racc_debug_out;
        out.$print("        [");
        $send(t, 'each_index', [], function $$6(i){var self = $$6.$$s == null ? this : $$6.$$s;

          
          if (i == null) i = nil;
          return out.$print(" (", self.$racc_token2str(t['$[]'](i)), " ", v['$[]'](i).$inspect(), ")");}, {$$s: self});
        return out.$puts(" ]");
      });
      
      $def(self, '$racc_print_states', function $$racc_print_states(s) {
        var self = this, out = nil;

        
        out = self.racc_debug_out;
        out.$print("        [");
        $send(s, 'each', [], function $$7(st){
          
          if (st == null) st = nil;
          return out.$print(" ", st);});
        return out.$puts(" ]");
      });
      
      $def(self, '$racc_token2str', function $$racc_token2str(tok) {
        var self = this, $ret_or_1 = nil;

        if ($truthy(($ret_or_1 = $$$(self.$class(), 'Racc_token_to_s_table')['$[]'](tok)))) {
          return $ret_or_1
        } else {
          return self.$raise("[Racc Bug] can't convert token " + (tok) + " to string")
        }
      });
      return $def(self, '$token_to_str', function $$token_to_str(t) {
        var self = this;

        return $$$(self.$class(), 'Racc_token_to_s_table')['$[]'](t)
      });
    })($nesting[0], null, $nesting);
  })($nesting[0], $nesting);
});

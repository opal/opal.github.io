Opal.queue(function(Opal) {/* Generated by Opal 1.8.2 */
  var $module = Opal.module, $klass = Opal.klass, $def = Opal.def, $nesting = [], nil = Opal.nil;

  Opal.add_stubs('push,empty?,<<,new,pop,clear,last,to_sym,include?');
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Parser');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $super, $parent_nesting) {
      var self = $klass($base, $super, 'VariablesStack');

      var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting), $proto = self.$$prototype;

      $proto.stack = nil;
      
      
      $def(self, '$initialize', function $$initialize() {
        var self = this;

        
        self.stack = [];
        return self.$push();
      });
      
      $def(self, '$empty?', function $VariablesStack_empty$ques$1() {
        var self = this;

        return self.stack['$empty?']()
      });
      
      $def(self, '$push', function $$push() {
        var self = this;

        return self.stack['$<<']($$('Set').$new())
      });
      
      $def(self, '$pop', function $$pop() {
        var self = this;

        return self.stack.$pop()
      });
      
      $def(self, '$reset', function $$reset() {
        var self = this;

        return self.stack.$clear()
      });
      
      $def(self, '$declare', function $$declare(name) {
        var self = this;

        return self.stack.$last()['$<<'](name.$to_sym())
      });
      return $def(self, '$declared?', function $VariablesStack_declared$ques$2(name) {
        var self = this;

        return self.stack.$last()['$include?'](name.$to_sym())
      });
    })($nesting[0], null, $nesting)
  })($nesting[0], $nesting)
});

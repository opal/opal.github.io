Opal.queue(function(Opal) {/* Generated by Opal 1.8.1 */
  var $module = Opal.module, $klass = Opal.klass, $def = Opal.def, $assign_ivar_val = Opal.assign_ivar_val, $truthy = Opal.truthy, $alias = Opal.alias, $nesting = [], nil = Opal.nil;

  Opal.add_stubs('freeze,clear,|,<<,&,>>,==,[],to_s');
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Parser');

    var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting);

    return (function($base, $super) {
      var self = $klass($base, $super, 'StackState');

      var $proto = self.$$prototype;

      $proto.stack = $proto.name = nil;
      
      
      $def(self, '$initialize', function $$initialize(name) {
        var self = this;

        
        self.name = name.$freeze();
        return self.$clear();
      });
      
      $def(self, '$clear', $assign_ivar_val("stack", 0));
      
      $def(self, '$push', function $$push(bit) {
        var self = this, bit_value = nil;

        
        bit_value = ($truthy(bit) ? (1) : (0));
        self.stack = self.stack['$<<'](1)['$|'](bit_value);
        return bit;
      });
      
      $def(self, '$pop', function $$pop() {
        var self = this, bit_value = nil;

        
        bit_value = self.stack['$&'](1);
        self.stack = self.stack['$>>'](1);
        return bit_value['$=='](1);
      });
      
      $def(self, '$lexpop', function $$lexpop() {
        var self = this;

        
        self.stack = self.stack['$>>'](1)['$|'](self.stack['$&'](1));
        return self.stack['$[]'](0)['$=='](1);
      });
      
      $def(self, '$active?', function $StackState_active$ques$1() {
        var self = this;

        return self.stack['$[]'](0)['$=='](1)
      });
      
      $def(self, '$empty?', function $StackState_empty$ques$2() {
        var self = this;

        return self.stack['$=='](0)
      });
      
      $def(self, '$to_s', function $$to_s() {
        var self = this;

        return "[" + (self.stack.$to_s(2)) + " <= " + (self.name) + "]"
      });
      return $alias(self, "inspect", "to_s");
    })($$('Lexer'), null)
  })($nesting[0], $nesting)
});

Opal.queue(function(Opal) {/* Generated by Opal 1.8.1 */
  var $module = Opal.module, $klass = Opal.klass, $def = Opal.def, $const_set = Opal.const_set, $slice = Opal.slice, $send2 = Opal.send2, $find_super = Opal.find_super, $to_a = Opal.to_a, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$;

  Opal.add_stubs('new,process,include?,type,remove,wrap,insert_before,insert_after,replace,freeze,join,extend,warn_of_deprecation,class,warned_of_deprecation=');
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Parser');

    var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting);

    return (function($base, $super, $parent_nesting) {
      var self = $klass($base, $super, 'Rewriter');

      var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting), $proto = self.$$prototype;

      $proto.source_rewriter = nil;
      
      
      $def(self, '$rewrite', function $$rewrite(source_buffer, ast) {
        var self = this;

        
        self.source_rewriter = $$$($$('Source'), 'Rewriter').$new(source_buffer);
        self.$process(ast);
        return self.source_rewriter.$process();
      });
      
      $def(self, '$assignment?', function $Rewriter_assignment$ques$1(node) {
        
        return ["lvasgn", "ivasgn", "gvasgn", "cvasgn", "casgn"]['$include?'](node.$type())
      });
      
      $def(self, '$remove', function $$remove(range) {
        var self = this;

        return self.source_rewriter.$remove(range)
      });
      
      $def(self, '$wrap', function $$wrap(range, before, after) {
        var self = this;

        return self.source_rewriter.$wrap(range, before, after)
      });
      
      $def(self, '$insert_before', function $$insert_before(range, content) {
        var self = this;

        return self.source_rewriter.$insert_before(range, content)
      });
      
      $def(self, '$insert_after', function $$insert_after(range, content) {
        var self = this;

        return self.source_rewriter.$insert_after(range, content)
      });
      
      $def(self, '$replace', function $$replace(range, content) {
        var self = this;

        return self.source_rewriter.$replace(range, content)
      });
      $const_set($nesting[0], 'DEPRECATION_WARNING', ["Parser::Rewriter is deprecated.", "Please update your code to use Parser::TreeRewriter instead"].$join("\n").$freeze());
      self.$extend($$('Deprecation'));
      return $def(self, '$initialize', function $$initialize($a) {
        var $post_args, $fwd_rest, $yield = $$initialize.$$p || nil, self = this;

        $$initialize.$$p = null;
        
        $post_args = $slice(arguments);
        $fwd_rest = $post_args;
        self.$class().$warn_of_deprecation();
        $$$($$('Source'), 'Rewriter')['$warned_of_deprecation='](true);
        return $send2(self, $find_super(self, 'initialize', $$initialize, false, true), 'initialize', $to_a($fwd_rest), $yield);
      }, -1);
    })($nesting[0], $$$($$$($$('Parser'), 'AST'), 'Processor'), $nesting)
  })($nesting[0], $nesting)
});

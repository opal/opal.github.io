Opal.queue(function(Opal) {/* Generated by Opal 1.8.2 */
  var $module = Opal.module, $klass = Opal.klass, $send2 = Opal.send2, $find_super = Opal.find_super, $def = Opal.def, $nesting = [], nil = Opal.nil;

  Opal.add_stubs('attr_reader,message');
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Parser');

    var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting);

    return (function($base, $super) {
      var self = $klass($base, $super, 'SyntaxError');

      
      
      self.$attr_reader("diagnostic");
      return $def(self, '$initialize', function $$initialize(diagnostic) {
        var $yield = $$initialize.$$p || nil, self = this;

        $$initialize.$$p = null;
        
        self.diagnostic = diagnostic;
        return $send2(self, $find_super(self, 'initialize', $$initialize, false, true), 'initialize', [diagnostic.$message()], null);
      });
    })($nesting[0], $$('StandardError'))
  })($nesting[0], $nesting)
});

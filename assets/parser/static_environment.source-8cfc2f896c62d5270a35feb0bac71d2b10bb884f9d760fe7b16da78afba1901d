Opal.queue(function(Opal) {/* Generated by Opal 1.8.2 */
  var $module = Opal.module, $klass = Opal.klass, $const_set = Opal.const_set, $def = Opal.def, $nesting = [], nil = Opal.nil;

  Opal.add_stubs('reset,[],push,dup,pop,add,to_sym,include?,declare,declared?,empty?');
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Parser');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $super, $parent_nesting) {
      var self = $klass($base, $super, 'StaticEnvironment');

      var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting), $proto = self.$$prototype;

      $proto.stack = $proto.variables = nil;
      
      $const_set($nesting[0], 'FORWARD_ARGS', "FORWARD_ARGS");
      $const_set($nesting[0], 'ANONYMOUS_BLOCKARG', "ANONYMOUS_BLOCKARG");
      $const_set($nesting[0], 'ANONYMOUS_RESTARG', "ANONYMOUS_RESTARG");
      $const_set($nesting[0], 'ANONYMOUS_KWRESTARG', "ANONYMOUS_KWRESTARG");
      
      $def(self, '$initialize', function $$initialize() {
        var self = this;

        return self.$reset()
      });
      
      $def(self, '$reset', function $$reset() {
        var self = this;

        
        self.variables = $$('Set')['$[]']();
        return (self.stack = []);
      });
      
      $def(self, '$extend_static', function $$extend_static() {
        var self = this;

        
        self.stack.$push(self.variables);
        self.variables = $$('Set')['$[]']();
        return self;
      });
      
      $def(self, '$extend_dynamic', function $$extend_dynamic() {
        var self = this;

        
        self.stack.$push(self.variables);
        self.variables = self.variables.$dup();
        return self;
      });
      
      $def(self, '$unextend', function $$unextend() {
        var self = this;

        
        self.variables = self.stack.$pop();
        return self;
      });
      
      $def(self, '$declare', function $$declare(name) {
        var self = this;

        
        self.variables.$add(name.$to_sym());
        return self;
      });
      
      $def(self, '$declared?', function $StaticEnvironment_declared$ques$1(name) {
        var self = this;

        return self.variables['$include?'](name.$to_sym())
      });
      
      $def(self, '$declare_forward_args', function $$declare_forward_args() {
        var self = this;

        return self.$declare($$('FORWARD_ARGS'))
      });
      
      $def(self, '$declared_forward_args?', function $StaticEnvironment_declared_forward_args$ques$2() {
        var self = this;

        return self['$declared?']($$('FORWARD_ARGS'))
      });
      
      $def(self, '$declare_anonymous_blockarg', function $$declare_anonymous_blockarg() {
        var self = this;

        return self.$declare($$('ANONYMOUS_BLOCKARG'))
      });
      
      $def(self, '$declared_anonymous_blockarg?', function $StaticEnvironment_declared_anonymous_blockarg$ques$3() {
        var self = this;

        return self['$declared?']($$('ANONYMOUS_BLOCKARG'))
      });
      
      $def(self, '$declare_anonymous_restarg', function $$declare_anonymous_restarg() {
        var self = this;

        return self.$declare($$('ANONYMOUS_RESTARG'))
      });
      
      $def(self, '$declared_anonymous_restarg?', function $StaticEnvironment_declared_anonymous_restarg$ques$4() {
        var self = this;

        return self['$declared?']($$('ANONYMOUS_RESTARG'))
      });
      
      $def(self, '$declare_anonymous_kwrestarg', function $$declare_anonymous_kwrestarg() {
        var self = this;

        return self.$declare($$('ANONYMOUS_KWRESTARG'))
      });
      
      $def(self, '$declared_anonymous_kwrestarg?', function $StaticEnvironment_declared_anonymous_kwrestarg$ques$5() {
        var self = this;

        return self['$declared?']($$('ANONYMOUS_KWRESTARG'))
      });
      return $def(self, '$empty?', function $StaticEnvironment_empty$ques$6() {
        var self = this;

        return self.stack['$empty?']()
      });
    })($nesting[0], null, $nesting)
  })($nesting[0], $nesting)
});

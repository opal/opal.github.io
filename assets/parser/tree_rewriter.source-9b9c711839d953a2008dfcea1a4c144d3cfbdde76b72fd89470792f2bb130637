Opal.queue(function(Opal) {/* Generated by Opal 1.8.2 */
  var $module = Opal.module, $klass = Opal.klass, $ensure_kwargs = Opal.ensure_kwargs, $kwrestargs = Opal.kwrestargs, $def = Opal.def, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$;

  Opal.add_stubs('new,process,include?,type,remove,wrap,insert_before,insert_after,replace');
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Parser');

    var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting);

    return (function($base, $super, $parent_nesting) {
      var self = $klass($base, $super, 'TreeRewriter');

      var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting), $proto = self.$$prototype;

      $proto.source_rewriter = nil;
      
      
      $def(self, '$rewrite', function $$rewrite(source_buffer, ast, $kwargs) {
        var policy, self = this;

        
        $kwargs = $ensure_kwargs($kwargs);
        policy = $kwrestargs($kwargs, {});
        self.source_rewriter = $$$($$$($$('Parser'), 'Source'), 'TreeRewriter').$new(source_buffer, Opal.to_hash(policy));
        self.$process(ast);
        return self.source_rewriter.$process();
      }, -3);
      
      $def(self, '$assignment?', function $TreeRewriter_assignment$ques$1(node) {
        
        return ["lvasgn", "ivasgn", "gvasgn", "cvasgn", "casgn"]['$include?'](node.$type())
      });
      
      $def(self, '$remove', function $$remove(range) {
        var self = this;

        return self.source_rewriter.$remove(range)
      });
      
      $def(self, '$wrap', function $$wrap(range, before, after) {
        var self = this;

        return self.source_rewriter.$wrap(range, before, after)
      });
      
      $def(self, '$insert_before', function $$insert_before(range, content) {
        var self = this;

        return self.source_rewriter.$insert_before(range, content)
      });
      
      $def(self, '$insert_after', function $$insert_after(range, content) {
        var self = this;

        return self.source_rewriter.$insert_after(range, content)
      });
      return $def(self, '$replace', function $$replace(range, content) {
        var self = this;

        return self.source_rewriter.$replace(range, content)
      });
    })($nesting[0], $$$($$$($$('Parser'), 'AST'), 'Processor'), $nesting)
  })($nesting[0], $nesting)
});

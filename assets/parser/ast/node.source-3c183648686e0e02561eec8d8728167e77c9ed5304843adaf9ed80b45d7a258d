Opal.queue(function(Opal) {/* Generated by Opal 1.8.1 */
  var $module = Opal.module, $klass = Opal.klass, $alias = Opal.alias, $truthy = Opal.truthy, $def = Opal.def, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$;

  Opal.add_stubs('attr_reader,location,[],frozen?,dup,node=');
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Parser');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $parent_nesting) {
      var self = $module($base, 'AST');

      var $nesting = [self].concat($parent_nesting);

      return (function($base, $super) {
        var self = $klass($base, $super, 'Node');

        
        
        self.$attr_reader("location");
        $alias(self, "loc", "location");
        return $def(self, '$assign_properties', function $$assign_properties(properties) {
          var self = this, location = nil;

          if ($truthy((location = properties['$[]']("location")))) {
            
            if ($truthy(location['$frozen?']())) {
              location = location.$dup()
            };
            location['$node='](self);
            return (self.location = location);
          } else {
            return nil
          }
        });
      })($nesting[0], $$$($$$('AST'), 'Node'))
    })($nesting[0], $nesting)
  })($nesting[0], $nesting)
});

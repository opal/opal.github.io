Opal.queue(function(Opal) {/* Generated by Opal 1.8.2 */
  var $module = Opal.module, $klass = Opal.klass, $def = Opal.def, $truthy = Opal.truthy, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$;

  Opal.add_stubs('attr_accessor,ignore?,call,raise?,raise,protected,==,level');
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Parser');

    var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting);

    return (function($base, $super, $parent_nesting) {
      var self = $klass($base, $super, 'Engine');

      var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting), $proto = self.$$prototype;

      $proto.consumer = $proto.ignore_warnings = $proto.all_errors_are_fatal = nil;
      
      self.$attr_accessor("consumer");
      self.$attr_accessor("all_errors_are_fatal");
      self.$attr_accessor("ignore_warnings");
      
      $def(self, '$initialize', function $$initialize(consumer) {
        var self = this;

        
        if (consumer == null) consumer = nil;
        self.consumer = consumer;
        self.all_errors_are_fatal = false;
        return (self.ignore_warnings = false);
      }, -1);
      
      $def(self, '$process', function $$process(diagnostic) {
        var self = this;

        
        if (!$truthy(self['$ignore?'](diagnostic))) {
          if ($truthy(self.consumer)) {
            self.consumer.$call(diagnostic)
          }
        };
        if ($truthy(self['$raise?'](diagnostic))) {
          self.$raise($$$($$('Parser'), 'SyntaxError'), diagnostic)
        };
        return self;
      });
      self.$protected();
      
      $def(self, '$ignore?', function $Engine_ignore$ques$1(diagnostic) {
        var self = this, $ret_or_1 = nil;

        if ($truthy(($ret_or_1 = self.ignore_warnings))) {
          return diagnostic.$level()['$==']("warning")
        } else {
          return $ret_or_1
        }
      });
      return $def(self, '$raise?', function $Engine_raise$ques$2(diagnostic) {
        var self = this, $ret_or_1 = nil, $ret_or_2 = nil;

        if ($truthy(($ret_or_1 = ($truthy(($ret_or_2 = self.all_errors_are_fatal)) ? (diagnostic.$level()['$==']("error")) : ($ret_or_2))))) {
          return $ret_or_1
        } else {
          return diagnostic.$level()['$==']("fatal")
        }
      });
    })($$('Diagnostic'), null, $nesting)
  })($nesting[0], $nesting)
});

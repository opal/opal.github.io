Opal.queue(function(Opal) {/* Generated by Opal 1.8.2 */
  var $module = Opal.module, $klass = Opal.klass, $send2 = Opal.send2, $find_super = Opal.find_super, $def = Opal.def, $send = Opal.send, $assign_ivar = Opal.assign_ivar, $nesting = [], nil = Opal.nil;

  Opal.add_stubs('attr_reader,with,update_operator,protected');
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Parser');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $parent_nesting) {
      var self = $module($base, 'Source');

      var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting);

      return (function($base, $super) {
        var self = $klass($base, $super, 'Send');

        
        
        self.$attr_reader("dot");
        self.$attr_reader("selector");
        self.$attr_reader("operator");
        self.$attr_reader("begin");
        self.$attr_reader("end");
        
        $def(self, '$initialize', function $$initialize(dot_l, selector_l, begin_l, end_l, expression_l) {
          var $a, $yield = $$initialize.$$p || nil, self = this;

          $$initialize.$$p = null;
          
          self.dot = dot_l;
          self.selector = selector_l;
          $a = [begin_l, end_l], (self.begin = $a[0]), (self.end = $a[1]), $a;
          return $send2(self, $find_super(self, 'initialize', $$initialize, false, true), 'initialize', [expression_l], null);
        });
        
        $def(self, '$with_operator', function $$with_operator(operator_l) {
          var self = this;

          return $send(self, 'with', [], function $$1(map){
            
            if (map == null) map = nil;
            return map.$update_operator(operator_l);})
        });
        self.$protected();
        return $def(self, '$update_operator', $assign_ivar("operator"));
      })($$('Map'), $$('Map'))
    })($nesting[0], $nesting)
  })($nesting[0], $nesting)
});

Opal.queue(function(Opal) {/* Generated by Opal 1.8.1 */
  var $module = Opal.module, $klass = Opal.klass, $send2 = Opal.send2, $find_super = Opal.find_super, $def = Opal.def, $nesting = [], nil = Opal.nil;

  Opal.add_stubs('attr_reader');
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Parser');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $parent_nesting) {
      var self = $module($base, 'Source');

      var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting);

      return (function($base, $super) {
        var self = $klass($base, $super, 'Keyword');

        
        
        self.$attr_reader("keyword");
        self.$attr_reader("begin");
        self.$attr_reader("end");
        return $def(self, '$initialize', function $$initialize(keyword_l, begin_l, end_l, expression_l) {
          var $a, $yield = $$initialize.$$p || nil, self = this;

          $$initialize.$$p = null;
          
          self.keyword = keyword_l;
          $a = [begin_l, end_l], (self.begin = $a[0]), (self.end = $a[1]), $a;
          return $send2(self, $find_super(self, 'initialize', $$initialize, false, true), 'initialize', [expression_l], null);
        });
      })($$('Map'), $$('Map'))
    })($nesting[0], $nesting)
  })($nesting[0], $nesting)
});

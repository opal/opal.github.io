Opal.queue(function(Opal) {/* Generated by Opal 1.8.1 */
  var $module = Opal.module, $klass = Opal.klass, $send2 = Opal.send2, $find_super = Opal.find_super, $truthy = Opal.truthy, $def = Opal.def, $nesting = [], nil = Opal.nil;

  Opal.add_stubs('attr_reader,join');
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Parser');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $parent_nesting) {
      var self = $module($base, 'Source');

      var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting);

      return (function($base, $super) {
        var self = $klass($base, $super, 'MethodDefinition');

        var $proto = self.$$prototype;

        $proto.keyword = nil;
        
        self.$attr_reader("keyword");
        self.$attr_reader("operator");
        self.$attr_reader("name");
        self.$attr_reader("end");
        self.$attr_reader("assignment");
        return $def(self, '$initialize', function $$initialize(keyword_l, operator_l, name_l, end_l, assignment_l, body_l) {
          var $yield = $$initialize.$$p || nil, self = this, $ret_or_1 = nil;

          $$initialize.$$p = null;
          
          self.keyword = keyword_l;
          self.operator = operator_l;
          self.name = name_l;
          self.end = end_l;
          self.assignment = assignment_l;
          return $send2(self, $find_super(self, 'initialize', $$initialize, false, true), 'initialize', [self.keyword.$join(($truthy(($ret_or_1 = end_l)) ? ($ret_or_1) : (body_l)))], null);
        });
      })($$('Map'), $$('Map'))
    })($nesting[0], $nesting)
  })($nesting[0], $nesting)
});

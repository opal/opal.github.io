Opal.queue(function(Opal) {/* Generated by Opal 1.8.2 */
  var $module = Opal.module, $klass = Opal.klass, $defs = Opal.defs, $def = Opal.def, $truthy = Opal.truthy, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$;

  Opal.add_stubs('attr_reader,alias_method,new,associate,associate_locations,associate_by_identity,freeze,source,start_with?,text,==,type,is_a?,location,to_s,expression,inspect');
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Parser');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $parent_nesting) {
      var self = $module($base, 'Source');

      var $nesting = [self].concat($parent_nesting);

      return (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'Comment');

        var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting), $proto = self.$$prototype;

        $proto.location = nil;
        
        self.$attr_reader("text");
        self.$attr_reader("location");
        self.$alias_method("loc", "location");
        $defs(self, '$associate', function $$associate(ast, comments) {
          var associator = nil;

          
          associator = $$('Associator').$new(ast, comments);
          return associator.$associate();
        });
        $defs(self, '$associate_locations', function $$associate_locations(ast, comments) {
          var associator = nil;

          
          associator = $$('Associator').$new(ast, comments);
          return associator.$associate_locations();
        });
        $defs(self, '$associate_by_identity', function $$associate_by_identity(ast, comments) {
          var associator = nil;

          
          associator = $$('Associator').$new(ast, comments);
          return associator.$associate_by_identity();
        });
        
        $def(self, '$initialize', function $$initialize(range) {
          var self = this;

          
          self.location = $$$($$$($$('Parser'), 'Source'), 'Map').$new(range);
          self.text = range.$source().$freeze();
          return self.$freeze();
        });
        
        $def(self, '$type', function $$type() {
          var self = this;

          if ($truthy(self.$text()['$start_with?']("#".$freeze()))) {
            return "inline"
          } else if ($truthy(self.$text()['$start_with?']("=begin".$freeze()))) {
            return "document"
          } else {
            return nil
          }
        });
        
        $def(self, '$inline?', function $Comment_inline$ques$1() {
          var self = this;

          return self.$type()['$==']("inline")
        });
        
        $def(self, '$document?', function $Comment_document$ques$2() {
          var self = this;

          return self.$type()['$==']("document")
        });
        
        $def(self, '$==', function $Comment_$eq_eq$3(other) {
          var self = this, $ret_or_1 = nil;

          if ($truthy(($ret_or_1 = other['$is_a?']($$$($$('Source'), 'Comment'))))) {
            return self.location['$=='](other.$location())
          } else {
            return $ret_or_1
          }
        });
        return $def(self, '$inspect', function $$inspect() {
          var self = this;

          return "#<Parser::Source::Comment " + (self.location.$expression().$to_s()) + " " + (self.$text().$inspect()) + ">"
        });
      })($nesting[0], null, $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting)
});

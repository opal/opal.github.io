Opal.queue(function(Opal) {/* Generated by Opal 1.8.2 */
  var $module = Opal.module, $klass = Opal.klass, $def = Opal.def, $truthy = Opal.truthy, $eqeq = Opal.eqeq, $nesting = [], nil = Opal.nil;

  Opal.add_stubs('include,attr_reader,alias_method,freeze,<=>,begin_pos,range,zero?,order,empty?,==,length,inspect');
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Parser');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $parent_nesting) {
      var self = $module($base, 'Source');

      var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting);

      return (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'Action');

        var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting), $proto = self.$$prototype;

        $proto.replacement = $proto.range = nil;
        
        self.$include($$('Comparable'));
        self.$attr_reader("range", "replacement", "allow_multiple_insertions", "order");
        self.$alias_method("allow_multiple_insertions?", "allow_multiple_insertions");
        
        $def(self, '$initialize', function $$initialize(range, replacement, allow_multiple_insertions, order) {
          var self = this;

          
          if (replacement == null) replacement = "";
          if (allow_multiple_insertions == null) allow_multiple_insertions = false;
          if (order == null) order = 0;
          self.range = range;
          self.replacement = replacement;
          self.allow_multiple_insertions = allow_multiple_insertions;
          self.order = order;
          return self.$freeze();
        }, -2);
        
        $def(self, '$<=>', function $Action_$lt_eq_gt$1(other) {
          var self = this, result = nil;

          
          result = self.$range().$begin_pos()['$<=>'](other.$range().$begin_pos());
          if (!$truthy(result['$zero?']())) {
            return result
          };
          return self.$order()['$<=>'](other.$order());
        });
        return $def(self, '$to_s', function $$to_s() {
          var self = this;

          if (($eqeq(self.range.$length(), 0) && ($truthy(self.replacement['$empty?']())))) {
            return "do nothing"
          } else if ($eqeq(self.range.$length(), 0)) {
            return "insert " + (self.replacement.$inspect())
          } else if ($truthy(self.replacement['$empty?']())) {
            return "remove " + (self.range.$length()) + " character(s)"
          } else {
            return "replace " + (self.range.$length()) + " character(s) with " + (self.replacement.$inspect())
          }
        });
      })($$('Rewriter'), null, $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting)
});

Opal.queue(function(Opal) {/* Generated by Opal 1.8.1 */
  var $module = Opal.module, $klass = Opal.klass, $const_set = Opal.const_set, $def = Opal.def, $send = Opal.send, $to_a = Opal.to_a, $truthy = Opal.truthy, $nesting = [], nil = Opal.nil;

  Opal.add_stubs('reset,attr_accessor,in_block,in_lambda');
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Parser');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $super, $parent_nesting) {
      var self = $klass($base, $super, 'Context');

      var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting);

      
      $const_set($nesting[0], 'FLAGS', ["in_defined", "in_kwarg", "in_argdef", "in_def", "in_class", "in_block", "in_lambda"]);
      
      $def(self, '$initialize', function $$initialize() {
        var self = this;

        return self.$reset()
      });
      
      $def(self, '$reset', function $$reset() {
        var self = this;

        
        self.in_defined = false;
        self.in_kwarg = false;
        self.in_argdef = false;
        self.in_def = false;
        self.in_class = false;
        self.in_block = false;
        return (self.in_lambda = false);
      });
      $send(self, 'attr_accessor', $to_a($$('FLAGS')));
      return $def(self, '$in_dynamic_block?', function $Context_in_dynamic_block$ques$1() {
        var self = this, $ret_or_1 = nil;

        if ($truthy(($ret_or_1 = self.$in_block()))) {
          return $ret_or_1
        } else {
          return self.$in_lambda()
        }
      });
    })($nesting[0], null, $nesting)
  })($nesting[0], $nesting)
});

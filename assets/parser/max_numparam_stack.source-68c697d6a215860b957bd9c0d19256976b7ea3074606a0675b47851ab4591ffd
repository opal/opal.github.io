Opal.queue(function(Opal) {/* Generated by Opal 1.8.1 */
  var $module = Opal.module, $klass = Opal.klass, $const_set = Opal.const_set, $def = Opal.def, $truthy = Opal.truthy, $rb_gt = Opal.rb_gt, $ensure_kwargs = Opal.ensure_kwargs, $get_kwarg = Opal.get_kwarg, $send = Opal.send, $nesting = [], nil = Opal.nil;

  Opal.add_stubs('attr_reader,==,size,set,top,>,max,[],last,push,pop,private,[]=');
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Parser');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $super, $parent_nesting) {
      var self = $klass($base, $super, 'MaxNumparamStack');

      var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting), $proto = self.$$prototype;

      $proto.stack = nil;
      
      self.$attr_reader("stack");
      $const_set($nesting[0], 'ORDINARY_PARAMS', -1);
      
      $def(self, '$initialize', function $$initialize() {
        var self = this;

        return (self.stack = [])
      });
      
      $def(self, '$empty?', function $MaxNumparamStack_empty$ques$1() {
        var self = this;

        return self.stack.$size()['$=='](0)
      });
      
      $def(self, '$has_ordinary_params!', function $MaxNumparamStack_has_ordinary_params$excl$2() {
        var self = this;

        return self.$set($$('ORDINARY_PARAMS'))
      });
      
      $def(self, '$has_ordinary_params?', function $MaxNumparamStack_has_ordinary_params$ques$3() {
        var self = this;

        return self.$top()['$==']($$('ORDINARY_PARAMS'))
      });
      
      $def(self, '$has_numparams?', function $MaxNumparamStack_has_numparams$ques$4() {
        var self = this, $ret_or_1 = nil;

        if ($truthy(($ret_or_1 = self.$top()))) {
          return $rb_gt(self.$top(), 0)
        } else {
          return $ret_or_1
        }
      });
      
      $def(self, '$register', function $$register(numparam) {
        var self = this;

        return self.$set([self.$top(), numparam].$max())
      });
      
      $def(self, '$top', function $$top() {
        var self = this;

        return self.stack.$last()['$[]']("value")
      });
      
      $def(self, '$push', function $$push($kwargs) {
        var static$, self = this;

        
        $kwargs = $ensure_kwargs($kwargs);
        static$ = $get_kwarg($kwargs, "static");
        return self.stack.$push((new Map([["value", 0], ["static", static$]])));
      });
      
      $def(self, '$pop', function $$pop() {
        var self = this;

        return self.stack.$pop()['$[]']("value")
      });
      self.$private();
      return $def(self, '$set', function $$set(value) {
        var $a, self = this;

        return ($a = ["value", value], $send(self.stack.$last(), '[]=', $a), $a[$a.length - 1])
      });
    })($nesting[0], null, $nesting)
  })($nesting[0], $nesting)
});

Opal.queue(function(Opal) {/* Generated by Opal 1.8.2 */
  var $module = Opal.module, $klass = Opal.klass, $def = Opal.def, $rb_minus = Opal.rb_minus, $send = Opal.send, $nesting = [], nil = Opal.nil;

  Opal.add_stubs('attr_reader,freeze,==,size,<<,[]=,-,length,pop,clear,last');
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Parser');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $super) {
      var self = $klass($base, $super, 'CurrentArgStack');

      var $proto = self.$$prototype;

      $proto.stack = nil;
      
      self.$attr_reader("stack");
      
      $def(self, '$initialize', function $$initialize() {
        var self = this;

        
        self.stack = [];
        return self.$freeze();
      });
      
      $def(self, '$empty?', function $CurrentArgStack_empty$ques$1() {
        var self = this;

        return self.stack.$size()['$=='](0)
      });
      
      $def(self, '$push', function $$push(value) {
        var self = this;

        return self.stack['$<<'](value)
      });
      
      $def(self, '$set', function $$set(value) {
        var $a, self = this;

        return ($a = [$rb_minus(self.stack.$length(), 1), value], $send(self.stack, '[]=', $a), $a[$a.length - 1])
      });
      
      $def(self, '$pop', function $$pop() {
        var self = this;

        return self.stack.$pop()
      });
      
      $def(self, '$reset', function $$reset() {
        var self = this;

        return self.stack.$clear()
      });
      return $def(self, '$top', function $$top() {
        var self = this;

        return self.stack.$last()
      });
    })($nesting[0], null)
  })($nesting[0], $nesting)
});

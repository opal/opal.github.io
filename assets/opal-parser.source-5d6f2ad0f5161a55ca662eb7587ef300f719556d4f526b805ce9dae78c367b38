Opal.queue(function(Opal) {/* Generated by Opal 1.8.1 */
  var $call = Opal.call, $raise = Opal.raise, $module = Opal.module, $Opal = Opal.Opal, $truthy = Opal.truthy, $rb_plus = Opal.rb_plus, $def = Opal.def, $thrower = Opal.thrower, self = Opal.top, $nesting = [], $$ = Opal.$r($nesting), nil = Opal.nil, $$$ = Opal.$$$;

  Opal.add_stubs('require,coerce_to!,merge,new,compile,[],+,to_data_uri_comment,source_map,js_eval');
  
  self.$require("corelib/string/unpack");
  self.$require("opal/compiler");
  self.$require("opal/erb");
  self.$require("opal/version");
  (function($base, $parent_nesting) {
    var self = $module($base, 'Kernel');

    var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting);

    
    
    $def(self, '$eval', function $Kernel_eval$1(str, binding, file, line) {
      var self = this, default_eval_options = nil, $ret_or_1 = nil, compiling_options = nil, compiler = nil, code = nil;

      
      if (binding == null) binding = nil;
      if (file == null) file = nil;
      if (line == null) line = nil;
      str = $Opal['$coerce_to!'](str, $$('String'), "to_str");
      default_eval_options = (new Map([["file", ($truthy(($ret_or_1 = file)) ? ($ret_or_1) : ("(eval)"))], ["eval", true]]));
      compiling_options = (new Map([['arity_check', false]])).$merge(default_eval_options);
      compiler = $$$($$('Opal'), 'Compiler').$new(str, compiling_options);
      code = compiler.$compile();
      if (!$truthy(compiling_options['$[]']("no_source_map"))) {
        code = $rb_plus(code, compiler.$source_map().$to_data_uri_comment())
      };
      if ($truthy(binding)) {
        return binding.$js_eval(code)
      } else {
        
        return (function(self) {
          return eval(code);
        })(self)
      
      };
    }, -2);
    return $def(self, '$require_remote', function $$require_remote(url) {try { 
      var $a, self = this;

      
      
      var r = new XMLHttpRequest();
      r.open("GET", url, false);
      r.send('');
    ;
      return ($a = r.responseText, typeof Opal.compile === 'function' ? eval(Opal.compile($a, {scope_variables: ["url"], arity_check: false, file: '(eval)', eval: true})) : self.$eval($a));} catch($e) {
        if ($e === Opal.t_eval_return) return $e.$v;
        throw $e;
      }
    });
  })($nesting[0], $nesting);
  
  var $has_own = Object.hasOwn || $call.bind(Object.prototype.hasOwnProperty);

  Opal.compile = function(str, options) {
    try {
      str = $Opal['$coerce_to!'](str, $$('String'), "to_str")
      if (options) options = Opal.hash(options);
      return Opal.Opal.$compile(str, options);
    }
    catch (e) {
      if (e.$$class === Opal.Opal.SyntaxError) {
        var err = Opal.SyntaxError.$new(e.message);
        err.$set_backtrace(e.$backtrace());
        throw(err);
      }
      else { throw e; }
    }
  };

  Opal['eval'] = function(str, options) {
    return eval(Opal.compile(str, options));
  };

  function run_ruby_scripts() {
    var tag, tags = document.getElementsByTagName('script');

    for (var i = 0, len = tags.length; i < len; i++) {
      tag = tags[i];
      if (tag.type === "text/ruby") {
        if (tag.src)       Opal.Kernel.$require_remote(tag.src);
        if (tag.innerHTML) Opal.Kernel.$eval(tag.innerHTML);
      }
    }
  }

  if (typeof(document) !== 'undefined') {
    if (window.addEventListener) {
      window.addEventListener('DOMContentLoaded', run_ruby_scripts, false);
    }
    else {
      window.attachEvent('onload', run_ruby_scripts);
    }
  }
;
});

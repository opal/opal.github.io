Opal.queue(function(Opal) {/* Generated by Opal 1.8.1 */
  var $module = Opal.module, $klass = Opal.klass, $truthy = Opal.truthy, $def = Opal.def, $send = Opal.send, $return_val = Opal.return_val, $nesting = [], nil = Opal.nil;

  Opal.add_stubs('nil?,to_ast,type,respond_to?,send,handler_missing,map,to_a,process');
  return (function($base, $parent_nesting) {
    var self = $module($base, 'AST');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $super, $parent_nesting) {
      var self = $klass($base, $super, 'Processor');

      var $nesting = [self].concat($parent_nesting);

      return (function($base) {
        var self = $module($base, 'Mixin');

        
        
        
        $def(self, '$process', function $$process(node) {
          var self = this, on_handler = nil, new_node = nil;

          
          if ($truthy(node['$nil?']())) {
            return nil
          };
          node = node.$to_ast();
          on_handler = "on_" + (node.$type());
          if ($truthy(self['$respond_to?'](on_handler))) {
            new_node = self.$send(on_handler, node)
          } else {
            new_node = self.$handler_missing(node)
          };
          if ($truthy(new_node)) {
            node = new_node
          };
          return node;
        });
        
        $def(self, '$process_all', function $$process_all(nodes) {
          var self = this;

          return $send(nodes.$to_a(), 'map', [], function $$1(node){var self = $$1.$$s == null ? this : $$1.$$s;

            
            if (node == null) node = nil;
            return self.$process(node);}, {$$s: self})
        });
        return $def(self, '$handler_missing', $return_val(nil));
      })($nesting[0])
    })($nesting[0], null, $nesting)
  })($nesting[0], $nesting)
});

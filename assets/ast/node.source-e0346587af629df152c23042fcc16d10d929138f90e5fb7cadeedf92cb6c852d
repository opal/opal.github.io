Opal.queue(function(Opal) {/* Generated by Opal 1.8.1 */
  var $module = Opal.module, $klass = Opal.klass, $alias = Opal.alias, $def = Opal.def, $truthy = Opal.truthy, $send = Opal.send, $return_self = Opal.return_self, $eqeq = Opal.eqeq, $rb_plus = Opal.rb_plus, $rb_times = Opal.rb_times, $to_a = Opal.to_a, $nesting = [], nil = Opal.nil;

  Opal.add_stubs('attr_reader,children,to_sym,freeze,to_a,assign_properties,hash,class,eql?,type,each,instance_variable_set,protected,dup,private,nil?,==,original_dup,send,equal?,respond_to?,to_ast,updated,+,concat,append,*,fancy_type,is_a?,to_sexp,inspect,map,to_sexp_array,gsub,to_s');
  return (function($base, $parent_nesting) {
    var self = $module($base, 'AST');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $super, $parent_nesting) {
      var self = $klass($base, $super, 'Node');

      var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting), $proto = self.$$prototype;

      $proto.type = $proto.children = nil;
      
      self.$attr_reader("type");
      self.$attr_reader("children");
      $alias(self, "to_a", "children");
      self.$attr_reader("hash");
      
      $def(self, '$initialize', function $$initialize(type, children, properties) {
        var $a, self = this;

        
        if (children == null) children = [];
        if (properties == null) properties = (new Map());
        $a = [type.$to_sym(), children.$to_a().$freeze()], (self.type = $a[0]), (self.children = $a[1]), $a;
        self.$assign_properties(properties);
        self.hash = [self.type, self.children, self.$class()].$hash();
        return self.$freeze();
      }, -2);
      
      $def(self, '$eql?', function $Node_eql$ques$1(other) {
        var self = this, $ret_or_1 = nil, $ret_or_2 = nil;

        if ($truthy(($ret_or_1 = ($truthy(($ret_or_2 = self.$class()['$eql?'](other.$class()))) ? (self.type['$eql?'](other.$type())) : ($ret_or_2))))) {
          return self.children['$eql?'](other.$children())
        } else {
          return $ret_or_1
        }
      });
      
      $def(self, '$assign_properties', function $$assign_properties(properties) {
        var self = this;

        
        $send(properties, 'each', [], function $$2(name, value){var self = $$2.$$s == null ? this : $$2.$$s;

          
          if (name == null) name = nil;
          if (value == null) value = nil;
          return self.$instance_variable_set("@" + (name), value);}, {$$s: self});
        return nil;
      });
      self.$protected("assign_properties");
      $alias(self, "original_dup", "dup");
      self.$private("original_dup");
      
      $def(self, '$dup', $return_self);
      $alias(self, "clone", "dup");
      
      $def(self, '$updated', function $$updated(type, children, properties) {
        var self = this, new_type = nil, $ret_or_1 = nil, new_children = nil, new_properties = nil, copy = nil;

        
        if (type == null) type = nil;
        if (children == null) children = nil;
        if (properties == null) properties = nil;
        new_type = ($truthy(($ret_or_1 = type)) ? ($ret_or_1) : (self.type));
        new_children = ($truthy(($ret_or_1 = children)) ? ($ret_or_1) : (self.children));
        new_properties = ($truthy(($ret_or_1 = properties)) ? ($ret_or_1) : ((new Map())));
        if ((($eqeq(self.type, new_type) && ($eqeq(self.children, new_children))) && ($truthy(properties['$nil?']())))) {
          return self
        } else {
          
          copy = self.$original_dup();
          copy.$send("initialize", new_type, new_children, new_properties);
          return copy;
        };
      }, -1);
      
      $def(self, '$==', function $Node_$eq_eq$3(other) {
        var self = this, $ret_or_1 = nil;

        if ($truthy(self['$equal?'](other))) {
          return true
        } else if ($truthy(other['$respond_to?']("to_ast"))) {
          
          other = other.$to_ast();
          if ($truthy(($ret_or_1 = other.$type()['$=='](self.$type())))) {
            return other.$children()['$=='](self.$children())
          } else {
            return $ret_or_1
          };
        } else {
          return false
        }
      });
      
      $def(self, '$concat', function $$concat(array) {
        var self = this;

        return self.$updated(nil, $rb_plus(self.children, array.$to_a()))
      });
      $alias(self, "+", "concat");
      
      $def(self, '$append', function $$append(element) {
        var self = this;

        return self.$updated(nil, $rb_plus(self.children, [element]))
      });
      $alias(self, "<<", "append");
      
      $def(self, '$to_sexp', function $$to_sexp(indent) {
        var self = this, indented = nil, sexp = nil;

        
        if (indent == null) indent = 0;
        indented = $rb_times("  ", indent);
        sexp = "" + (indented) + "(" + (self.$fancy_type());
        $send(self.$children(), 'each', [], function $$4(child){
          
          if (child == null) child = nil;
          if ($truthy(child['$is_a?']($$('Node')))) {
            return (sexp = $rb_plus(sexp, "\n" + (child.$to_sexp($rb_plus(indent, 1)))))
          } else {
            return (sexp = $rb_plus(sexp, " " + (child.$inspect())))
          };});
        sexp = $rb_plus(sexp, ")");
        return sexp;
      }, -1);
      $alias(self, "to_s", "to_sexp");
      
      $def(self, '$inspect', function $$inspect(indent) {
        var self = this, indented = nil, sexp = nil;

        
        if (indent == null) indent = 0;
        indented = $rb_times("  ", indent);
        sexp = "" + (indented) + "s(:" + (self.type);
        $send(self.$children(), 'each', [], function $$5(child){
          
          if (child == null) child = nil;
          if ($truthy(child['$is_a?']($$('Node')))) {
            return (sexp = $rb_plus(sexp, ",\n" + (child.$inspect($rb_plus(indent, 1)))))
          } else {
            return (sexp = $rb_plus(sexp, ", " + (child.$inspect())))
          };});
        sexp = $rb_plus(sexp, ")");
        return sexp;
      }, -1);
      
      $def(self, '$to_ast', $return_self);
      
      $def(self, '$to_sexp_array', function $$to_sexp_array() {
        var self = this, children_sexp_arrs = nil;

        
        children_sexp_arrs = $send(self.$children(), 'map', [], function $$6(child){
          
          if (child == null) child = nil;
          if ($truthy(child['$is_a?']($$('Node')))) {
            return child.$to_sexp_array()
          } else {
            return child
          };});
        return [self.$type()].concat($to_a(children_sexp_arrs));
      });
      
      $def(self, '$deconstruct', function $$deconstruct() {
        var self = this;

        return [self.$type()].concat($to_a(self.$children()))
      });
      self.$protected();
      return $def(self, '$fancy_type', function $$fancy_type() {
        var self = this;

        return self.type.$to_s().$gsub("_", "-")
      });
    })($nesting[0], null, $nesting)
  })($nesting[0], $nesting)
});

Opal.queue(function(Opal) {/* Generated by Opal 1.8.2 */
  var $module = Opal.module, $klass = Opal.klass, $send2 = Opal.send2, $find_super = Opal.find_super, $def = Opal.def, $truthy = Opal.truthy, $defs = Opal.defs, $rb_plus = Opal.rb_plus, $alias = Opal.alias, $send = Opal.send, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$;

  Opal.add_stubs('attr_reader,attr_accessor,new,respond_to?,location=,location,diagnostic=,diagnostic,to_a,backtrace,unshift,to_s,set_backtrace,path,lineno,+,label,lineno=,line,label=,source_line,expression');
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Opal');

    var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting);

    
    $klass($nesting[0], $$('StandardError'), 'Error');
    (function($base, $super) {
      var self = $klass($base, $super, 'GemNotFound');

      
      
      self.$attr_reader("gem_name");
      return $def(self, '$initialize', function $$initialize(gem_name) {
        var $yield = $$initialize.$$p || nil, self = this;

        $$initialize.$$p = null;
        
        self.gem_name = gem_name;
        return $send2(self, $find_super(self, 'initialize', $$initialize, false, true), 'initialize', ["can't find gem " + (gem_name)], null);
      });
    })($nesting[0], $$('Error'));
    (function($base, $super) {
      var self = $klass($base, $super, 'CompilationError');

      
      return self.$attr_accessor("location")
    })($nesting[0], $$('Error'));
    $klass($nesting[0], $$('CompilationError'), 'ParsingError');
    $klass($nesting[0], $$('ParsingError'), 'RewritingError');
    (function($base, $super) {
      var self = $klass($base, $super, 'SyntaxError');

      
      return self.$attr_accessor("location")
    })($nesting[0], $$$('SyntaxError'));
    $defs(self, '$opal_location_from_error', function $$opal_location_from_error(error) {
      var opal_location = nil;

      
      opal_location = $$('OpalBacktraceLocation').$new();
      if ($truthy(error['$respond_to?']("location"))) {
        opal_location['$location='](error.$location())
      };
      if ($truthy(error['$respond_to?']("diagnostic"))) {
        opal_location['$diagnostic='](error.$diagnostic())
      };
      return opal_location;
    });
    $defs(self, '$add_opal_location_to_error', function $$add_opal_location_to_error(opal_location, error) {
      var backtrace = nil;

      
      backtrace = error.$backtrace().$to_a();
      backtrace.$unshift(opal_location.$to_s());
      error.$set_backtrace(backtrace);
      return error;
    });
    return (function($base, $super) {
      var self = $klass($base, $super, 'OpalBacktraceLocation');

      
      
      self.$attr_accessor("path", "lineno", "label");
      
      $def(self, '$initialize', function $$initialize(path, lineno, label) {
        var $a, self = this;

        
        if (path == null) path = nil;
        if (lineno == null) lineno = nil;
        if (label == null) label = nil;
        return $a = [path, lineno, label], (self.path = $a[0]), (self.lineno = $a[1]), (self.label = $a[2]), $a;
      }, -1);
      
      $def(self, '$to_s', function $$to_s() {
        var self = this, string = nil;

        
        string = self.$path();
        if ($truthy(self.$lineno())) {
          string = $rb_plus(string, ":" + (self.$lineno()))
        };
        string = $rb_plus(string, ":in ");
        if ($truthy(self.$label())) {
          string = $rb_plus(string, "`" + (self.$label()) + "'")
        } else {
          string = $rb_plus(string, "unknown")
        };
        return string;
      });
      $alias(self, "line", "lineno");
      
      $def(self, '$diagnostic=', function $OpalBacktraceLocation_diagnostic$eq$1(diagnostic) {
        var $a, self = this;

        
        if (!$truthy(diagnostic)) {
          return nil
        };
        return ($a = [diagnostic.$location()], $send(self, 'location=', $a), $a[$a.length - 1]);
      });
      return $def(self, '$location=', function $OpalBacktraceLocation_location$eq$2(location) {
        var $a, self = this;

        
        if (!$truthy(location)) {
          return nil
        };
        self['$lineno='](location.$line());
        if ($truthy(location['$respond_to?']("source_line"))) {
          return ($a = [location.$source_line()], $send(self, 'label=', $a), $a[$a.length - 1])
        } else if ($truthy(location['$respond_to?']("expression"))) {
          return ($a = [location.$expression().$source_line()], $send(self, 'label=', $a), $a[$a.length - 1])
        } else {
          return nil
        };
      });
    })($nesting[0], null);
  })($nesting[0], $nesting)
});

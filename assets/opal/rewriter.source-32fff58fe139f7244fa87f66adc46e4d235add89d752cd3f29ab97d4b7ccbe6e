Opal.queue(function(Opal) {/* Generated by Opal 1.8.1 */
  var $module = Opal.module, $klass = Opal.klass, $truthy = Opal.truthy, $def = Opal.def, $ensure_kwargs = Opal.ensure_kwargs, $hash_get = Opal.hash_get, $eqeq = Opal.eqeq, $assign_ivar = Opal.assign_ivar, $send = Opal.send, self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$;

  Opal.add_stubs('require,<<,list,delete,==,!=,use,disabled?,class,each,rewritter_disabled?,new,process');
  
  self.$require("opal/rewriters/opal_engine_check");
  self.$require("opal/rewriters/targeted_patches");
  self.$require("opal/rewriters/for_rewriter");
  self.$require("opal/rewriters/js_reserved_words");
  self.$require("opal/rewriters/block_to_iter");
  self.$require("opal/rewriters/dot_js_syntax");
  self.$require("opal/rewriters/pattern_matching");
  self.$require("opal/rewriters/logical_operator_assignment");
  self.$require("opal/rewriters/binary_operator_assignment");
  self.$require("opal/rewriters/hashes/key_duplicates_rewriter");
  self.$require("opal/rewriters/dump_args");
  self.$require("opal/rewriters/deduplicate_arg_name");
  self.$require("opal/rewriters/mlhs_args");
  self.$require("opal/rewriters/inline_args");
  self.$require("opal/rewriters/numblocks");
  self.$require("opal/rewriters/returnable_logic");
  self.$require("opal/rewriters/forward_args");
  self.$require("opal/rewriters/thrower_finder");
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Opal');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $super, $parent_nesting) {
      var self = $klass($base, $super, 'Rewriter');

      var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting), $proto = self.$$prototype;

      $proto.sexp = nil;
      
      self.disabled = false;
      (function(self, $parent_nesting) {
        
        
        
        $def(self, '$list', function $$list() {
          var self = this, $ret_or_1 = nil;
          if (self.list == null) self.list = nil;

          return (self.list = ($truthy(($ret_or_1 = self.list)) ? ($ret_or_1) : ([])))
        });
        
        $def(self, '$use', function $$use(rewriter) {
          var self = this;

          return self.$list()['$<<'](rewriter)
        });
        
        $def(self, '$delete', function $delete$1(rewriter) {
          var self = this;

          return self.$list().$delete(rewriter)
        });
        
        $def(self, '$disable', function $$disable($kwargs) {
          var except, $yield = $$disable.$$p || nil, self = this, old_disabled = nil, $ret_or_1 = nil;
          if (self.disabled == null) self.disabled = nil;

          $$disable.$$p = null;
          
          $kwargs = $ensure_kwargs($kwargs);
          
          except = $hash_get($kwargs, "except");if (except == null) except = nil;
          return (function() { try {
          
          old_disabled = self.disabled;
          self.disabled = ($truthy(($ret_or_1 = except)) ? ($ret_or_1) : (true));
          return Opal.yieldX($yield, []);;
          } finally {
            (self.disabled = old_disabled)
          }; })();
        }, -1);
        
        $def(self, '$disabled?', function $disabled$ques$2() {
          var self = this;
          if (self.disabled == null) self.disabled = nil;

          return self.disabled['$=='](true)
        });
        return $def(self, '$rewritter_disabled?', function $rewritter_disabled$ques$3(rewriter) {
          var self = this;
          if (self.disabled == null) self.disabled = nil;

          
          if ($eqeq(self.disabled, false)) {
            return false
          };
          return self.disabled['$!='](rewriter);
        });
      })(Opal.get_singleton_class(self), $nesting);
      self.$use($$$($$('Rewriters'), 'OpalEngineCheck'));
      self.$use($$$($$('Rewriters'), 'ForRewriter'));
      self.$use($$$($$('Rewriters'), 'Numblocks'));
      self.$use($$$($$('Rewriters'), 'ForwardArgs'));
      self.$use($$$($$('Rewriters'), 'BlockToIter'));
      self.$use($$$($$('Rewriters'), 'TargetedPatches'));
      self.$use($$$($$('Rewriters'), 'DotJsSyntax'));
      self.$use($$$($$('Rewriters'), 'PatternMatching'));
      self.$use($$$($$('Rewriters'), 'JsReservedWords'));
      self.$use($$$($$('Rewriters'), 'LogicalOperatorAssignment'));
      self.$use($$$($$('Rewriters'), 'BinaryOperatorAssignment'));
      self.$use($$$($$$($$('Rewriters'), 'Hashes'), 'KeyDuplicatesRewriter'));
      self.$use($$$($$('Rewriters'), 'ReturnableLogic'));
      self.$use($$$($$('Rewriters'), 'DeduplicateArgName'));
      self.$use($$$($$('Rewriters'), 'DumpArgs'));
      self.$use($$$($$('Rewriters'), 'MlhsArgs'));
      self.$use($$$($$('Rewriters'), 'InlineArgs'));
      self.$use($$$($$('Rewriters'), 'ThrowerFinder'));
      
      $def(self, '$initialize', $assign_ivar("sexp"));
      return $def(self, '$process', function $$process() {
        var self = this;

        
        if ($truthy(self.$class()['$disabled?']())) {
          return self.sexp
        };
        $send(self.$class().$list(), 'each', [], function $$4(rewriter_class){var self = $$4.$$s == null ? this : $$4.$$s, rewriter = nil;
          if (self.sexp == null) self.sexp = nil;

          
          if (rewriter_class == null) rewriter_class = nil;
          if ($truthy(self.$class()['$rewritter_disabled?'](rewriter_class))) {
            return nil
          };
          rewriter = rewriter_class.$new();
          return (self.sexp = rewriter.$process(self.sexp));}, {$$s: self});
        return self.sexp;
      });
    })($nesting[0], null, $nesting)
  })($nesting[0], $nesting);
});

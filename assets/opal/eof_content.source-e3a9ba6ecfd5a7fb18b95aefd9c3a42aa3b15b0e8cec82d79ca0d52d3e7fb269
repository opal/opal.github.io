Opal.queue(function(Opal) {/* Generated by Opal 1.8.1 */
  var $module = Opal.module, $klass = Opal.klass, $const_set = Opal.const_set, $def = Opal.def, $truthy = Opal.truthy, $send = Opal.send, $range = Opal.range, $eqeq = Opal.eqeq, $to_ary = Opal.to_ary, $nesting = [], nil = Opal.nil;

  Opal.add_stubs('empty?,[],last_token_position,drop_while,lines,match?,!,start_with?,join,==,private,last,end_pos');
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Opal');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $super, $parent_nesting) {
      var self = $klass($base, $super, 'EofContent');

      var $nesting = [self].concat($parent_nesting), $proto = self.$$prototype;

      $proto.tokens = $proto.source = nil;
      
      $const_set($nesting[0], 'DATA_SEPARATOR', "__END__\n");
      
      $def(self, '$initialize', function $$initialize(tokens, source) {
        var self = this;

        
        self.tokens = tokens;
        return (self.source = source);
      });
      
      $def(self, '$eof', function $$eof() {
        var self = this, eof_content = nil, $ret_or_1 = nil;

        
        if ($truthy(self.tokens['$empty?']())) {
          return nil
        };
        eof_content = self.source['$[]'](Opal.Range.$new(self.$last_token_position(), -1, false));
        if (!$truthy(eof_content)) {
          return nil
        };
        eof_content = $send(eof_content.$lines(), 'drop_while', [], function $$1(line){var $ret_or_1 = nil;

          
          if (line == null) line = nil;
          if ($truthy(($ret_or_1 = /^.*\r?\n?$/['$match?'](line)))) {
            return line['$start_with?']("__END__")['$!']()
          } else {
            return $ret_or_1
          };});
        if ($truthy(/^__END__\r?\n?$/['$match?'](eof_content['$[]'](0)))) {
          
          eof_content = ($truthy(($ret_or_1 = eof_content['$[]']($range(1, -1, false)))) ? ($ret_or_1) : ([]));
          return eof_content.$join();
        } else if ($eqeq(eof_content, ["__END__"])) {
          return ""
        } else {
          return nil
        };
      });
      self.$private();
      return $def(self, '$last_token_position', function $$last_token_position() {
        var $a, $b, self = this, _ = nil, last_token_info = nil, last_token_range = nil;

        
        $b = self.tokens.$last(), $a = $to_ary($b), (_ = ($a[0] == null ? nil : $a[0])), (last_token_info = ($a[1] == null ? nil : $a[1])), $b;
        $b = last_token_info, $a = $to_ary($b), (_ = ($a[0] == null ? nil : $a[0])), (last_token_range = ($a[1] == null ? nil : $a[1])), $b;
        return last_token_range.$end_pos();
      });
    })($nesting[0], null, $nesting)
  })($nesting[0], $nesting)
});

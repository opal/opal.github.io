Opal.queue(function(Opal) {/* Generated by Opal 1.8.2 */
  var $klass = Opal.klass, $send = Opal.send, $def = Opal.def, $truthy = Opal.truthy, $ensure_kwargs = Opal.ensure_kwargs, $hash_get = Opal.hash_get, $eqeq = Opal.eqeq, $rb_minus = Opal.rb_minus, $rb_lt = Opal.rb_lt, $to_ary = Opal.to_ary, $rb_plus = Opal.rb_plus, $not = Opal.not, $nesting = [], $$ = Opal.$r($nesting), nil = Opal.nil, $$$ = Opal.$$$;

  Opal.add_stubs('include,attr_reader,new,[]=,size,join,map,to_proc,file,==,encoding,source,encode,names,encode_mappings,relative_mappings,absolute_mappings,sort_by,to_a,-,line,<,column,source_map_name,[],to_s,to_int,each,fragments_by_line,skip_source_map?,is_a?,<<,segment_from_fragment,+,private,flat_map,fragments,code,match?,split,with_index,!,zero?,last');
  return (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'File');

    var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting), $proto = self.$$prototype;

    $proto.generated_code = $proto.fragments = $proto.names = $proto.names_map = $proto.relative_mappings = $proto.absolute_mappings = nil;
    
    self.$include($$$($$$($$('Opal'), 'SourceMap'), 'Map'));
    self.$attr_reader("fragments");
    self.$attr_reader("file");
    self.$attr_reader("source");
    
    $def(self, '$initialize', function $$initialize(fragments, file, source, generated_code) {
      var self = this;

      
      if (generated_code == null) generated_code = nil;
      self.fragments = fragments;
      self.file = file;
      self.source = source;
      self.names_map = $send($$('Hash'), 'new', [], function $$1(hash, name){var $a;

        
        if (hash == null) hash = nil;
        if (name == null) name = nil;
        return ($a = [name, hash.$size()], $send(hash, '[]=', $a), $a[$a.length - 1]);});
      self.generated_code = generated_code;
      return (self.absolute_mappings = nil);
    }, -4);
    
    $def(self, '$generated_code', function $$generated_code() {
      var self = this, $ret_or_1 = nil;

      return (self.generated_code = ($truthy(($ret_or_1 = self.generated_code)) ? ($ret_or_1) : ($send(self.fragments, 'map', [], "code".$to_proc()).$join())))
    });
    
    $def(self, '$map', function $$map($kwargs) {
      var source_root, self = this;

      
      $kwargs = $ensure_kwargs($kwargs);
      
      source_root = $hash_get($kwargs, "source_root");if (source_root == null) source_root = "";
      return (new Map([["version", 3], ["sourceRoot", source_root], ["sources", [self.$file()]], ["sourcesContent", [($eqeq(self.$source().$encoding(), $$$($$('Encoding'), 'UTF_8')) ? (self.$source()) : (self.$source().$encode("UTF-8", (new Map([["undef", "replace"]])))))]], ["names", self.$names()], ["mappings", $$$($$$($$('Opal'), 'SourceMap'), 'VLQ').$encode_mappings(self.$relative_mappings())]]));
    }, -1);
    
    $def(self, '$names', function $$names() {
      var self = this, $ret_or_1 = nil;

      return (self.names = ($truthy(($ret_or_1 = self.names)) ? ($ret_or_1) : ((self.$absolute_mappings(), $send($send(self.names_map.$to_a(), 'sort_by', [], function $$2(_, index){
        
        if (_ == null) _ = nil;
        if (index == null) index = nil;
        return index;}), 'map', [], function $$3(name, _){
        
        if (name == null) name = nil;
        if (_ == null) _ = nil;
        return name;})))))
    });
    
    $def(self, '$segment_from_fragment', function $$segment_from_fragment(fragment, generated_column) {
      var $a, self = this, source_index = nil, original_line = nil, $ret_or_1 = nil, original_column = nil, map_name_index = nil;

      
      source_index = 0;
      original_line = $rb_minus(($truthy(($ret_or_1 = fragment.$line())) ? ($ret_or_1) : (0)), 1);
      if ($truthy($rb_lt(original_line, 0))) {
        original_line = 0
      };
      original_column = ($truthy(($ret_or_1 = fragment.$column())) ? ($ret_or_1) : (0));
      if ($truthy(fragment.$source_map_name())) {
        
        map_name_index = ($truthy(($ret_or_1 = self.names_map['$[]'](fragment.$source_map_name().$to_s()))) ? ($ret_or_1) : (($a = [fragment.$source_map_name().$to_s(), self.names_map.$size()], $send(self.names_map, '[]=', $a), $a[$a.length - 1])));
        return [generated_column, source_index, original_line, original_column, map_name_index];
      } else {
        return [generated_column, source_index, original_line, original_column]
      };
    });
    
    $def(self, '$relative_mappings', function $$relative_mappings() {
      var self = this, $ret_or_1 = nil, reference_segment = nil, reference_name_index = nil;

      return (self.relative_mappings = ($truthy(($ret_or_1 = self.relative_mappings)) ? ($ret_or_1) : (((reference_segment = [0, 0, 0, 0, 0]), (reference_name_index = 0), $send(self.$absolute_mappings(), 'map', [], function $$4(absolute_mapping){
        
        if (absolute_mapping == null) absolute_mapping = nil;
        reference_segment['$[]='](0, 0);
        return $send(absolute_mapping, 'map', [], function $$5(absolute_segment){var segment = nil, $ret_or_2 = nil;

          
          if (absolute_segment == null) absolute_segment = nil;
          segment = [];
          segment['$[]='](0, $rb_minus(absolute_segment['$[]'](0), reference_segment['$[]'](0)));
          segment['$[]='](1, $rb_minus(absolute_segment['$[]'](1), ($truthy(($ret_or_2 = reference_segment['$[]'](1))) ? ($ret_or_2) : (0))));
          segment['$[]='](2, $rb_minus(absolute_segment['$[]'](2), ($truthy(($ret_or_2 = reference_segment['$[]'](2))) ? ($ret_or_2) : (0))));
          segment['$[]='](3, $rb_minus(absolute_segment['$[]'](3), ($truthy(($ret_or_2 = reference_segment['$[]'](3))) ? ($ret_or_2) : (0))));
          if ($truthy(absolute_segment['$[]'](4))) {
            
            segment['$[]='](4, $rb_minus(absolute_segment['$[]'](4).$to_int(), ($truthy(($ret_or_2 = reference_segment['$[]'](4))) ? ($ret_or_2) : (reference_name_index)).$to_int()));
            reference_name_index = absolute_segment['$[]'](4);
          };
          reference_segment = absolute_segment;
          return segment;});})))))
    });
    
    $def(self, '$absolute_mappings', function $$absolute_mappings() {
      var self = this, $ret_or_1 = nil, mappings = nil;

      return (self.absolute_mappings = ($truthy(($ret_or_1 = self.absolute_mappings)) ? ($ret_or_1) : (((mappings = []), $send(self.$fragments_by_line(), 'each', [], function $$6(raw_segments){var self = $$6.$$s == null ? this : $$6.$$s, generated_column = nil, segments = nil;

        
        if (raw_segments == null) raw_segments = nil;
        generated_column = 0;
        segments = [];
        $send(raw_segments, 'each', [], function $$7($mlhs_tmp1){var $a, $b, self = $$7.$$s == null ? this : $$7.$$s, generated_code = nil, fragment = nil;

          
          if ($mlhs_tmp1 == null) $mlhs_tmp1 = nil;
          $b = $mlhs_tmp1, $a = $to_ary($b), (generated_code = ($a[0] == null ? nil : $a[0])), (fragment = ($a[1] == null ? nil : $a[1])), $b;
          if (!($truthy(fragment['$is_a?']($$$($$('Opal'), 'Fragment'))) && ($truthy(fragment['$skip_source_map?']())))) {
            segments['$<<'](self.$segment_from_fragment(fragment, generated_column))
          };
          return (generated_column = $rb_plus(generated_column, generated_code.$size()));}, {$$s: self, $$has_top_level_mlhs_arg: true});
        return mappings['$<<'](segments);}, {$$s: self}), mappings))))
    });
    self.$private();
    return $def(self, '$fragments_by_line', function $$fragments_by_line() {
      var self = this, raw_mappings = nil;

      
      raw_mappings = [[]];
      $send(self.$fragments(), 'flat_map', [], function $$8(fragment){var fragment_code = nil, splitter = nil, fragment_lines = nil;

        
        if (fragment == null) fragment = nil;
        fragment_code = fragment.$code();
        splitter = ($truthy(/\r/['$match?'](fragment_code)) ? (/\r?\n/) : ("\n"));
        fragment_lines = fragment_code.$split(splitter, -1);
        return $send(fragment_lines.$each(), 'with_index', [], function $$9(fragment_line, index){var raw_segment = nil;

          
          if (fragment_line == null) fragment_line = nil;
          if (index == null) index = nil;
          raw_segment = [fragment_line, fragment];
          if (($truthy(index['$zero?']()) && ($not(fragment_line.$size()['$zero?']())))) {
            return raw_mappings.$last()['$<<'](raw_segment)
          } else if (($truthy(index['$zero?']()) && ($truthy(fragment_line.$size()['$zero?']())))) {
            return nil
          } else if ($truthy(fragment_line.$size()['$zero?']())) {
            return raw_mappings['$<<']([])
          } else {
            return raw_mappings['$<<']([raw_segment])
          };});});
      return raw_mappings;
    });
  })($$$($$('Opal'), 'SourceMap'), null, $nesting)
});

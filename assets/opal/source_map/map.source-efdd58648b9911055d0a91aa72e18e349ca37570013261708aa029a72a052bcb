Opal.queue(function(Opal) {/* Generated by Opal 1.8.2 */
  var $module = Opal.module, $truthy = Opal.truthy, $def = Opal.def, $send = Opal.send, $slice = Opal.slice, $to_ary = Opal.to_ary, self = Opal.top, $nesting = [], $$ = Opal.$r($nesting), nil = Opal.nil, $$$ = Opal.$$$;

  Opal.add_stubs('require,map,to_h,to_json,each,[],delete,to_s,encode64,generated_code');
  
  self.$require("base64");
  self.$require("json");
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Map');

    var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting);

    
    
    $def(self, '$to_h', function $$to_h() {
      var self = this, $ret_or_1 = nil;
      if (self.to_h == null) self.to_h = nil;

      if ($truthy(($ret_or_1 = self.to_h))) {
        return $ret_or_1
      } else {
        return self.$map()
      }
    });
    
    $def(self, '$to_json', function $$to_json() {
      var self = this, map = nil;

      try {
        
        map = self.$to_h();
        return map.$to_json();
      } catch ($err) {
        if (Opal.rescue($err, [$$$($$('Encoding'), 'UndefinedConversionError')])) {
          try {
            
            $send(map['$[]']("sections"), 'each', [], function $$1(i){
              
              if (i == null) i = nil;
              try {
                return i.$to_json()
              } catch ($err) {
                if (Opal.rescue($err, [$$$($$('Encoding'), 'UndefinedConversionError')])) {
                  try {
                    return map['$[]']("sections").$delete(i)
                  } finally { Opal.pop_exception($err); }
                } else { throw $err; }
              };});
            return map.$to_json();
          } finally { Opal.pop_exception($err); }
        } else { throw $err; }
      }
    });
    
    $def(self, '$as_json', function $$as_json($a) {
      var $post_args, $fwd_rest, self = this;

      
      $post_args = $slice(arguments);
      $fwd_rest = $post_args;
      return self.$to_h();
    }, -1);
    
    $def(self, '$to_s', function $$to_s() {
      var self = this;

      return self.$to_h().$to_s()
    });
    
    $def(self, '$to_data_uri_comment', function $$to_data_uri_comment() {
      var self = this;

      return "//# sourceMappingURL=data:application/json;base64," + ($$('Base64').$encode64(self.$to_json()).$delete("\n"))
    });
    
    $def(self, '$cache', function $$cache() {
      var self = this, $ret_or_1 = nil;
      if (self.to_h == null) self.to_h = nil;

      
      self.to_h = ($truthy(($ret_or_1 = self.to_h)) ? ($ret_or_1) : (self.$map()));
      return self;
    });
    
    $def(self, '$marshal_dump', function $$marshal_dump() {
      var self = this;

      return [self.$to_h(), self.$generated_code()]
    });
    return $def(self, '$marshal_load', function $$marshal_load(value) {
      var $a, $b, self = this;

      return $b = value, $a = $to_ary($b), (self.to_h = ($a[0] == null ? nil : $a[0])), (self.generated_code = ($a[1] == null ? nil : $a[1])), $b
    });
  })($$$($$('Opal'), 'SourceMap'), $nesting);
});

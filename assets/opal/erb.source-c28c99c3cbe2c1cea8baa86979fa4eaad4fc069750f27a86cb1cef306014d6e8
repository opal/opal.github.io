Opal.queue(function(Opal) {/* Generated by Opal 1.8.1 */
  var $module = Opal.module, $defs = Opal.defs, $klass = Opal.klass, $const_set = Opal.const_set, $def = Opal.def, $truthy = Opal.truthy, $rb_plus = Opal.rb_plus, $send = Opal.send, $regexp = Opal.regexp, self = Opal.top, $nesting = [], nil = Opal.nil;

  Opal.add_stubs('require,compile,new,freeze,fix_quotes,find_contents,find_code,wrap_compiled,require_erb,prepared_source,gsub,+,last_match,=~,sub');
  
  self.$require("opal/compiler");
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Opal');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $parent_nesting) {
      var self = $module($base, 'ERB');

      var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting);

      
      $defs(self, '$compile', function $$compile(source, file_name) {
        
        
        if (file_name == null) file_name = "(erb)";
        return $$('Compiler').$new(source, file_name).$compile();
      }, -2);
      return (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'Compiler');

        var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting), $proto = self.$$prototype;

        $proto.prepared_source = $proto.source = $proto.file_name = nil;
        
        $const_set($nesting[0], 'BLOCK_EXPR', /\s+(do|\{)(\s*\|[^|]*\|)?\s*\Z/.$freeze());
        
        $def(self, '$initialize', function $$initialize(source, file_name) {
          var $a, self = this;

          
          if (file_name == null) file_name = "(erb)";
          return $a = [source, file_name, source], (self.source = $a[0]), (self.file_name = $a[1]), (self.result = $a[2]), $a;
        }, -2);
        
        $def(self, '$prepared_source', function $$prepared_source() {
          var self = this, $ret_or_1 = nil, source = nil;

          return (self.prepared_source = ($truthy(($ret_or_1 = self.prepared_source)) ? ($ret_or_1) : (((source = self.source), (source = self.$fix_quotes(source)), (source = self.$find_contents(source)), (source = self.$find_code(source)), (source = self.$wrap_compiled(source)), (source = self.$require_erb(source)), source))))
        });
        
        $def(self, '$compile', function $$compile() {
          var self = this;

          return $$('Opal').$compile(self.$prepared_source())
        });
        
        $def(self, '$fix_quotes', function $$fix_quotes(result) {
          
          return result.$gsub("\"", "\\\"")
        });
        
        $def(self, '$require_erb', function $$require_erb(result) {
          
          return $rb_plus("require \"erb\";", result)
        });
        
        $def(self, '$find_contents', function $$find_contents(result) {
          
          return $send(result, 'gsub', [/<%=([\s\S]+?)%>/], function $$1(){var inner = nil;

            
            inner = $$('Regexp').$last_match(1).$gsub(/\\'/, "'").$gsub(/\\"/, "\"");
            if ($truthy(inner['$=~']($$('BLOCK_EXPR')))) {
              return "\")\noutput_buffer.append= " + (inner) + "\noutput_buffer.append(\""
            } else {
              return "\")\noutput_buffer.append=(" + (inner) + ")\noutput_buffer.append(\""
            };})
        });
        
        $def(self, '$find_code', function $$find_code(result) {
          
          return $send(result, 'gsub', [/<%([\s\S]+?)%>/], function $$2(){var inner = nil;

            
            inner = $$('Regexp').$last_match(1).$gsub(/\\"/, "\"");
            return "\")\n" + (inner) + "\noutput_buffer.append(\"";})
        });
        return $def(self, '$wrap_compiled', function $$wrap_compiled(result) {
          var self = this, path = nil;

          
          path = self.file_name.$sub($regexp(["\\.opalerb", $$('REGEXP_END')]), "");
          return "Template.new('" + (path) + "') do |output_buffer|\noutput_buffer.append(\"" + (result) + "\")\noutput_buffer.join\nend\n";
        });
      })($nesting[0], null, $nesting);
    })($nesting[0], $nesting)
  })($nesting[0], $nesting);
});

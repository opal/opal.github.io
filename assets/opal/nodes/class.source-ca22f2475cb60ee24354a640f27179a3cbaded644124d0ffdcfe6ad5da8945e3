Opal.queue(function(Opal) {/* Generated by Opal 1.8.2 */
  var $module = Opal.module, $klass = Opal.klass, $to_ary = Opal.to_ary, $truthy = Opal.truthy, $send = Opal.send, $rb_plus = Opal.rb_plus, $def = Opal.def, self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$;

  Opal.add_stubs('require,handle,children,name_and_base,helper,nil?,body,stmt?,unshift,super_code,line,in_scope,name=,scope,in_closure,|,compile_body,await_encountered,await_encountered=,parent,+,nesting,sup,expr');
  
  self.$require("opal/nodes/module");
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Opal');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $parent_nesting) {
      var self = $module($base, 'Nodes');

      var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting);

      return (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'ClassNode');

        var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting), $proto = self.$$prototype;

        $proto.define_nesting = nil;
        
        self.$handle("class");
        self.$children("cid", "sup", "body");
        
        $def(self, '$compile', function $$compile() {
          var $a, $b, self = this, name = nil, base = nil, await_begin = nil, await_end = nil, async = nil;

          
          $b = self.$name_and_base(), $a = $to_ary($b), (name = ($a[0] == null ? nil : $a[0])), (base = ($a[1] == null ? nil : $a[1])), $b;
          self.$helper("klass");
          if ($truthy(self.$body()['$nil?']())) {
            if ($truthy(self['$stmt?']())) {
              return self.$unshift("$klass(", base, ", ", self.$super_code(), ", '" + (name) + "')")
            } else {
              return self.$unshift("($klass(", base, ", ", self.$super_code(), ", '" + (name) + "'), nil)")
            }
          } else {
            
            self.$line("  var self = $klass($base, $super, '" + (name) + "');");
            $send(self, 'in_scope', [], function $$1(){var self = $$1.$$s == null ? this : $$1.$$s;

              
              self.$scope()['$name='](name);
              return $send(self, 'in_closure', [$$$($$('Closure'), 'MODULE')['$|']($$$($$('Closure'), 'JS_FUNCTION'))], function $$2(){var self = $$2.$$s == null ? this : $$2.$$s;

                return self.$compile_body()}, {$$s: self});}, {$$s: self});
            if ($truthy(self.$await_encountered())) {
              
              await_begin = "(await ";
              await_end = ")";
              async = "async ";
              self.$parent()['$await_encountered='](true);
            } else {
              $a = ["", "", ""], (await_begin = $a[0]), (await_end = $a[1]), (async = $a[2]), $a
            };
            self.$unshift("" + (await_begin) + "(" + (async) + "function($base, $super" + (($truthy(self.define_nesting) ? (", $parent_nesting") : nil)) + ") {");
            return self.$line("})(", base, ", ", self.$super_code(), "" + (($truthy(self.define_nesting) ? ($rb_plus(", ", self.$scope().$nesting())) : nil)) + ")" + (await_end));
          };
        });
        return $def(self, '$super_code', function $$super_code() {
          var self = this;

          if ($truthy(self.$sup())) {
            return self.$expr(self.$sup())
          } else {
            return "null"
          }
        });
      })($nesting[0], $$('ModuleNode'), $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting);
});

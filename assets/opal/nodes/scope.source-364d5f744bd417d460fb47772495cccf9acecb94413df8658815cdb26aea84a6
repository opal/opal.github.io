Opal.queue(function(Opal) {/* Generated by Opal 1.8.1 */
  var $module = Opal.module, $klass = Opal.klass, $slice = Opal.slice, $send2 = Opal.send2, $find_super = Opal.find_super, $to_a = Opal.to_a, $def = Opal.def, $send = Opal.send, $truthy = Opal.truthy, $assign_ivar_val = Opal.assign_ivar_val, $return_ivar = Opal.return_ivar, $not = Opal.not, $rb_plus = Opal.rb_plus, $eqeq = Opal.eqeq, $thrower = Opal.thrower, self = Opal.top, $nesting = [], nil = Opal.nil;

  Opal.add_stubs('require,attr_accessor,attr_reader,indent,scope,compiler,scope=,==,iter?,!,class?,dup,push,map,ivars,gvars,empty?,<<,parser_indent,join,+,fragment,def_in_class?,add_proto_ivar,include?,has_local?,|,scope_locals,reject,start_with?,to_s,has_temp?,unshift,pop,next_temp,loop,succ,uses_block!,identify!,valid_name?,mid,compact,parent,name,scope_name,unique_temp,lambda?,def?,type,nil?,rescue_else_sexp,last,class,collect_refinements_temps,add_scope_local,new_refinements_temp,identity,block_name=,add_temp,block_name,line');
  
  self.$require("opal/nodes/base");
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Opal');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $parent_nesting) {
      var self = $module($base, 'Nodes');

      var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting);

      return (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'ScopeNode');

        var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting), $proto = self.$$prototype;

        $proto.type = $proto.is_lambda = $proto.defs = $proto.parent = $proto.temps = $proto.locals = $proto.proto_ivars = $proto.compiler = $proto.ivars = $proto.gvars = $proto.args = $proto.queue = $proto.while_stack = $proto.identity = $proto.rescues = $proto.next_retry_id = $proto.refinements_temp = $proto.block_prepared = nil;
        
        self.$attr_accessor("parent");
        self.$attr_accessor("name");
        self.$attr_accessor("block_name");
        self.$attr_reader("scope_name");
        self.$attr_reader("locals");
        self.$attr_reader("ivars");
        self.$attr_reader("gvars");
        self.$attr_accessor("mid");
        self.$attr_accessor("defs");
        self.$attr_reader("methods");
        self.$attr_accessor("catch_return", "has_break", "has_retry");
        self.$attr_accessor("rescue_else_sexp");
        
        $def(self, '$initialize', function $$initialize($a) {
          var $post_args, $fwd_rest, $yield = $$initialize.$$p || nil, self = this;

          $$initialize.$$p = null;
          
          $post_args = $slice(arguments);
          $fwd_rest = $post_args;
          $send2(self, $find_super(self, 'initialize', $$initialize, false, true), 'initialize', $to_a($fwd_rest), $yield);
          self.locals = [];
          self.temps = [];
          self.args = [];
          self.ivars = [];
          self.gvars = [];
          self.parent = nil;
          self.queue = [];
          self.unique = "a";
          self.while_stack = [];
          self.identity = nil;
          self.defs = nil;
          self.methods = [];
          self.uses_block = false;
          self.in_ensure = false;
          return (self.proto_ivars = []);
        }, -1);
        
        $def(self, '$in_scope', function $$in_scope() {
          var $yield = $$in_scope.$$p || nil, self = this;

          $$in_scope.$$p = null;
          return $send(self, 'indent', [], function $$1(){var $a, self = $$1.$$s == null ? this : $$1.$$s;
            if (self.parent == null) self.parent = nil;

            
            self.parent = self.$compiler().$scope();
            self.$compiler()['$scope='](self);
            Opal.yield1($yield, self);
            return ($a = [self.parent], $send(self.$compiler(), 'scope=', $a), $a[$a.length - 1]);}, {$$s: self})
        });
        
        $def(self, '$class_scope?', function $ScopeNode_class_scope$ques$2() {
          var self = this, $ret_or_1 = nil;

          if ($truthy(($ret_or_1 = self.type['$==']("class")))) {
            return $ret_or_1
          } else {
            return self.type['$==']("module")
          }
        });
        
        $def(self, '$class?', function $ScopeNode_class$ques$3() {
          var self = this;

          return self.type['$==']("class")
        });
        
        $def(self, '$module?', function $ScopeNode_module$ques$4() {
          var self = this;

          return self.type['$==']("module")
        });
        
        $def(self, '$sclass?', function $ScopeNode_sclass$ques$5() {
          var self = this;

          return self.type['$==']("sclass")
        });
        
        $def(self, '$top?', function $ScopeNode_top$ques$6() {
          var self = this;

          return self.type['$==']("top")
        });
        
        $def(self, '$iter?', function $ScopeNode_iter$ques$7() {
          var self = this;

          return self.type['$==']("iter")
        });
        
        $def(self, '$def?', function $ScopeNode_def$ques$8() {
          var self = this, $ret_or_1 = nil;

          if ($truthy(($ret_or_1 = self.type['$==']("def")))) {
            return $ret_or_1
          } else {
            return self.type['$==']("defs")
          }
        });
        
        $def(self, '$lambda?', function $ScopeNode_lambda$ques$9() {
          var self = this, $ret_or_1 = nil;

          if ($truthy(($ret_or_1 = self['$iter?']()))) {
            return self.is_lambda
          } else {
            return $ret_or_1
          }
        });
        
        $def(self, '$is_lambda!', $assign_ivar_val("is_lambda", true));
        
        $def(self, '$defines_lambda', function $$defines_lambda() {
          var $yield = $$defines_lambda.$$p || nil, self = this;

          $$defines_lambda.$$p = null;
          
          self.lambda_definition = true;
          Opal.yieldX($yield, []);
          return (self.lambda_definition = false);
        });
        
        $def(self, '$lambda_definition?', $return_ivar("lambda_definition"));
        
        $def(self, '$def_in_class?', function $ScopeNode_def_in_class$ques$10() {
          var self = this, $ret_or_1 = nil, $ret_or_2 = nil, $ret_or_3 = nil;

          if ($truthy(($ret_or_1 = ($truthy(($ret_or_2 = ($truthy(($ret_or_3 = self.defs['$!']())) ? (self.type['$==']("def")) : ($ret_or_3)))) ? (self.parent) : ($ret_or_2))))) {
            return self.parent['$class?']()
          } else {
            return $ret_or_1
          }
        });
        
        $def(self, '$to_vars', function $$to_vars() {
          var self = this, vars = nil, iv = nil, gv = nil, indent = nil, str = nil, pvars = nil;

          
          vars = self.temps.$dup();
          $send(vars, 'push', $to_a($send(self.locals, 'map', [], function $$11(l){
            
            if (l == null) l = nil;
            return "" + (l) + " = nil";})));
          iv = $send(self.$ivars(), 'map', [], function $$12(ivar){
            
            if (ivar == null) ivar = nil;
            return "if (self" + (ivar) + " == null) self" + (ivar) + " = nil;\n";});
          gv = $send(self.$gvars(), 'map', [], function $$13(gvar){
            
            if (gvar == null) gvar = nil;
            return "if ($gvars" + (gvar) + " == null) $gvars" + (gvar) + " = nil;\n";});
          if (($truthy(self['$class?']()) && ($not(self.proto_ivars['$empty?']())))) {
            vars['$<<']("$proto = self.$$prototype")
          };
          indent = self.compiler.$parser_indent();
          str = ($truthy(vars['$empty?']()) ? ("") : ("var " + (vars.$join(", ")) + ";\n"));
          if (!$truthy(self.$ivars()['$empty?']())) {
            str = $rb_plus(str, "" + (indent) + (iv.$join(indent)))
          };
          if (!$truthy(self.$gvars()['$empty?']())) {
            str = $rb_plus(str, "" + (indent) + (gv.$join(indent)))
          };
          if (($truthy(self['$class?']()) && ($not(self.proto_ivars['$empty?']())))) {
            
            pvars = $send(self.proto_ivars, 'map', [], function $$14(i){
              
              if (i == null) i = nil;
              return "$proto" + (i);}).$join(" = ");
            str = "" + (str) + "\n" + (indent) + (pvars) + " = nil;";
          };
          return self.$fragment(str);
        });
        
        $def(self, '$add_scope_ivar', function $$add_scope_ivar(ivar) {
          var self = this;

          if ($truthy(self['$def_in_class?']())) {
            return self.parent.$add_proto_ivar(ivar)
          } else if ($truthy(self.ivars['$include?'](ivar))) {
            return nil
          } else {
            return self.ivars['$<<'](ivar)
          }
        });
        
        $def(self, '$add_scope_gvar', function $$add_scope_gvar(gvar) {
          var self = this;

          if ($truthy(self.gvars['$include?'](gvar))) {
            return nil
          } else {
            return self.gvars['$<<'](gvar)
          }
        });
        
        $def(self, '$add_proto_ivar', function $$add_proto_ivar(ivar) {
          var self = this;

          if ($truthy(self.proto_ivars['$include?'](ivar))) {
            return nil
          } else {
            return self.proto_ivars['$<<'](ivar)
          }
        });
        
        $def(self, '$add_arg', function $$add_arg(arg) {
          var self = this;

          
          if (!$truthy(self.args['$include?'](arg))) {
            self.args['$<<'](arg)
          };
          return arg;
        });
        
        $def(self, '$add_scope_local', function $$add_scope_local(local) {
          var self = this;

          
          if ($truthy(self['$has_local?'](local))) {
            return nil
          };
          return self.locals['$<<'](local);
        });
        
        $def(self, '$has_local?', function $ScopeNode_has_local$ques$15(local) {
          var self = this;

          
          if ((($truthy(self.locals['$include?'](local)) || ($truthy(self.args['$include?'](local)))) || ($truthy(self.temps['$include?'](local))))) {
            return true
          };
          if (($truthy(self.parent) && ($eqeq(self.type, "iter")))) {
            return self.parent['$has_local?'](local)
          };
          return false;
        });
        
        $def(self, '$scope_locals', function $$scope_locals() {
          var self = this, locals = nil;

          
          locals = self.locals['$|'](self.args)['$|']((($truthy(self.parent) && ($eqeq(self.type, "iter"))) ? (self.parent.$scope_locals()) : ([])));
          return $send(locals, 'reject', [], function $$16(i){
            
            if (i == null) i = nil;
            return i.$to_s()['$start_with?']("$");});
        });
        
        $def(self, '$add_scope_temp', function $$add_scope_temp(tmp) {
          var self = this;

          
          if ($truthy(self['$has_temp?'](tmp))) {
            return nil
          };
          return self.temps.$push(tmp);
        });
        
        $def(self, '$prepend_scope_temp', function $$prepend_scope_temp(tmp) {
          var self = this;

          
          if ($truthy(self['$has_temp?'](tmp))) {
            return nil
          };
          return self.temps.$unshift(tmp);
        });
        
        $def(self, '$has_temp?', function $ScopeNode_has_temp$ques$17(tmp) {
          var self = this;

          return self.temps['$include?'](tmp)
        });
        
        $def(self, '$new_temp', function $$new_temp() {
          var self = this, tmp = nil;

          
          if (!$truthy(self.queue['$empty?']())) {
            return self.queue.$pop()
          };
          tmp = self.$next_temp();
          self.temps['$<<'](tmp);
          return tmp;
        });
        
        $def(self, '$next_temp', function $$next_temp() {
          var self = this, tmp = nil;

          
          tmp = nil;
          (function(){try { var $t_break = $thrower('break'); return $send(self, 'loop', [], function $$18(){var self = $$18.$$s == null ? this : $$18.$$s;
            if (self.unique == null) self.unique = nil;

            
            tmp = "$" + (self.unique);
            self.unique = self.unique.$succ();
            if ($truthy(self['$has_local?'](tmp))) {
              return nil
            } else {
              $t_break.$throw(nil, $$18.$$is_lambda)
            };}, {$$s: self})} catch($e) {
            if ($e === $t_break) return $e.$v;
            throw $e;
          } finally {$t_break.is_orphan = true;}})();
          return tmp;
        });
        
        $def(self, '$queue_temp', function $$queue_temp(name) {
          var self = this;

          return self.queue['$<<'](name)
        });
        
        $def(self, '$push_while', function $$push_while() {
          var self = this, info = nil;

          
          info = (new Map());
          self.while_stack.$push(info);
          return info;
        });
        
        $def(self, '$pop_while', function $$pop_while() {
          var self = this;

          return self.while_stack.$pop()
        });
        
        $def(self, '$in_while?', function $ScopeNode_in_while$ques$19() {
          var self = this;

          return self.while_stack['$empty?']()['$!']()
        });
        
        $def(self, '$uses_block!', function $ScopeNode_uses_block$excl$20() {
          var self = this;

          if (($eqeq(self.type, "iter") && ($truthy(self.parent)))) {
            return self.parent['$uses_block!']()
          } else {
            
            self.uses_block = true;
            return self['$identify!']();
          }
        });
        
        $def(self, '$identify!', function $ScopeNode_identify$excl$21(name) {
          var self = this, $ret_or_1 = nil, $ret_or_2 = nil, $ret_or_3 = nil;

          
          if (name == null) name = nil;
          if ($truthy(self.identity)) {
            return self.identity
          };
          if ($truthy(self['$valid_name?'](self.$mid()))) {
            self.identity = "$$" + (self.$mid())
          } else {
            
            name = ($truthy(($ret_or_1 = name)) ? ($ret_or_1) : ([($truthy(($ret_or_2 = self.$parent())) ? (($truthy(($ret_or_3 = self.$parent().$name())) ? ($ret_or_3) : (self.$parent().$scope_name()))) : ($ret_or_2)), self.$mid()].$compact().$join("_")));
            self.identity = self.compiler.$unique_temp(name);
          };
          return self.identity;
        }, -1);
        self.$attr_reader("identity");
        
        $def(self, '$find_parent_def', function $$find_parent_def() {
          var self = this, scope = nil;

          
          scope = self;
          while ($truthy((scope = scope.$parent()))) {
          if (($truthy(scope['$def?']()) || ($truthy(scope['$lambda?']())))) {
              return scope
            }
          };
          return nil;
        });
        
        $def(self, '$super_chain', function $$super_chain() {
          var $a, self = this, chain = nil, scope = nil, defn = nil, mid = nil;

          
          $a = [[], self, "null", "null"], (chain = $a[0]), (scope = $a[1]), (defn = $a[2]), (mid = $a[3]), $a;
          while ($truthy(scope)) {
          if ($eqeq(scope.$type(), "iter")) {
              
              chain['$<<'](scope['$identify!']());
              if ($truthy(scope.$parent())) {
                scope = scope.$parent()
              };
            } else if ($truthy(["def", "defs"]['$include?'](scope.$type()))) {
              
              defn = scope['$identify!']();
              mid = "'" + (scope.$mid()) + "'";
              break;
            } else {
              break
            }
          };
          return [chain, defn, mid];
        });
        
        $def(self, '$uses_block?', $return_ivar("uses_block"));
        
        $def(self, '$has_rescue_else?', function $ScopeNode_has_rescue_else$ques$22() {
          var self = this;

          return self.$rescue_else_sexp()['$nil?']()['$!']()
        });
        
        $def(self, '$in_rescue', function $$in_rescue(node) {
          var $yield = $$in_rescue.$$p || nil, self = this, $ret_or_1 = nil, result = nil;

          $$in_rescue.$$p = null;
          
          self.rescues = ($truthy(($ret_or_1 = self.rescues)) ? ($ret_or_1) : ([]));
          self.rescues.$push(node);
          result = Opal.yieldX($yield, []);
          self.rescues.$pop();
          return result;
        });
        
        $def(self, '$current_rescue', function $$current_rescue() {
          var self = this;

          return self.rescues.$last()
        });
        
        $def(self, '$in_resbody', function $$in_resbody() {
          var $yield = $$in_resbody.$$p || nil, self = this, result = nil;

          $$in_resbody.$$p = null;
          
          if (!($yield !== nil)) {
            return nil
          };
          self.in_resbody = true;
          result = Opal.yieldX($yield, []);
          self.in_resbody = false;
          return result;
        });
        
        $def(self, '$in_resbody?', $return_ivar("in_resbody"));
        
        $def(self, '$in_ensure', function $$in_ensure() {
          var $yield = $$in_ensure.$$p || nil, self = this, result = nil;

          $$in_ensure.$$p = null;
          
          if (!($yield !== nil)) {
            return nil
          };
          self.in_ensure = true;
          result = Opal.yieldX($yield, []);
          self.in_ensure = false;
          return result;
        });
        
        $def(self, '$in_ensure?', $return_ivar("in_ensure"));
        
        $def(self, '$gen_retry_id', function $$gen_retry_id() {
          var self = this, $ret_or_1 = nil;

          
          self.next_retry_id = ($truthy(($ret_or_1 = self.next_retry_id)) ? ($ret_or_1) : ("retry_0"));
          return (self.next_retry_id = self.next_retry_id.$succ());
        });
        
        $def(self, '$accepts_using?', function $ScopeNode_accepts_using$ques$23() {
          var self = this;

          return [$$('TopNode'), $$('ModuleNode'), $$('ClassNode'), $$('IterNode')]['$include?'](self.$class())
        });
        
        $def(self, '$collect_refinements_temps', function $$collect_refinements_temps(temps) {
          var self = this;

          
          if (temps == null) temps = [];
          if ($truthy(self.refinements_temp)) {
            temps['$<<'](self.refinements_temp)
          };
          if ($truthy(self.$parent())) {
            return self.$parent().$collect_refinements_temps(temps)
          };
          return temps;
        }, -1);
        
        $def(self, '$new_refinements_temp', function $$new_refinements_temp() {
          var self = this, var$ = nil;

          
          var$ = self.$compiler().$unique_temp("$refn");
          self.$add_scope_local(var$);
          return var$;
        });
        
        $def(self, '$refinements_temp', function $$refinements_temp() {
          var $a, self = this, prev = nil, curr = nil;

          
          $a = [self.refinements_temp, self.$new_refinements_temp()], (prev = $a[0]), (curr = $a[1]), $a;
          self.refinements_temp = curr;
          return [prev, curr];
        });
        
        $def(self, '$self', function $$self() {
          var self = this;

          
          self.define_self = true;
          return "self";
        });
        
        $def(self, '$nesting', function $$nesting() {
          var self = this;

          
          self.define_nesting = true;
          return "$nesting";
        });
        
        $def(self, '$relative_access', function $$relative_access() {
          var self = this;

          
          self.define_relative_access = (self.define_nesting = true);
          return "$$";
        });
        
        $def(self, '$prepare_block', function $$prepare_block(block_name) {
          var self = this, scope_name = nil;

          
          if (block_name == null) block_name = nil;
          scope_name = self.$scope().$identity();
          if ($truthy(block_name)) {
            self['$block_name='](block_name)
          };
          self.$add_temp("" + (self.$block_name()) + " = " + (scope_name) + ".$$p || nil");
          if ($truthy(self.block_prepared)) {
            return nil
          } else {
            
            self.$line("" + (scope_name) + ".$$p = null;");
            return (self.block_prepared = true);
          };
        }, -1);
        return self.$attr_accessor("await_encountered");
      })($nesting[0], $$('Base'), $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting);
});

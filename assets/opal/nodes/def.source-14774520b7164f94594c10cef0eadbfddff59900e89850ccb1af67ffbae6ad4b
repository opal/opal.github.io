Opal.queue(function(Opal) {/* Generated by Opal 1.8.1 */
  var $module = Opal.module, $klass = Opal.klass, $truthy = Opal.truthy, $rb_lt = Opal.rb_lt, $eqeq = Opal.eqeq, $not = Opal.not, $send = Opal.send, $def = Opal.def, $rb_plus = Opal.rb_plus, self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$;

  Opal.add_stubs('require,handle,children,compile_body_or_shortcut,<,arity,[]=,arity_check?,compiler,parameters_code,parse_comments?,comments_code,enable_source_location?,source_location,==,keys,push,!,empty?,join,map,wrap_with_definition,nesting,scope,relative_access,in_scope,mid=,mid,type,defs=,identify!,identity,block_name=,process,inline_args,in_closure,|,stmt,returns,stmts,compile_block_arg,add_temp,compile_arity_check,unshift,current_indent,to_vars,line,await_encountered,helper,wrap,self,expr?,+,comments,inspect,text');
  
  self.$require("opal/nodes/node_with_args");
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Opal');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $parent_nesting) {
      var self = $module($base, 'Nodes');

      var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting);

      return (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'DefNode');

        var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting), $proto = self.$$prototype;

        $proto.define_nesting = $proto.define_relative_access = nil;
        
        self.$handle("def");
        self.$children("mid", "inline_args", "stmts");
        
        $def(self, '$compile', function $$compile() {
          var self = this, blockopts = nil;

          
          self.$compile_body_or_shortcut();
          blockopts = (new Map());
          if ($truthy($rb_lt(self.$arity(), 0))) {
            blockopts['$[]=']("$$arity", self.$arity())
          };
          if ($truthy(self.$compiler()['$arity_check?']())) {
            blockopts['$[]=']("$$parameters", self.$parameters_code())
          };
          if ($truthy(self.$compiler()['$parse_comments?']())) {
            blockopts['$[]=']("$$comments", self.$comments_code())
          };
          if ($truthy(self.$compiler()['$enable_source_location?']())) {
            blockopts['$[]=']("$$source_location", self.$source_location())
          };
          if ($eqeq(blockopts.$keys(), ["$$arity"])) {
            self.$push(", " + (self.$arity()))
          } else if ($not(blockopts['$empty?']())) {
            self.$push(", {", $send(blockopts, 'map', [], function $$1(k, v){
              
              if (k == null) k = nil;
              if (v == null) v = nil;
              return "" + (k) + ": " + (v);}).$join(", "), "}")
          };
          self.$wrap_with_definition();
          if ($truthy(self.define_nesting)) {
            self.$scope().$nesting()
          };
          if ($truthy(self.define_relative_access)) {
            return self.$scope().$relative_access()
          } else {
            return nil
          };
        });
        
        $def(self, '$compile_body', function $$compile_body() {
          var self = this, inline_params = nil, scope_name = nil;

          
          inline_params = nil;
          scope_name = nil;
          $send(self, 'in_scope', [], function $$2(){var self = $$2.$$s == null ? this : $$2.$$s;
            if (self.sexp == null) self.sexp = nil;

            
            self.$scope()['$mid='](self.$mid());
            if ($eqeq(self.sexp.$type(), "defs")) {
              self.$scope()['$defs='](true)
            };
            self.$scope()['$identify!']();
            scope_name = self.$scope().$identity();
            self.$scope()['$block_name=']("$yield");
            inline_params = self.$process(self.$inline_args());
            return $send(self, 'in_closure', [$$$($$('Closure'), 'DEF')['$|']($$$($$('Closure'), 'JS_FUNCTION'))], function $$3(){var self = $$3.$$s == null ? this : $$3.$$s, stmt_code = nil;
              if (self.define_self == null) self.define_self = nil;

              
              stmt_code = self.$stmt(self.$compiler().$returns(self.$stmts()));
              self.$compile_block_arg();
              if ($truthy(self.define_self)) {
                self.$add_temp("self = this")
              };
              self.$compile_arity_check();
              self.$unshift("\n" + (self.$current_indent()), self.$scope().$to_vars());
              return self.$line(stmt_code);}, {$$s: self});}, {$$s: self});
          self.$unshift(") {");
          self.$unshift(inline_params);
          self.$unshift("function " + (scope_name) + "(");
          if ($truthy(self.$await_encountered())) {
            self.$unshift("async ")
          };
          return self.$line("}");
        });
        
        $def(self, '$wrap_with_definition', function $$wrap_with_definition() {
          var self = this;

          
          self.$helper("def");
          self.$wrap("$def(" + (self.$scope().$self()) + ", '$" + (self.$mid()) + "', ", ")");
          if ($truthy(self['$expr?']())) {
            return nil
          } else {
            return self.$unshift("\n" + (self.$current_indent()))
          };
        });
        return $def(self, '$comments_code', function $$comments_code() {
          var self = this;

          return $rb_plus($rb_plus("[", $send(self.$comments(), 'map', [], function $$4(comment){
            
            if (comment == null) comment = nil;
            return comment.$text().$inspect();}).$join(", ")), "]")
        });
      })($nesting[0], $$('NodeWithArgs'), $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting);
});

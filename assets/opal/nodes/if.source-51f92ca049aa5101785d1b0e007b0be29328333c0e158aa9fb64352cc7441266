Opal.queue(function(Opal) {/* Generated by Opal 1.8.2 */
  var $module = Opal.module, $klass = Opal.klass, $truthy = Opal.truthy, $eqeq = Opal.eqeq, $def = Opal.def, $not = Opal.not, $send = Opal.send, $eqeqeq = Opal.eqeqeq, $const_set = Opal.const_set, $to_a = Opal.to_a, $neqeq = Opal.neqeq, $return_val = Opal.return_val, self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$;

  Opal.add_stubs('require,handle,children,should_compile_as_simple_expression?,==,true_body,s,compile_with_binary_or,false_body,compile_with_binary_and,compile_with_ternary,could_become_switch?,compile_with_switch,compile_with_if,expects_expression?,push_closure,truthy,falsy,!,push,js_truthy,test,indent,line,stmt,type,pop_closure,returning_if?,await_encountered,scope,wrap,[],meta,returnify,returns,compiler,expr?,recv?,simple?,expr,sexp,===,single_line?,strip_empty_children,all?,new,cap,match,handle_additional_switch_rules,valid_switch_body?,could_become_switch_branch?,<<,!=,[]=,merge!,compile_switch_case,include?,last,each,returning?,compile_switch_default,helper,new_temp,top_scope,excl,start_condition,end_condition');
  
  self.$require("opal/nodes/base");
  self.$require("opal/ast/matcher");
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Opal');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $parent_nesting) {
      var self = $module($base, 'Nodes');

      var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting);

      
      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'IfNode');

        var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting), $proto = self.$$prototype;

        $proto.sexp = $proto.switch_variable = $proto.switch_first_test = $proto.switch_additional_rules = nil;
        
        self.$handle("if");
        self.$children("test", "true_body", "false_body");
        
        $def(self, '$compile', function $$compile() {
          var self = this;

          if ($truthy(self['$should_compile_as_simple_expression?']())) {
            if ($eqeq(self.$true_body(), self.$s("true"))) {
              return self.$compile_with_binary_or()
            } else if ($eqeq(self.$false_body(), self.$s("false"))) {
              return self.$compile_with_binary_and()
            } else {
              return self.$compile_with_ternary()
            }
          } else if ($truthy(self['$could_become_switch?']())) {
            return self.$compile_with_switch()
          } else {
            return self.$compile_with_if()
          }
        });
        
        $def(self, '$compile_with_if', function $$compile_with_if() {
          var $a, self = this, truthy = nil, falsy = nil, return_kw = nil;

          
          if ($truthy(self['$expects_expression?']())) {
            self.$push_closure()
          };
          truthy = self.$truthy();
          falsy = self.$falsy();
          if (($truthy(falsy) && ($not(truthy)))) {
            
            self.$push("if (!", self.$js_truthy(self.$test()), ") {");
            $a = [truthy, falsy], (falsy = $a[0]), (truthy = $a[1]), $a;
          } else {
            self.$push("if (", self.$js_truthy(self.$test()), ") {")
          };
          if ($truthy(truthy)) {
            $send(self, 'indent', [], function $$1(){var self = $$1.$$s == null ? this : $$1.$$s;

              return self.$line(self.$stmt(truthy))}, {$$s: self})
          };
          if ($truthy(falsy)) {
            if ($eqeq(falsy.$type(), "if")) {
              self.$line("} else ", self.$stmt(falsy))
            } else {
              
              self.$line("} else {");
              $send(self, 'indent', [], function $$2(){var self = $$2.$$s == null ? this : $$2.$$s;

                return self.$line(self.$stmt(falsy))}, {$$s: self});
              self.$line("}");
            }
          } else {
            
            self.$line("}");
            if ($truthy(self['$expects_expression?']())) {
              self.$line("return nil;")
            };
          };
          if ($truthy(self['$expects_expression?']())) {
            self.$pop_closure()
          };
          if ($truthy(self['$expects_expression?']())) {
            
            if ($truthy(self['$returning_if?']())) {
              return_kw = "return "
            };
            if ($truthy(self.$scope().$await_encountered())) {
              return self.$wrap("" + (return_kw) + "(await (async function() {", "})())")
            } else {
              return self.$wrap("" + (return_kw) + "(function() {", "})()")
            };
          } else {
            return nil
          };
        });
        
        $def(self, '$returning_if?', function $IfNode_returning_if$ques$3() {
          var self = this;

          return self.sexp.$meta()['$[]']("returning")
        });
        
        $def(self, '$truthy', function $$truthy() {
          var self = this;

          return self.$returnify(self.$true_body())
        });
        
        $def(self, '$falsy', function $$falsy() {
          var self = this;

          return self.$returnify(self.$false_body())
        });
        
        $def(self, '$returnify', function $$returnify(body) {
          var self = this;

          if (($truthy(self['$expects_expression?']()) && ($truthy(body)))) {
            return self.$compiler().$returns(body)
          } else {
            return body
          }
        });
        
        $def(self, '$expects_expression?', function $IfNode_expects_expression$ques$4() {
          var self = this, $ret_or_1 = nil;

          if ($truthy(($ret_or_1 = self['$expr?']()))) {
            return $ret_or_1
          } else {
            return self['$recv?']()
          }
        });
        
        $def(self, '$should_compile_as_simple_expression?', function $IfNode_should_compile_as_simple_expression$ques$5() {
          var self = this, $ret_or_1 = nil, $ret_or_2 = nil;

          if ($truthy(($ret_or_1 = ($truthy(($ret_or_2 = self['$expects_expression?']())) ? (self['$simple?'](self.$true_body())) : ($ret_or_2))))) {
            return self['$simple?'](self.$false_body())
          } else {
            return $ret_or_1
          }
        });
        
        $def(self, '$compile_with_ternary', function $$compile_with_ternary() {
          var self = this, truthy = nil, falsy = nil, $ret_or_1 = nil;

          
          truthy = self.$true_body();
          falsy = self.$false_body();
          self.$push("(");
          self.$push(self.$js_truthy(self.$test()), " ? ");
          self.$push("(", self.$expr(($truthy(($ret_or_1 = truthy)) ? ($ret_or_1) : (self.$s("nil")))), ") : ");
          if (($not(falsy) || ($eqeq(falsy.$type(), "if")))) {
            self.$push(self.$expr(($truthy(($ret_or_1 = falsy)) ? ($ret_or_1) : (self.$s("nil")))))
          } else {
            self.$push("(", self.$expr(($truthy(($ret_or_1 = falsy)) ? ($ret_or_1) : (self.$s("nil")))), ")")
          };
          return self.$push(")");
        });
        
        $def(self, '$compile_with_binary_and', function $$compile_with_binary_and() {
          var self = this, truthy = nil, $ret_or_1 = nil;

          
          if ($truthy(self.$sexp().$meta()['$[]']("do_js_truthy_on_true_body"))) {
            truthy = self.$js_truthy(($truthy(($ret_or_1 = self.$true_body())) ? ($ret_or_1) : (self.$s("nil"))))
          } else {
            truthy = self.$expr(($truthy(($ret_or_1 = self.$true_body())) ? ($ret_or_1) : (self.$s("nil"))))
          };
          self.$push("(");
          self.$push(self.$js_truthy(self.$test()), " && ");
          self.$push("(", truthy, ")");
          return self.$push(")");
        });
        
        $def(self, '$compile_with_binary_or', function $$compile_with_binary_or() {
          var self = this, falsy = nil, $ret_or_1 = nil;

          
          if ($truthy(self.$sexp().$meta()['$[]']("do_js_truthy_on_false_body"))) {
            falsy = self.$js_truthy(($truthy(($ret_or_1 = self.$false_body())) ? ($ret_or_1) : (self.$s("nil"))))
          } else {
            falsy = self.$expr(($truthy(($ret_or_1 = self.$false_body())) ? ($ret_or_1) : (self.$s("nil"))))
          };
          self.$push("(");
          self.$push(self.$js_truthy(self.$test()), " || ");
          self.$push("(", falsy, ")");
          return self.$push(")");
        });
        
        $def(self, '$simple?', function $IfNode_simple$ques$6(body) {
          var self = this, $ret_or_1 = nil;

          if ($eqeqeq($$$($$('AST'), 'Node'), ($ret_or_1 = body))) {
            
            switch (body.$type().valueOf()) {
              case "return":
              case "js_return":
              case "break":
              case "next":
              case "redo":
              case "retry":
                return false
              case "xstr":
                return $$('XStringNode')['$single_line?']($$('XStringNode').$strip_empty_children(body.$children()))
              default:
                return $send(body.$children(), 'all?', [], function $$7(i){var self = $$7.$$s == null ? this : $$7.$$s;

                  
                  if (i == null) i = nil;
                  return self['$simple?'](i);}, {$$s: self})
            }
          } else {
            return true
          }
        });
        $const_set($nesting[0], 'SWITCH_TEST_MATCH', $send($$$($$('AST'), 'Matcher'), 'new', [], function $IfNode$8(){var self = $IfNode$8.$$s == null ? this : $IfNode$8.$$s;

          return self.$s("send", self.$cap(self.$s(["float", "int", "sym", "str", "true", "false", "nil"], "*")), "===", self.$s("lvasgn", self.$cap("*"), self.$cap("*")))}, {$$s: self}));
        $const_set($nesting[0], 'SWITCH_TEST_MATCH_CONTINUED', $send($$$($$('AST'), 'Matcher'), 'new', [], function $IfNode$9(){var self = $IfNode$9.$$s == null ? this : $IfNode$9.$$s;

          return self.$s("if", self.$s("send", self.$cap(self.$s(["float", "int", "sym", "str", "true", "false", "nil"], "*")), "===", self.$s("lvasgn", self.$cap("*"), self.$cap("*"))), self.$s("true"), self.$cap("*"))}, {$$s: self}));
        $const_set($nesting[0], 'SWITCH_BRANCH_TEST_MATCH', $send($$$($$('AST'), 'Matcher'), 'new', [], function $IfNode$10(){var self = $IfNode$10.$$s == null ? this : $IfNode$10.$$s;

          return self.$s("send", self.$cap(self.$s(["float", "int", "sym", "str", "true", "false", "nil"], "*")), "===", self.$s("js_tmp", self.$cap("*")))}, {$$s: self}));
        $const_set($nesting[0], 'SWITCH_BRANCH_TEST_MATCH_CONTINUED', $send($$$($$('AST'), 'Matcher'), 'new', [], function $IfNode$11(){var self = $IfNode$11.$$s == null ? this : $IfNode$11.$$s;

          return self.$s("if", self.$s("send", self.$cap(self.$s(["float", "int", "sym", "str", "true", "false", "nil"], "*")), "===", self.$s("js_tmp", self.$cap("*"))), self.$s("true"), self.$cap("*"))}, {$$s: self}));
        
        $def(self, '$could_become_switch?', function $IfNode_could_become_switch$ques$12() {
          var $a, self = this, test_match = nil, $ret_or_1 = nil, additional_rules = nil;

          
          if ($truthy(self['$expects_expression?']())) {
            return false
          };
          if ($truthy(self.$sexp().$meta()['$[]']("switch_child"))) {
            return true
          };
          test_match = ($truthy(($ret_or_1 = $$('SWITCH_TEST_MATCH').$match(self.$test()))) ? ($ret_or_1) : ($$('SWITCH_TEST_MATCH_CONTINUED').$match(self.$test())));
          if (!$truthy(test_match)) {
            return false
          };
          $a = [].concat($to_a(test_match)), (self.switch_test = ($a[0] == null ? nil : $a[0])), (self.switch_variable = ($a[1] == null ? nil : $a[1])), (self.switch_first_test = ($a[2] == null ? nil : $a[2])), (additional_rules = ($a[3] == null ? nil : $a[3])), $a;
          additional_rules = self.$handle_additional_switch_rules(additional_rules);
          if (!$truthy(additional_rules)) {
            return false
          };
          self.switch_additional_rules = additional_rules;
          if (!$truthy(self['$valid_switch_body?'](self.$true_body()))) {
            return false
          };
          return self['$could_become_switch_branch?'](self.$false_body());
        });
        
        $def(self, '$handle_additional_switch_rules', function $$handle_additional_switch_rules(additional_rules) {
          var $a, self = this, switch_additional_rules = nil, match = nil, $ret_or_1 = nil, switch_test = nil, switch_variable = nil;

          
          switch_additional_rules = [];
          while ($truthy(additional_rules)) {
          
            match = ($truthy(($ret_or_1 = $$('SWITCH_BRANCH_TEST_MATCH').$match(additional_rules))) ? ($ret_or_1) : ($$('SWITCH_BRANCH_TEST_MATCH_CONTINUED').$match(additional_rules)));
            if (!$truthy(match)) {
              return false
            };
            $a = [].concat($to_a(match)), (switch_test = ($a[0] == null ? nil : $a[0])), (switch_variable = ($a[1] == null ? nil : $a[1])), (additional_rules = ($a[2] == null ? nil : $a[2])), $a;
            if (!$eqeq(switch_variable, self.switch_variable)) {
              return false
            };
            switch_additional_rules['$<<'](switch_test);
          };
          return switch_additional_rules;
        });
        
        $def(self, '$could_become_switch_branch?', function $IfNode_could_become_switch_branch$ques$13(body) {
          var $a, self = this, test = nil, true_body = nil, false_body = nil, test_match = nil, $ret_or_1 = nil, switch_test = nil, switch_variable = nil, additional_rules = nil, switch_additional_rules = nil;

          
          if ($not(body)) {
            return true
          } else if ($neqeq(body.$type(), "if")) {
            
            if ($truthy(self['$valid_switch_body?'](body))) {
              
              body.$meta()['$[]=']("switch_default", true);
              return true;
            };
            return false;
          };
          $a = [].concat($to_a(body)), (test = ($a[0] == null ? nil : $a[0])), (true_body = ($a[1] == null ? nil : $a[1])), (false_body = ($a[2] == null ? nil : $a[2])), $a;
          test_match = ($truthy(($ret_or_1 = $$('SWITCH_BRANCH_TEST_MATCH').$match(test))) ? ($ret_or_1) : ($$('SWITCH_BRANCH_TEST_MATCH_CONTINUED').$match(test)));
          if (!$truthy(test_match)) {
            if ($truthy(self['$valid_switch_body?'](body, true))) {
              
              body.$meta()['$[]=']("switch_default", true);
              return true;
            }
          };
          $a = [].concat($to_a(test_match)), (switch_test = ($a[0] == null ? nil : $a[0])), (switch_variable = ($a[1] == null ? nil : $a[1])), (additional_rules = ($a[2] == null ? nil : $a[2])), $a;
          switch_additional_rules = self.$handle_additional_switch_rules(additional_rules);
          if (!$truthy(switch_additional_rules)) {
            return false
          };
          if (!$eqeq(switch_variable, self.switch_variable)) {
            return false
          };
          if (!$truthy(self['$valid_switch_body?'](true_body))) {
            return false
          };
          if (!$truthy(self['$could_become_switch_branch?'](false_body))) {
            return false
          };
          body.$meta()['$merge!']((new Map([["switch_child", true], ["switch_test", switch_test], ["switch_variable", self.switch_variable], ["switch_additional_rules", switch_additional_rules]])));
          return true;
        });
        
        $def(self, '$valid_switch_body?', function $IfNode_valid_switch_body$ques$14(body, check_variable) {
          var self = this, $ret_or_1 = nil;

          
          if (check_variable == null) check_variable = false;
          if ($eqeqeq($$$($$('AST'), 'Node'), ($ret_or_1 = body))) {
            
            switch (body.$type().valueOf()) {
              case "break":
              case "redo":
              case "retry":
                return false
              case "iter":
              case "while":
                return true
              default:
                return $send(body.$children(), 'all?', [], function $$15(i){var self = $$15.$$s == null ? this : $$15.$$s;

                  
                  if (i == null) i = nil;
                  return self['$valid_switch_body?'](i, check_variable);}, {$$s: self})
            }
          } else if ($eqeqeq(self.switch_variable, $ret_or_1)) {
            return check_variable['$!']()
          } else {
            return true
          };
        }, -2);
        
        $def(self, '$compile_with_switch', function $$compile_with_switch() {
          var self = this;

          if ($truthy(self.$sexp().$meta()['$[]']("switch_child"))) {
            
            self.switch_variable = self.$sexp().$meta()['$[]']("switch_variable");
            self.switch_additional_rules = self.$sexp().$meta()['$[]']("switch_additional_rules");
            return self.$compile_switch_case(self.$sexp().$meta()['$[]']("switch_test"));
          } else {
            
            self.$line("switch (", self.$expr(self.switch_first_test), ".valueOf()) {");
            $send(self, 'indent', [], function $$16(){var self = $$16.$$s == null ? this : $$16.$$s;
              if (self.switch_test == null) self.switch_test = nil;

              return self.$compile_switch_case(self.switch_test)}, {$$s: self});
            return self.$line("}");
          }
        });
        
        $def(self, '$returning?', function $IfNode_returning$ques$17(body) {
          var $ret_or_1 = nil, $ret_or_2 = nil;

          if ($truthy(($ret_or_1 = ["return", "js_return", "next"]['$include?'](body.$type())))) {
            return $ret_or_1
          } else {
            
            if ($truthy(($ret_or_2 = body.$type()['$==']("begin")))) {
              return ["return", "js_return", "next"]['$include?'](body.$children().$last().$type())
            } else {
              return $ret_or_2
            };
          }
        });
        
        $def(self, '$compile_switch_case', function $$compile_switch_case(test) {
          var self = this;

          
          self.$line("case ", self.$expr(test), ":");
          if ($truthy(self.switch_additional_rules)) {
            $send(self.switch_additional_rules, 'each', [], function $$18(rule){var self = $$18.$$s == null ? this : $$18.$$s;

              
              if (rule == null) rule = nil;
              return self.$line("case ", self.$expr(rule), ":");}, {$$s: self})
          };
          $send(self, 'indent', [], function $$19(){var self = $$19.$$s == null ? this : $$19.$$s;

            
            self.$line(self.$stmt(self.$true_body()));
            if (($not(self.$true_body()) || ($not(self['$returning?'](self.$true_body()))))) {
              return self.$line("break;")
            } else {
              return nil
            };}, {$$s: self});
          if ($truthy(self.$false_body())) {
            if ($truthy(self.$false_body().$meta()['$[]']("switch_default"))) {
              return self.$compile_switch_default()
            } else if ($truthy(self.$false_body().$meta()['$[]']("switch_child"))) {
              return self.$push(self.$stmt(self.$false_body()))
            } else {
              return nil
            }
          } else {
            return self.$push(self.$stmt(self.$s("nil")))
          };
        });
        return $def(self, '$compile_switch_default', function $$compile_switch_default() {
          var self = this;

          
          self.$line("default:");
          return $send(self, 'indent', [], function $$20(){var self = $$20.$$s == null ? this : $$20.$$s;

            return self.$line(self.$stmt(self.$false_body()))}, {$$s: self});
        });
      })($nesting[0], $$('Base'), $nesting);
      (function($base, $super) {
        var self = $klass($base, $super, 'BaseFlipFlop');

        
        
        self.$children("start_condition", "end_condition");
        return $def(self, '$compile', function $$compile() {
          var self = this, func_name = nil, flip_flop_state = nil;

          
          self.$helper("truthy");
          func_name = self.$top_scope().$new_temp();
          flip_flop_state = "" + (func_name) + ".$$ff";
          self.$push("(" + (func_name) + " = " + (func_name) + " || function(_start_func, _end_func){");
          self.$push("  var flip_flop = " + (flip_flop_state) + " || false;");
          self.$push("  if (!flip_flop) " + (flip_flop_state) + " = flip_flop = $truthy(_start_func());");
          self.$push("  " + (self.$excl()) + "if (flip_flop && $truthy(_end_func())) " + (flip_flop_state) + " = false;");
          self.$push("  return flip_flop;");
          self.$push("})(");
          self.$push("  function() { ", self.$stmt(self.$compiler().$returns(self.$start_condition())), " },");
          self.$push("  function() { ", self.$stmt(self.$compiler().$returns(self.$end_condition())), " }");
          return self.$push(")");
        });
      })($nesting[0], $$('Base'));
      (function($base, $super) {
        var self = $klass($base, $super, 'IFlipFlop');

        
        
        self.$handle("iflipflop");
        return $def(self, '$excl', $return_val(""));
      })($nesting[0], $$('BaseFlipFlop'));
      return (function($base, $super) {
        var self = $klass($base, $super, 'EFlipFlop');

        
        
        self.$handle("eflipflop");
        return $def(self, '$excl', $return_val("else "));
      })($nesting[0], $$('BaseFlipFlop'));
    })($nesting[0], $nesting)
  })($nesting[0], $nesting);
});

Opal.queue(function(Opal) {/* Generated by Opal 1.8.1 */
  var $module = Opal.module, $klass = Opal.klass, $send = Opal.send, $def = Opal.def, $range = Opal.range, $eqeq = Opal.eqeq, $truthy = Opal.truthy, $rb_gt = Opal.rb_gt, $to_a = Opal.to_a, $slice = Opal.slice, $rb_plus = Opal.rb_plus, $const_set = Opal.const_set, self = Opal.top, $nesting = [], nil = Opal.nil;

  Opal.add_stubs('require,handle,children,each,line,self,scope,expr,type,new_name,helper,inspect,[],to_s,first,old_name,push,==,record_method_call,compiler,last,error,empty?,stmt?,compile_children,simple_children?,compile_inline_children,>,size,wrap,returned_children,in_closure,await_encountered,parent,+,returns,s,process,fragment,freeze,none?,include?,map,each_with_index,reject,to_proc');
  
  self.$require("opal/nodes/base");
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Opal');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $parent_nesting) {
      var self = $module($base, 'Nodes');

      var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting);

      
      (function($base, $super) {
        var self = $klass($base, $super, 'UndefNode');

        
        
        self.$handle("undef");
        self.$children("value");
        return $def(self, '$compile', function $$compile() {
          var self = this;

          return $send(self.$children(), 'each', [], function $$1(child){var self = $$1.$$s == null ? this : $$1.$$s;

            
            if (child == null) child = nil;
            return self.$line("Opal.udef(" + (self.$scope().$self()) + ", '$' + ", self.$expr(child), ");");}, {$$s: self})
        });
      })($nesting[0], $$('Base'));
      (function($base, $super) {
        var self = $klass($base, $super, 'AliasNode');

        
        
        self.$handle("alias");
        self.$children("new_name", "old_name");
        return $def(self, '$compile', function $$compile() {
          var self = this, new_name_str = nil, old_name_str = nil;

          
          switch (self.$new_name().$type().valueOf()) {
            case "gvar":
              
              self.$helper("alias_gvar");
              new_name_str = self.$new_name().$children().$first().$to_s()['$[]']($range(1, -1, false)).$inspect();
              old_name_str = self.$old_name().$children().$first().$to_s()['$[]']($range(1, -1, false)).$inspect();
              return self.$push("$alias_gvar(", new_name_str, ", ", old_name_str, ")");
            case "dsym":
            case "sym":
              
              self.$helper("alias");
              if ($eqeq(self.$old_name().$type(), "sym")) {
                self.$compiler().$record_method_call(self.$old_name().$children().$last())
              };
              return self.$push("$alias(" + (self.$scope().$self()) + ", ", self.$expr(self.$new_name()), ", ", self.$expr(self.$old_name()), ")");
            default:
              return self.$error("Opal doesn't know yet how to alias with " + (self.$new_name().$type()))
          }
        });
      })($nesting[0], $$('Base'));
      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'BeginNode');

        var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting), $proto = self.$$prototype;

        $proto.level = $proto.returned_children = nil;
        
        self.$handle("begin");
        
        $def(self, '$compile', function $$compile() {
          var $a, self = this;

          
          if ($truthy(self.$children()['$empty?']())) {
            return self.$push("nil")
          };
          if ($truthy(self['$stmt?']())) {
            return self.$compile_children(self.$children(), self.level)
          } else if ($truthy(self['$simple_children?']())) {
            
            self.$compile_inline_children(self.$children(), self.level);
            if ($truthy($rb_gt(self.$children().$size(), 1))) {
              return self.$wrap("(", ")")
            } else {
              return nil
            };
          } else if ($eqeq(self.$children().$size(), 1)) {
            return self.$compile_inline_children(self.$returned_children(), self.level)
          } else {
            
            $send(self, 'in_closure', [], function $$2(){var self = $$2.$$s == null ? this : $$2.$$s;
              if (self.level == null) self.level = nil;

              return self.$compile_children(self.$returned_children(), self.level)}, {$$s: self});
            if ($truthy(($a = self.$scope().$parent(), ($a === nil || $a == null) ? nil : $a.$await_encountered()))) {
              return self.$wrap("(await (async function() {", "})())")
            } else {
              return self.$wrap("(function() {", "})()")
            };
          };
        });
        
        $def(self, '$returned_children', function $$returned_children() {
          var $a, $b, self = this, $ret_or_1 = nil, rest = nil, last_child = nil;

          return (self.returned_children = ($truthy(($ret_or_1 = self.returned_children)) ? ($ret_or_1) : (($a = [].concat($to_a(self.$children())), $b = $a.length - 1, $b = ($b < 0) ? 0 : $b, (rest = $slice($a, 0, $b)), (last_child = ($a[$b] == null ? nil : $a[$b])), $a, ($truthy(last_child) ? ($rb_plus(rest, [self.$compiler().$returns(last_child)])) : ([self.$s("nil")]))))))
        });
        
        $def(self, '$compile_children', function $$compile_children(children, level) {
          var self = this;

          return $send(children, 'each', [], function $$3(child){var self = $$3.$$s == null ? this : $$3.$$s;

            
            if (child == null) child = nil;
            return self.$line(self.$process(child, level), self.$fragment(";", (new Map([["loc", false]]))));}, {$$s: self})
        });
        $const_set($nesting[0], 'COMPLEX_CHILDREN', ["while", "while_post", "until", "until_post", "js_return"].$freeze());
        
        $def(self, '$simple_children?', function $BeginNode_simple_children$ques$4() {
          var self = this;

          return $send(self.$children(), 'none?', [], function $$5(child){
            
            if (child == null) child = nil;
            return $$('COMPLEX_CHILDREN')['$include?'](child.$type());})
        });
        return $def(self, '$compile_inline_children', function $$compile_inline_children(children, level) {
          var self = this, processed_children = nil;

          
          processed_children = $send(children, 'map', [], function $$6(child){var self = $$6.$$s == null ? this : $$6.$$s;

            
            if (child == null) child = nil;
            return self.$process(child, level);}, {$$s: self});
          return $send($send(processed_children, 'reject', [], "empty?".$to_proc()), 'each_with_index', [], function $$7(child, idx){var self = $$7.$$s == null ? this : $$7.$$s;

            
            if (child == null) child = nil;
            if (idx == null) idx = nil;
            if (!$eqeq(idx, 0)) {
              self.$push(self.$fragment(", ", (new Map([["loc", false]]))))
            };
            return self.$push(child);}, {$$s: self});
        });
      })($nesting[0], $$('ScopeNode'), $nesting);
      return (function($base, $super) {
        var self = $klass($base, $super, 'KwBeginNode');

        
        return self.$handle("kwbegin")
      })($nesting[0], $$('BeginNode'));
    })($nesting[0], $nesting)
  })($nesting[0], $nesting);
});

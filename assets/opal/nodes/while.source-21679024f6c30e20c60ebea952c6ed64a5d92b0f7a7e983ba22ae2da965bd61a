Opal.queue(function(Opal) {/* Generated by Opal 1.8.2 */
  var $module = Opal.module, $klass = Opal.klass, $truthy = Opal.truthy, $send = Opal.send, $def = Opal.def, $return_val = Opal.return_val, self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$;

  Opal.add_stubs('require,handle,children,js_truthy,test,uses_redo?,new_temp,scope,in_while,compiler,wrap_in_closure?,[]=,while_loop,in_closure,|,line,indent,stmt,body,compile_with_redo,compile_without_redo,queue_temp,await_encountered,wrap,private,compile_while,unshift,while_open,while_close,[],meta,expr?,recv?');
  
  self.$require("opal/nodes/base");
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Opal');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $parent_nesting) {
      var self = $module($base, 'Nodes');

      var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting);

      
      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'WhileNode');

        var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting), $proto = self.$$prototype;

        $proto.redo_var = $proto.sexp = nil;
        
        self.$handle("while");
        self.$children("test", "body");
        
        $def(self, '$compile', function $$compile() {
          var self = this, test_code = nil;

          
          test_code = self.$js_truthy(self.$test());
          if ($truthy(self['$uses_redo?']())) {
            self.redo_var = self.$scope().$new_temp()
          };
          $send(self.$compiler(), 'in_while', [], function $$1(){var self = $$1.$$s == null ? this : $$1.$$s;
            if (self.redo_var == null) self.redo_var = nil;

            
            if ($truthy(self['$wrap_in_closure?']())) {
              self.$while_loop()['$[]=']("closure", true)
            };
            self.$while_loop()['$[]=']("redo_var", self.redo_var);
            return $send(self, 'in_closure', [$$$($$('Closure'), 'LOOP')['$|']($$$($$('Closure'), 'JS_LOOP'))['$|'](($truthy(self['$wrap_in_closure?']()) ? ($$$($$('Closure'), 'JS_FUNCTION')) : (0)))], function $$2(){var self = $$2.$$s == null ? this : $$2.$$s;

              
              $send(self, 'in_closure', [$$$($$('Closure'), 'LOOP_INSIDE')['$|']($$$($$('Closure'), 'JS_LOOP_INSIDE'))], function $$3(){var self = $$3.$$s == null ? this : $$3.$$s;

                return self.$line($send(self, 'indent', [], function $$4(){var self = $$4.$$s == null ? this : $$4.$$s;

                  return self.$stmt(self.$body())}, {$$s: self}))}, {$$s: self});
              if ($truthy(self['$uses_redo?']())) {
                return self.$compile_with_redo(test_code)
              } else {
                return self.$compile_without_redo(test_code)
              };}, {$$s: self});}, {$$s: self});
          if ($truthy(self['$uses_redo?']())) {
            self.$scope().$queue_temp(self.redo_var)
          };
          if ($truthy(self['$wrap_in_closure?']())) {
            if ($truthy(self.$scope().$await_encountered())) {
              return self.$wrap("(await (async function() {", "; return nil; })())")
            } else {
              return self.$wrap("(function() {", "; return nil; })()")
            }
          } else {
            return nil
          };
        });
        self.$private();
        
        $def(self, '$compile_with_redo', function $$compile_with_redo(test_code) {
          var self = this;

          return self.$compile_while(test_code, "" + (self.redo_var) + " = false;")
        });
        
        $def(self, '$compile_without_redo', function $$compile_without_redo(test_code) {
          var self = this;

          return self.$compile_while(test_code)
        });
        
        $def(self, '$compile_while', function $$compile_while(test_code, redo_code) {
          var self = this;

          
          if (redo_code == null) redo_code = nil;
          if ($truthy(redo_code)) {
            self.$unshift(redo_code)
          };
          self.$unshift(self.$while_open(), test_code, self.$while_close());
          if ($truthy(redo_code)) {
            self.$unshift(redo_code)
          };
          return self.$line("}");
        }, -2);
        
        $def(self, '$while_open', function $$while_open() {
          var self = this, redo_part = nil;

          
          if ($truthy(self['$uses_redo?']())) {
            redo_part = "" + (self.redo_var) + " || "
          };
          return "while (" + (redo_part);
        });
        
        $def(self, '$while_close', $return_val(") {"));
        
        $def(self, '$uses_redo?', function $WhileNode_uses_redo$ques$5() {
          var self = this;

          return self.sexp.$meta()['$[]']("has_redo")
        });
        return $def(self, '$wrap_in_closure?', function $WhileNode_wrap_in_closure$ques$6() {
          var self = this, $ret_or_1 = nil;

          if ($truthy(($ret_or_1 = self['$expr?']()))) {
            return $ret_or_1
          } else {
            return self['$recv?']()
          }
        });
      })($nesting[0], $$('Base'), $nesting);
      (function($base, $super) {
        var self = $klass($base, $super, 'UntilNode');

        var $proto = self.$$prototype;

        $proto.redo_var = nil;
        
        self.$handle("until");
        self.$private();
        
        $def(self, '$while_open', function $$while_open() {
          var self = this, redo_part = nil;

          
          if ($truthy(self['$uses_redo?']())) {
            redo_part = "" + (self.redo_var) + " || "
          };
          return "while (" + (redo_part) + "!(";
        });
        return $def(self, '$while_close', $return_val(")) {"));
      })($nesting[0], $$('WhileNode'));
      (function($base, $super) {
        var self = $klass($base, $super, 'WhilePostNode');

        
        
        self.$handle("while_post");
        self.$private();
        
        $def(self, '$compile_while', function $$compile_while(test_code, redo_code) {
          var self = this;

          
          if (redo_code == null) redo_code = nil;
          if ($truthy(redo_code)) {
            self.$unshift(redo_code)
          };
          self.$unshift("do {");
          return self.$line("} ", self.$while_open(), test_code, self.$while_close());
        }, -2);
        return $def(self, '$while_close', $return_val(");"));
      })($nesting[0], $$('WhileNode'));
      return (function($base, $super) {
        var self = $klass($base, $super, 'UntilPostNode');

        var $proto = self.$$prototype;

        $proto.redo_var = nil;
        
        self.$handle("until_post");
        self.$private();
        
        $def(self, '$while_open', function $$while_open() {
          var self = this, redo_part = nil;

          
          if ($truthy(self['$uses_redo?']())) {
            redo_part = "" + (self.redo_var) + " || "
          };
          return "while (" + (redo_part) + "!(";
        });
        return $def(self, '$while_close', $return_val("));"));
      })($nesting[0], $$('WhilePostNode'));
    })($nesting[0], $nesting)
  })($nesting[0], $nesting);
});

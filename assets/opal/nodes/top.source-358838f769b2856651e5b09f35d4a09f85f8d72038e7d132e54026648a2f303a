Opal.queue(function(Opal) {/* Generated by Opal 1.8.2 */
  var $module = Opal.module, $klass = Opal.klass, $truthy = Opal.truthy, $eqeq = Opal.eqeq, $send = Opal.send, $def = Opal.def, $not = Opal.not, self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$;

  Opal.add_stubs('require,handle,children,top_scope=,compiler,[],meta,sexp,dynamic_cache_result=,push,version_comment,eof_content,helper,==,body,s,eval?,esm?,requirable?,unshift,definition,in_scope,use_strict?,line,in_closure,|,stmt,stmts,is_a?,add_temp,add_used_helpers,to_vars,scope,compile_method_stubs,compile_irb_vars,compile_end_construct,opening,closing,enable_file_source_embed?,add_file_source_embed,inspect,module_name,file,!,no_export?,await_encountered,load?,returns,irb?,reverse_each,to_a,helpers,prepend_scope_temp,method_missing?,method_calls,join,map,to_proc,empty?,source,to_json');
  
  self.$require("pathname");
  self.$require("json");
  self.$require("opal/version");
  self.$require("opal/nodes/scope");
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Opal');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $parent_nesting) {
      var self = $module($base, 'Nodes');

      var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting);

      return (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'TopNode');

        var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting);

        
        self.$handle("top");
        self.$children("body");
        
        $def(self, '$compile', function $$compile() {
          var self = this;

          
          self.$compiler()['$top_scope='](self);
          if ($truthy(self.$sexp().$meta()['$[]']("dynamic_cache_result"))) {
            self.$compiler()['$dynamic_cache_result='](true)
          };
          self.$push(self.$version_comment());
          if ($truthy(self.$compiler().$eof_content())) {
            self.$helper("return_val")
          };
          if ($eqeq(self.$body(), self.$s("nil"))) {
            if ((($truthy(self.$compiler()['$requirable?']()) || ($truthy(self.$compiler()['$esm?']()))) || ($truthy(self.$compiler()['$eval?']())))) {
              
              self.$unshift("Opal.return_val(Opal.nil); ");
              self.$definition();
            } else {
              self.$unshift("Opal.nil; ")
            }
          } else {
            
            $send(self, 'in_scope', [], function $$1(){var self = $$1.$$s == null ? this : $$1.$$s, body_code = nil;
              if (self.define_nesting == null) self.define_nesting = nil;
              if (self.define_self == null) self.define_self = nil;
              if (self.define_relative_access == null) self.define_relative_access = nil;
              if (self.define_absolute_const == null) self.define_absolute_const = nil;

              
              if ($truthy(self.$compiler()['$use_strict?']())) {
                self.$line("\"use strict\";")
              };
              body_code = $send(self, 'in_closure', [$$$($$('Closure'), 'JS_FUNCTION')['$|']($$$($$('Closure'), 'TOP'))], function $$2(){var self = $$2.$$s == null ? this : $$2.$$s;

                return self.$stmt(self.$stmts())}, {$$s: self});
              if (!$truthy(body_code['$is_a?']($$('Array')))) {
                body_code = [body_code]
              };
              if ($truthy(self.$compiler()['$eval?']())) {
                if ($truthy(self.define_nesting)) {
                  self.$add_temp("$nesting = self.$$is_a_module ? [self] : [self.$$class]")
                }
              } else {
                
                if ($truthy(self.define_self)) {
                  self.$add_temp("self = Opal.top")
                };
                if ($truthy(self.define_nesting)) {
                  self.$add_temp("$nesting = []")
                };
              };
              if ($truthy(self.define_relative_access)) {
                self.$add_temp("$$ = Opal.$r($nesting)")
              };
              self.$add_temp("nil = Opal.nil");
              if ($truthy(self.define_absolute_const)) {
                self.$add_temp("$$$ = Opal.$$$")
              };
              self.$add_used_helpers();
              self.$line(self.$scope().$to_vars());
              self.$compile_method_stubs();
              self.$compile_irb_vars();
              self.$compile_end_construct();
              return self.$line(body_code);}, {$$s: self});
            self.$opening();
            self.$definition();
            self.$closing();
          };
          if ($truthy(self.$compiler()['$enable_file_source_embed?']())) {
            return self.$add_file_source_embed()
          } else {
            return nil
          };
        });
        
        $def(self, '$module_name', function $$module_name() {
          var self = this;

          return $$$($$('Opal'), 'Compiler').$module_name(self.$compiler().$file()).$inspect()
        });
        
        $def(self, '$definition', function $$definition() {
          var self = this;

          if ($truthy(self.$compiler()['$requirable?']())) {
            return self.$unshift("Opal.modules[" + (self.$module_name()) + "] = ")
          } else if (($truthy(self.$compiler()['$esm?']()) && ($not(self.$compiler()['$no_export?']())))) {
            return self.$unshift("export default ")
          } else {
            return nil
          }
        });
        
        $def(self, '$opening', function $$opening() {
          var self = this, async_prefix = nil;

          
          if ($truthy(self.$await_encountered())) {
            async_prefix = "async "
          };
          if ($truthy(self.$compiler()['$requirable?']())) {
            return self.$unshift("" + (async_prefix) + "function(Opal) {")
          } else if ($truthy(self.$compiler()['$eval?']())) {
            return self.$unshift("(" + (async_prefix) + "function(Opal, self) {")
          } else {
            return self.$unshift("Opal.queue(" + (async_prefix) + "function(Opal) {")
          };
        });
        
        $def(self, '$closing', function $$closing() {
          var self = this;

          if ($truthy(self.$compiler()['$requirable?']())) {
            
            self.$line("};\n");
            if ($truthy(self.$compiler()['$load?']())) {
              return self.$line("Opal.load_normalized(" + (self.$module_name()) + ");")
            } else {
              return nil
            };
          } else if ($truthy(self.$compiler()['$eval?']())) {
            return self.$line("})(Opal, self);")
          } else {
            return self.$line("});\n")
          }
        });
        
        $def(self, '$stmts', function $$stmts() {
          var self = this;

          return self.$compiler().$returns(self.$body())
        });
        
        $def(self, '$absolute_const', function $$absolute_const() {
          var self = this;

          
          self.define_absolute_const = true;
          return "$$$";
        });
        
        $def(self, '$compile_irb_vars', function $$compile_irb_vars() {
          var self = this;

          if ($truthy(self.$compiler()['$irb?']())) {
            return self.$line("if (!Opal.irb_vars) { Opal.irb_vars = {}; }")
          } else {
            return nil
          }
        });
        
        $def(self, '$add_used_helpers', function $$add_used_helpers() {
          var self = this;

          return $send(self.$compiler().$helpers().$to_a(), 'reverse_each', [], function $$3(h){var self = $$3.$$s == null ? this : $$3.$$s;

            
            if (h == null) h = nil;
            return self.$prepend_scope_temp("$" + (h) + " = Opal." + (h));}, {$$s: self})
        });
        
        $def(self, '$compile_method_stubs', function $$compile_method_stubs() {
          var self = this, calls = nil, stubs = nil;

          if ($truthy(self.$compiler()['$method_missing?']())) {
            
            calls = self.$compiler().$method_calls();
            stubs = $send(calls.$to_a(), 'map', [], "to_s".$to_proc()).$join(",");
            if ($truthy(stubs['$empty?']())) {
              return nil
            } else {
              return self.$line("Opal.add_stubs('" + (stubs) + "');")
            };
          } else {
            return nil
          }
        });
        
        $def(self, '$compile_end_construct', function $$compile_end_construct() {
          var self = this, content = nil;

          if ($truthy((content = self.$compiler().$eof_content()))) {
            
            self.$line("var $__END__ = Opal.Object.$new();");
            return self.$line("$__END__.$read = $return_val(" + (content.$inspect()) + ");");
          } else {
            return nil
          }
        });
        
        $def(self, '$version_comment', function $$version_comment() {
          
          return "/* Generated by Opal " + ($$$($$('Opal'), 'VERSION')) + " */"
        });
        return $def(self, '$add_file_source_embed', function $$add_file_source_embed() {
          var self = this, filename = nil, source = nil;

          
          filename = self.$compiler().$file();
          source = self.$compiler().$source();
          return self.$unshift("Opal.file_sources[" + (filename.$to_json()) + "] = " + (source.$to_json()) + ";\n");
        });
      })($nesting[0], $$('ScopeNode'), $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting);
});

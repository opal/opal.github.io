Opal.queue(function(Opal) {/* Generated by Opal 1.8.1 */
  var $module = Opal.module, $klass = Opal.klass, $const_set = Opal.const_set, $send = Opal.send, $defs = Opal.defs, $slice = Opal.slice, $send2 = Opal.send2, $find_super = Opal.find_super, $to_a = Opal.to_a, $truthy = Opal.truthy, $def = Opal.def, $eqeq = Opal.eqeq, $rb_plus = Opal.rb_plus, $not = Opal.not, $neqeq = Opal.neqeq, $to_ary = Opal.to_ary, $Opal = Opal.Opal, $range = Opal.range, self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$;

  Opal.add_stubs('require,handle,attr_reader,freeze,[]=,define_method,to_proc,include?,type,s,handle_special,record_method_call,compiler,meth,with_wrapper,using_eval?,compile_eval_var,using_irb?,compile_irb_var,default_compile,private,iter,[],meta,splat?,call_is_writer_that_needs_handling?,!,empty?,collect_refinements_temps,scope,==,auto_await?,push,await_encountered=,iter_has_break?,push_closure,invoke_using_refinement?,compile_using_refined_send,invoke_using_send?,compile_using_send,compile_simple_call_chain,pop_closure,helper,compile_receiver,compile_method_name,compile_arguments,compile_block_pass,compile_refinements,recv,receiver_sexp,expr,arglist,children,map,method_jsid,any?,recvr,mid_to_jsid,to_s,with_temp,intern,irb?,top?,variable_like?,eval?,scope_variables,nil?,updated,async_await,!=,match?,method,arity,each,add_special,to_sym,call,inline_operators?,fragment,resolve,new,<<,requires,file,dirname,cleanpath,join,Pathname,self,inspect,process,length,warning,autoloads,required_trees,force_encoding,encoding,+,handle_block_given_call,def?,mid,module_name,count,accepts_using?,using_refinement,first,refinements_temp,arity_check?,defines_lambda,push_nesting?,nesting,thrower,new_temp,scope_locals,source_location,size,last,csend?,handle_conditional_send,handle_writer,expr?,recv?,=~,wrap,dynamic_require_severity,handle_part,is_a?,expand_path,split,error,line,each_with_object,pop');
  
  self.$require("set");
  self.$require("pathname");
  self.$require("opal/nodes/base");
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Opal');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $parent_nesting) {
      var self = $module($base, 'Nodes');

      var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting);

      return (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'CallNode');

        var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting), $proto = self.$$prototype;

        $proto.sexp = $proto.conditional_recvr = $proto.with_writer_temp = $proto.compiler = nil;
        
        self.$handle("send", "csend");
        self.$attr_reader("recvr", "meth", "arglist", "iter");
        $const_set($nesting[0], 'SPECIALS', (new Map()));
        $const_set($nesting[0], 'OPERATORS', (new Map([["+", "plus"], ["-", "minus"], ["*", "times"], ["/", "divide"], ["<", "lt"], ["<=", "le"], [">", "gt"], [">=", "ge"]])).$freeze());
        $defs(self, '$add_special', function $$add_special(name, options) {
          var handler = $$add_special.$$p || nil, self = this;

          $$add_special.$$p = null;
          
          ;
          if (options == null) options = (new Map());
          $$('SPECIALS')['$[]='](name, options);
          return $send(self, 'define_method', ["handle_" + (name)], handler.$to_proc());
        }, -2);
        
        $def(self, '$initialize', function $$initialize($a) {
          var $post_args, $fwd_rest, $b, $c, $yield = $$initialize.$$p || nil, self = this, args = nil, rest = nil, last_arg = nil;

          $$initialize.$$p = null;
          
          $post_args = $slice(arguments);
          $fwd_rest = $post_args;
          $send2(self, $find_super(self, 'initialize', $$initialize, false, true), 'initialize', $to_a($fwd_rest), $yield);
          $b = [].concat($to_a(self.sexp)), (self.recvr = ($b[0] == null ? nil : $b[0])), (self.meth = ($b[1] == null ? nil : $b[1])), (args = $slice($b, 2)), $b;
          $b = [].concat($to_a(args)), $c = $b.length - 1, $c = ($c < 0) ? 0 : $c, (rest = $slice($b, 0, $c)), (last_arg = ($b[$c] == null ? nil : $b[$c])), $b;
          if (($truthy(last_arg) && ($truthy(["iter", "block_pass"]['$include?'](last_arg.$type()))))) {
            
            self.iter = last_arg;
            args = rest;
          } else {
            self.iter = nil
          };
          return (self.arglist = $send(self, 's', ["arglist"].concat($to_a(args))));
        }, -1);
        
        $def(self, '$compile', function $$compile() {
          var self = this;

          return $send(self, 'handle_special', [], function $$1(){var self = $$1.$$s == null ? this : $$1.$$s;

            
            self.$compiler().$record_method_call(self.$meth());
            return $send(self, 'with_wrapper', [], function $$2(){var self = $$2.$$s == null ? this : $$2.$$s;

              if ($truthy(self['$using_eval?']())) {
                return self.$compile_eval_var()
              } else if ($truthy(self['$using_irb?']())) {
                return self.$compile_irb_var()
              } else {
                return self.$default_compile()
              }}, {$$s: self});}, {$$s: self})
        });
        self.$private();
        
        $def(self, '$iter_has_break?', function $CallNode_iter_has_break$ques$3() {
          var self = this;

          
          if (!$truthy(self.$iter())) {
            return false
          };
          return self.$iter().$meta()['$[]']("has_break");
        });
        
        $def(self, '$invoke_using_send?', function $CallNode_invoke_using_send$ques$4() {
          var self = this, $ret_or_1 = nil, $ret_or_2 = nil;

          if ($truthy(($ret_or_1 = ($truthy(($ret_or_2 = self.$iter())) ? ($ret_or_2) : (self['$splat?']()))))) {
            return $ret_or_1
          } else {
            return self['$call_is_writer_that_needs_handling?']()
          }
        });
        
        $def(self, '$invoke_using_refinement?', function $CallNode_invoke_using_refinement$ques$5() {
          var self = this;

          return self.$scope().$scope().$collect_refinements_temps()['$empty?']()['$!']()
        });
        
        $def(self, '$csend?', function $CallNode_csend$ques$6() {
          var self = this;

          return self.sexp.$type()['$==']("csend")
        });
        
        $def(self, '$default_compile', function $$default_compile() {
          var self = this;

          
          if ($truthy(self['$auto_await?']())) {
            
            self.$push("(await ");
            self.$scope()['$await_encountered='](true);
          };
          if ($truthy(self['$iter_has_break?']())) {
            self.$push_closure($$$($$('Closure'), 'SEND'))
          };
          if ($truthy(self['$invoke_using_refinement?']())) {
            self.$compile_using_refined_send()
          } else if ($truthy(self['$invoke_using_send?']())) {
            self.$compile_using_send()
          } else {
            self.$compile_simple_call_chain()
          };
          if ($truthy(self['$iter_has_break?']())) {
            self.$pop_closure()
          };
          if ($truthy(self['$auto_await?']())) {
            return self.$push(")")
          } else {
            return nil
          };
        });
        
        $def(self, '$compile_using_send', function $$compile_using_send() {
          var self = this;

          
          self.$helper("send");
          self.$push("$send(");
          self.$compile_receiver();
          self.$compile_method_name();
          self.$compile_arguments();
          self.$compile_block_pass();
          return self.$push(")");
        });
        
        $def(self, '$compile_using_refined_send', function $$compile_using_refined_send() {
          var self = this;

          
          self.$helper("refined_send");
          self.$push("$refined_send(");
          self.$compile_refinements();
          self.$compile_receiver();
          self.$compile_method_name();
          self.$compile_arguments();
          self.$compile_block_pass();
          return self.$push(")");
        });
        
        $def(self, '$compile_receiver', function $$compile_receiver() {
          var self = this, $ret_or_1 = nil;

          return self.$push(($truthy(($ret_or_1 = self.conditional_recvr)) ? ($ret_or_1) : (self.$recv(self.$receiver_sexp()))))
        });
        
        $def(self, '$compile_method_name', function $$compile_method_name() {
          var self = this;

          return self.$push(", '" + (self.$meth()) + "'")
        });
        
        $def(self, '$compile_arguments', function $$compile_arguments(skip_comma) {
          var self = this;

          
          if (skip_comma == null) skip_comma = false;
          if (!$truthy(skip_comma)) {
            self.$push(", ")
          };
          if ($truthy(self.with_writer_temp)) {
            return self.$push(self.with_writer_temp)
          } else if ($truthy(self['$splat?']())) {
            return self.$push(self.$expr(self.$arglist()))
          } else if ($truthy(self.$arglist().$children()['$empty?']())) {
            return self.$push("[]")
          } else {
            return self.$push("[", self.$expr(self.$arglist()), "]")
          };
        }, -1);
        
        $def(self, '$compile_block_pass', function $$compile_block_pass() {
          var self = this;

          if ($truthy(self.$iter())) {
            return self.$push(", ", self.$expr(self.$iter()))
          } else {
            return nil
          }
        });
        
        $def(self, '$compile_refinements', function $$compile_refinements() {
          var self = this, refinements = nil;

          
          refinements = $send(self.$scope().$collect_refinements_temps(), 'map', [], function $$7(i){var self = $$7.$$s == null ? this : $$7.$$s;

            
            if (i == null) i = nil;
            return self.$s("js_tmp", i);}, {$$s: self});
          return self.$push(self.$expr($send(self, 's', ["array"].concat($to_a(refinements)))), ", ");
        });
        
        $def(self, '$compile_simple_call_chain', function $$compile_simple_call_chain() {
          var self = this;

          
          self.$compile_receiver();
          return self.$push(self.$method_jsid(), "(", self.$expr(self.$arglist()), ")");
        });
        
        $def(self, '$splat?', function $CallNode_splat$ques$8() {
          var self = this;

          return $send(self.$arglist().$children(), 'any?', [], function $$9(a){
            
            if (a == null) a = nil;
            return a.$type()['$==']("splat");})
        });
        
        $def(self, '$receiver_sexp', function $$receiver_sexp() {
          var self = this, $ret_or_1 = nil;

          if ($truthy(($ret_or_1 = self.$recvr()))) {
            return $ret_or_1
          } else {
            return self.$s("self")
          }
        });
        
        $def(self, '$method_jsid', function $$method_jsid() {
          var self = this;

          return self.$mid_to_jsid(self.$meth().$to_s())
        });
        
        $def(self, '$compile_irb_var', function $$compile_irb_var() {
          var self = this;

          return $send(self, 'with_temp', [], function $$10(tmp){var self = $$10.$$s == null ? this : $$10.$$s, lvar = nil, call = nil, ref = nil;

            
            if (tmp == null) tmp = nil;
            lvar = self.$meth();
            call = self.$s("send", self.$s("self"), self.$meth().$intern(), self.$s("arglist"));
            ref = "(typeof " + (lvar) + " !== 'undefined') ? " + (lvar) + " : ";
            return self.$push("((" + (tmp) + " = Opal.irb_vars." + (lvar) + ") == null ? ", ref, self.$expr(call), " : " + (tmp) + ")");}, {$$s: self})
        });
        
        $def(self, '$compile_eval_var', function $$compile_eval_var() {
          var self = this;

          return self.$push(self.$meth().$to_s())
        });
        
        $def(self, '$using_irb?', function $CallNode_using_irb$ques$11() {
          var self = this, $ret_or_1 = nil, $ret_or_2 = nil;

          if ($truthy(($ret_or_1 = ($truthy(($ret_or_2 = self.compiler['$irb?']())) ? (self.$scope()['$top?']()) : ($ret_or_2))))) {
            return self['$variable_like?']()
          } else {
            return $ret_or_1
          }
        });
        
        $def(self, '$using_eval?', function $CallNode_using_eval$ques$12() {
          var self = this, $ret_or_1 = nil, $ret_or_2 = nil;

          if ($truthy(($ret_or_1 = ($truthy(($ret_or_2 = self.compiler['$eval?']())) ? (self.$scope()['$top?']()) : ($ret_or_2))))) {
            return self.compiler.$scope_variables()['$include?'](self.$meth())
          } else {
            return $ret_or_1
          }
        });
        
        $def(self, '$variable_like?', function $CallNode_variable_like$ques$13() {
          var self = this, $ret_or_1 = nil, $ret_or_2 = nil;

          if ($truthy(($ret_or_1 = ($truthy(($ret_or_2 = self.$arglist()['$=='](self.$s("arglist")))) ? (self.$recvr()['$nil?']()) : ($ret_or_2))))) {
            return self.$iter()['$nil?']()
          } else {
            return $ret_or_1
          }
        });
        
        $def(self, '$sexp_with_arglist', function $$sexp_with_arglist() {
          var self = this;

          return self.sexp.$updated(nil, [self.$recvr(), self.$meth(), self.$arglist()])
        });
        
        $def(self, '$auto_await?', function $CallNode_auto_await$ques$14() {
          var self = this, awaited_set = nil, $ret_or_1 = nil, $ret_or_2 = nil;

          
          awaited_set = self.$compiler().$async_await();
          if ($truthy(($ret_or_1 = ($truthy(($ret_or_2 = awaited_set)) ? (awaited_set['$!='](true)) : ($ret_or_2))))) {
            return awaited_set['$match?'](self.$meth().$to_s())
          } else {
            return $ret_or_1
          };
        });
        
        $def(self, '$handle_special', function $$handle_special() {
          var compile_default = $$handle_special.$$p || nil, self = this, method = nil;

          $$handle_special.$$p = null;
          
          ;
          if ($truthy($$('SPECIALS')['$include?'](self.$meth()))) {
            
            method = self.$method("handle_" + (self.$meth()));
            if ($eqeq(method.$arity(), 1)) {
              return method['$[]'](compile_default)
            } else {
              return method['$[]']()
            };
          } else {
            return Opal.yieldX(compile_default, []);
          };
        });
        $send($$('OPERATORS'), 'each', [], function $CallNode$15(operator, name){var self = $CallNode$15.$$s == null ? this : $CallNode$15.$$s;

          
          if (operator == null) operator = nil;
          if (name == null) name = nil;
          return $send(self, 'add_special', [operator.$to_sym()], function $$16(compile_default){var $a, self = $$16.$$s == null ? this : $$16.$$s, lhs = nil, rhs = nil;

            
            if (compile_default == null) compile_default = nil;
            if ($truthy(self['$invoke_using_refinement?']())) {
              return compile_default.$call()
            } else if ($truthy(self.$compiler()['$inline_operators?']())) {
              
              self.$compiler().$record_method_call(operator);
              self.$helper("rb_" + (name));
              $a = [self.$expr(self.$recvr()), self.$expr(self.$arglist())], (lhs = $a[0]), (rhs = $a[1]), $a;
              self.$push(self.$fragment("$rb_" + (name) + "("));
              self.$push(lhs);
              self.$push(self.$fragment(", "));
              self.$push(rhs);
              return self.$push(self.$fragment(")"));
            } else {
              return compile_default.$call()
            };}, {$$s: self});}, {$$s: self});
        $send(self, 'add_special', ["require"], function $CallNode$17(compile_default){var self = $CallNode$17.$$s == null ? this : $CallNode$17.$$s, str = nil;

          
          if (compile_default == null) compile_default = nil;
          str = $$('DependencyResolver').$new(self.$compiler(), self.$arglist().$children()['$[]'](0)).$resolve();
          if (!$truthy(str['$nil?']())) {
            self.$compiler().$requires()['$<<'](str)
          };
          return compile_default.$call();}, {$$s: self});
        $send(self, 'add_special', ["require_relative"], function $CallNode$18(){var self = $CallNode$18.$$s == null ? this : $CallNode$18.$$s, arg = nil, file = nil, dir = nil;

          
          arg = self.$arglist().$children()['$[]'](0);
          file = self.$compiler().$file();
          if ($eqeq(arg.$type(), "str")) {
            
            dir = $$('File').$dirname(file);
            self.$compiler().$requires()['$<<'](self.$Pathname(dir).$join(arg.$children()['$[]'](0)).$cleanpath().$to_s());
          };
          self.$push(self.$fragment("" + (self.$scope().$self()) + ".$require(" + (file.$inspect()) + "+ '/../' + "));
          self.$push(self.$process(self.$arglist()));
          return self.$push(self.$fragment(")"));}, {$$s: self});
        $send(self, 'add_special', ["autoload"], function $CallNode$19(compile_default){var self = $CallNode$19.$$s == null ? this : $CallNode$19.$$s, args = nil, str = nil;

          
          if (compile_default == null) compile_default = nil;
          args = self.$arglist().$children();
          if (($eqeq(args.$length(), 2) && ($eqeq(args['$[]'](0).$type(), "sym")))) {
            
            str = $$('DependencyResolver').$new(self.$compiler(), args['$[]'](1), "ignore").$resolve();
            if ($truthy(str['$nil?']())) {
              self.$compiler().$warning("File for autoload of constant '" + (args['$[]'](0).$children()['$[]'](0)) + "' could not be bundled!")
            } else {
              
              self.$compiler().$requires()['$<<'](str);
              self.$compiler().$autoloads()['$<<'](str);
            };
          };
          return compile_default.$call();}, {$$s: self});
        $send(self, 'add_special', ["require_tree"], function $CallNode$20(compile_default){var $a, self = $CallNode$20.$$s == null ? this : $CallNode$20.$$s, first_arg = nil, rest = nil, relative_path = nil, dir = nil, full_path = nil;

          
          if (compile_default == null) compile_default = nil;
          $a = [].concat($to_a(self.$arglist().$children())), (first_arg = ($a[0] == null ? nil : $a[0])), (rest = $slice($a, 1)), $a;
          if ($eqeq(first_arg.$type(), "str")) {
            
            relative_path = first_arg.$children()['$[]'](0);
            self.$compiler().$required_trees()['$<<'](relative_path);
            dir = $$('File').$dirname(self.$compiler().$file());
            full_path = self.$Pathname(dir).$join(relative_path).$cleanpath().$to_s();
            full_path.$force_encoding(relative_path.$encoding());
            first_arg = first_arg.$updated(nil, [full_path]);
          };
          self.arglist = self.$arglist().$updated(nil, $rb_plus([first_arg], rest));
          return compile_default.$call();}, {$$s: self});
        $send(self, 'add_special', ["block_given?"], function $CallNode$21(){var self = $CallNode$21.$$s == null ? this : $CallNode$21.$$s;
          if (self.sexp == null) self.sexp = nil;

          return self.$push(self.$compiler().$handle_block_given_call(self.sexp))}, {$$s: self});
        $send(self, 'add_special', ["__callee__"], function $CallNode$22(){var self = $CallNode$22.$$s == null ? this : $CallNode$22.$$s;

          if ($truthy(self.$scope()['$def?']())) {
            return self.$push(self.$fragment(self.$scope().$mid().$to_s().$inspect()))
          } else {
            return self.$push(self.$fragment("nil"))
          }}, {$$s: self});
        $send(self, 'add_special', ["__method__"], function $CallNode$23(){var self = $CallNode$23.$$s == null ? this : $CallNode$23.$$s;

          if ($truthy(self.$scope()['$def?']())) {
            return self.$push(self.$fragment(self.$scope().$mid().$to_s().$inspect()))
          } else {
            return self.$push(self.$fragment("nil"))
          }}, {$$s: self});
        $send(self, 'add_special', ["__dir__"], function $CallNode$24(){var self = $CallNode$24.$$s == null ? this : $CallNode$24.$$s;

          return self.$push($$('File').$dirname($$$($$('Opal'), 'Compiler').$module_name(self.$compiler().$file())).$inspect())}, {$$s: self});
        $send(self, 'add_special', ["using"], function $CallNode$25(compile_default){var self = $CallNode$25.$$s == null ? this : $CallNode$25.$$s;

          
          if (compile_default == null) compile_default = nil;
          if (($truthy(self.$scope()['$accepts_using?']()) && ($eqeq(self.$arglist().$children().$count(), 1)))) {
            return self.$using_refinement(self.$arglist().$children().$first())
          } else {
            return compile_default.$call()
          };}, {$$s: self});
        
        $def(self, '$using_refinement', function $$using_refinement(arg) {
          var $a, self = this, prev = nil, curr = nil;

          
          $a = [].concat($to_a(self.$scope().$refinements_temp())), (prev = ($a[0] == null ? nil : $a[0])), (curr = ($a[1] == null ? nil : $a[1])), $a;
          if ($truthy(prev)) {
            return self.$push("(" + (curr) + " = " + (prev) + ".slice(), " + (curr) + ".push(", self.$expr(arg), "), " + (self.$scope().$self()) + ")")
          } else {
            return self.$push("(" + (curr) + " = [", self.$expr(arg), "], " + (self.$scope().$self()) + ")")
          };
        });
        $send(self, 'add_special', ["debugger"], function $CallNode$26(){var self = $CallNode$26.$$s == null ? this : $CallNode$26.$$s;

          return self.$push(self.$fragment("debugger"))}, {$$s: self});
        $send(self, 'add_special', ["__OPAL_COMPILER_CONFIG__"], function $CallNode$27(){var self = $CallNode$27.$$s == null ? this : $CallNode$27.$$s;

          return self.$push(self.$fragment("(new Map([['arity_check', " + (self.$compiler()['$arity_check?']()) + "]]))"))}, {$$s: self});
        $send(self, 'add_special', ["lambda"], function $CallNode$28(compile_default){var self = $CallNode$28.$$s == null ? this : $CallNode$28.$$s;

          
          if (compile_default == null) compile_default = nil;
          return $send(self.$scope(), 'defines_lambda', [], function $$29(){
            return compile_default.$call()});}, {$$s: self});
        $send(self, 'add_special', ["nesting"], function $CallNode$30(compile_default){var self = $CallNode$30.$$s == null ? this : $CallNode$30.$$s, push_nesting = nil;

          
          if (compile_default == null) compile_default = nil;
          push_nesting = self['$push_nesting?']();
          if ($truthy(push_nesting)) {
            self.$push("(Opal.Module.$$nesting = " + (self.$scope().$nesting()) + ", ")
          };
          compile_default.$call();
          if ($truthy(push_nesting)) {
            return self.$push(")")
          } else {
            return nil
          };}, {$$s: self});
        $send(self, 'add_special', ["constants"], function $CallNode$31(compile_default){var self = $CallNode$31.$$s == null ? this : $CallNode$31.$$s, push_nesting = nil;

          
          if (compile_default == null) compile_default = nil;
          push_nesting = self['$push_nesting?']();
          if ($truthy(push_nesting)) {
            self.$push("(Opal.Module.$$nesting = " + (self.$scope().$nesting()) + ", ")
          };
          compile_default.$call();
          if ($truthy(push_nesting)) {
            return self.$push(")")
          } else {
            return nil
          };}, {$$s: self});
        $send(self, 'add_special', ["eval"], function $CallNode$32(compile_default){var self = $CallNode$32.$$s == null ? this : $CallNode$32.$$s, temp = nil, scope_variables = nil;

          
          if (compile_default == null) compile_default = nil;
          self.$thrower("eval_return");
          if (($neqeq(self.$arglist().$children().$length(), 1) || ($not([self.$s("self"), nil]['$include?'](self.$recvr()))))) {
            return compile_default.$call()
          };
          self.$scope().$nesting();
          temp = self.$scope().$new_temp();
          scope_variables = $send(self.$scope().$scope_locals(), 'map', [], "to_s".$to_proc()).$inspect();
          self.$push("(" + (temp) + " = ", self.$expr(self.$arglist()));
          self.$push(", typeof Opal.compile === 'function' ? eval(Opal.compile(" + (temp));
          self.$push(", {scope_variables: ", scope_variables);
          self.$push(", arity_check: " + (self.$compiler()['$arity_check?']()) + ", file: '(eval)', eval: true})) : ");
          return self.$push("" + (self.$scope().$self()) + ".$eval(" + (temp) + "))");}, {$$s: self});
        $send(self, 'add_special', ["local_variables"], function $CallNode$33(compile_default){var self = $CallNode$33.$$s == null ? this : $CallNode$33.$$s, scope_variables = nil;

          
          if (compile_default == null) compile_default = nil;
          if (!$truthy([self.$s("self"), nil]['$include?'](self.$recvr()))) {
            return compile_default.$call()
          };
          scope_variables = $send(self.$scope().$scope_locals(), 'map', [], "to_s".$to_proc()).$inspect();
          return self.$push(scope_variables);}, {$$s: self});
        $send(self, 'add_special', ["binding"], function $CallNode$34(compile_default){var self = $CallNode$34.$$s == null ? this : $CallNode$34.$$s;

          
          if (compile_default == null) compile_default = nil;
          if (!$truthy(self.$recvr()['$nil?']())) {
            return compile_default.$call()
          };
          self.$scope().$nesting();
          self.$push("Opal.Binding.$new(");
          self.$push("  function($code) {");
          self.$push("    return eval($code);");
          self.$push("  },");
          self.$push("  ", $send(self.$scope().$scope_locals(), 'map', [], "to_s".$to_proc()).$inspect(), ",");
          self.$push("  ", self.$scope().$self(), ",");
          self.$push("  ", self.$source_location());
          return self.$push(")");}, {$$s: self});
        $send(self, 'add_special', ["__await__"], function $CallNode$35(compile_default){var $a, self = $CallNode$35.$$s == null ? this : $CallNode$35.$$s;

          
          if (compile_default == null) compile_default = nil;
          if ($truthy(self.$compiler().$async_await())) {
            
            self.$push(self.$fragment("(await ("));
            self.$push(self.$process(self.$recvr()));
            self.$push(self.$fragment("))"));
            return ($a = [true], $send(self.$scope(), 'await_encountered=', $a), $a[$a.length - 1]);
          } else {
            return compile_default.$call()
          };}, {$$s: self});
        
        $def(self, '$push_nesting?', function $CallNode_push_nesting$ques$36() {
          var self = this, recv = nil, $ret_or_1 = nil, $ret_or_2 = nil, $ret_or_3 = nil;

          
          recv = self.$children().$first();
          if ($truthy(($ret_or_1 = self.$children().$size()['$=='](2)))) {
            
            if ($truthy(($ret_or_2 = recv['$nil?']()))) {
              return $ret_or_2
            } else {
              
              if ($truthy(($ret_or_3 = recv.$type()['$==']("const")))) {
                return recv.$children().$last()['$==']("Module")
              } else {
                return $ret_or_3
              };
            };
          } else {
            return $ret_or_1
          };
        });
        
        $def(self, '$with_wrapper', function $$with_wrapper() {
          var block = $$with_wrapper.$$p || nil, self = this;

          $$with_wrapper.$$p = null;
          
          ;
          if (($truthy(self['$csend?']()) && ($not(self.conditional_recvr)))) {
            return $send(self, 'handle_conditional_send', [], function $$37(){var self = $$37.$$s == null ? this : $$37.$$s;

              return $send(self, 'with_wrapper', [], block.$to_proc())}, {$$s: self})
          } else if ($truthy(self['$call_is_writer_that_needs_handling?']())) {
            return $send(self, 'handle_writer', [], block.$to_proc())
          } else {
            return Opal.yieldX(block, []);
          };
        });
        
        $def(self, '$call_is_writer_that_needs_handling?', function $CallNode_call_is_writer_that_needs_handling$ques$38() {
          var self = this, $ret_or_1 = nil, $ret_or_2 = nil;

          if ($truthy(($ret_or_1 = ($truthy(($ret_or_2 = self['$expr?']())) ? ($ret_or_2) : (self['$recv?']()))))) {
            
            if ($truthy(($ret_or_2 = self.$meth().$to_s()['$=~'](/^\w+=$/)))) {
              return $ret_or_2
            } else {
              return self.$meth()['$==']("[]=")
            };
          } else {
            return $ret_or_1
          }
        });
        
        $def(self, '$handle_conditional_send', function $$handle_conditional_send() {
          var $yield = $$handle_conditional_send.$$p || nil, self = this, receiver_temp = nil;

          $$handle_conditional_send.$$p = null;
          
          receiver_temp = self.$scope().$new_temp();
          self.$push("" + (receiver_temp) + " = ", self.$expr(self.$receiver_sexp()));
          self.$push(", (" + (receiver_temp) + " === nil || " + (receiver_temp) + " == null) ? nil : ");
          self.conditional_recvr = receiver_temp;
          Opal.yieldX($yield, []);
          return self.$wrap("(", ")");
        });
        
        $def(self, '$handle_writer', function $$handle_writer() {
          var $yield = $$handle_writer.$$p || nil, self = this;

          $$handle_writer.$$p = null;
          return $send(self, 'with_temp', [], function $$39(temp){var self = $$39.$$s == null ? this : $$39.$$s;

            
            if (temp == null) temp = nil;
            self.$push("(" + (temp) + " = ");
            self.$compile_arguments(true);
            self.$push(", ");
            self.with_writer_temp = temp;
            Opal.yieldX($yield, []);
            self.with_writer_temp = false;
            self.$push(", ");
            return self.$push("" + (temp) + "[" + (temp) + ".length - 1])");}, {$$s: self})
        });
        return (function($base, $super, $parent_nesting) {
          var self = $klass($base, $super, 'DependencyResolver');

          var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting), $proto = self.$$prototype;

          $proto.compiler = $proto.sexp = $proto.missing_dynamic_require = nil;
          
          
          $def(self, '$initialize', function $$initialize(compiler, sexp, missing_dynamic_require) {
            var self = this, $ret_or_1 = nil;

            
            if (missing_dynamic_require == null) missing_dynamic_require = nil;
            self.compiler = compiler;
            self.sexp = sexp;
            return (self.missing_dynamic_require = ($truthy(($ret_or_1 = missing_dynamic_require)) ? ($ret_or_1) : (self.compiler.$dynamic_require_severity())));
          }, -3);
          
          $def(self, '$resolve', function $$resolve() {
            var self = this;

            return self.$handle_part(self.sexp)
          });
          
          $def(self, '$handle_part', function $$handle_part(sexp, missing_dynamic_require) {
            var $a, $b, self = this, recv = nil, meth = nil, args = nil, parts = nil;

            
            if (missing_dynamic_require == null) missing_dynamic_require = self.missing_dynamic_require;
            if ($truthy(sexp)) {
              
              switch (sexp.$type().valueOf()) {
                case "str":
                  return sexp.$children()['$[]'](0)
                case "dstr":
                  return $send(sexp.$children(), 'map', [], function $$40(i){var self = $$40.$$s == null ? this : $$40.$$s;

                    
                    if (i == null) i = nil;
                    return self.$handle_part(i);}, {$$s: self}).$join()
                case "begin":
                  if ($eqeq(sexp.$children().$length(), 1)) {
                    return self.$handle_part(sexp.$children()['$[]'](0))
                  }
                  break;
                case "send":
                  
                  $b = sexp.$children(), $a = $to_ary($b), (recv = ($a[0] == null ? nil : $a[0])), (meth = ($a[1] == null ? nil : $a[1])), (args = $slice($a, 2)), $b;
                  parts = $send(args, 'map', [], function $$41(s){var self = $$41.$$s == null ? this : $$41.$$s;

                    
                    if (s == null) s = nil;
                    return self.$handle_part(s, "ignore");}, {$$s: self});
                  if ($truthy(parts['$include?'](nil))) {
                    return nil
                  };
                  if ((($truthy(recv['$is_a?']($$$($$$($Opal, 'AST'), 'Node'))) && ($eqeq(recv.$type(), "const"))) && ($eqeq(recv.$children().$last(), "File")))) {
                    if ($eqeq(meth, "expand_path")) {
                      return $send(self, 'expand_path', $to_a(parts))
                    } else if ($eqeq(meth, "join")) {
                      return self.$expand_path(parts.$join("/"))
                    } else if ($eqeq(meth, "dirname")) {
                      return self.$expand_path(parts['$[]'](0).$split("/")['$[]']($range(0, -1, true)).$join("/"))
                    }
                  } else if ($eqeq(meth, "__dir__")) {
                    return $$('File').$dirname($$$($$('Opal'), 'Compiler').$module_name(self.compiler.$file()))
                  };
                  break;
                default:
                  nil
              }
            };
            
            switch (missing_dynamic_require.valueOf()) {
              case "error":
                return self.compiler.$error("Cannot handle dynamic require", self.sexp.$line())
              case "warning":
                return self.compiler.$warning("Cannot handle dynamic require", self.sexp.$line())
              default:
                return nil
            };
          }, -2);
          return $def(self, '$expand_path', function $$expand_path(path, base) {
            
            
            if (base == null) base = "";
            return $send(((("" + (base)) + "/") + (path)).$split("/"), 'each_with_object', [[]], function $$42(part, p){
              
              if (part == null) part = nil;
              if (p == null) p = nil;
              if ($eqeq(part, "")) {
                return nil
              } else if ($eqeq(part, "..")) {
                return p.$pop()
              } else {
                return p['$<<'](part)
              };}).$join("/");
          }, -2);
        })($nesting[0], null, $nesting);
      })($nesting[0], $$('Base'), $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting);
});

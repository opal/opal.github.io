Opal.queue(function(Opal) {/* Generated by Opal 1.8.2 */
  var $module = Opal.module, $klass = Opal.klass, $send = Opal.send, $neqeq = Opal.neqeq, $def = Opal.def, self = Opal.top, $nesting = [], nil = Opal.nil;

  Opal.add_stubs('require,handle,each_with_index,children,!=,push,process');
  
  self.$require("opal/nodes/base");
  self.$require("opal/nodes/args/arg");
  self.$require("opal/nodes/args/arity_check");
  self.$require("opal/nodes/args/ensure_kwargs_are_kwargs");
  self.$require("opal/nodes/args/extract_block_arg");
  self.$require("opal/nodes/args/extract_kwarg");
  self.$require("opal/nodes/args/extract_kwargs");
  self.$require("opal/nodes/args/extract_kwoptarg");
  self.$require("opal/nodes/args/extract_kwrestarg");
  self.$require("opal/nodes/args/extract_optarg");
  self.$require("opal/nodes/args/extract_post_arg");
  self.$require("opal/nodes/args/extract_post_optarg");
  self.$require("opal/nodes/args/extract_restarg");
  self.$require("opal/nodes/args/fake_arg");
  self.$require("opal/nodes/args/initialize_iterarg");
  self.$require("opal/nodes/args/initialize_shadowarg");
  self.$require("opal/nodes/args/parameters");
  self.$require("opal/nodes/args/prepare_post_args");
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Opal');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $parent_nesting) {
      var self = $module($base, 'Nodes');

      var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting);

      return (function($base, $super) {
        var self = $klass($base, $super, 'ArgsNode');

        
        
        self.$handle("args");
        return $def(self, '$compile', function $$compile() {
          var self = this;

          return $send(self.$children(), 'each_with_index', [], function $$1(arg, idx){var self = $$1.$$s == null ? this : $$1.$$s;

            
            if (arg == null) arg = nil;
            if (idx == null) idx = nil;
            if ($neqeq(idx, 0)) {
              self.$push(", ")
            };
            return self.$push(self.$process(arg));}, {$$s: self})
        });
      })($nesting[0], $$('Base'))
    })($nesting[0], $nesting)
  })($nesting[0], $nesting);
});

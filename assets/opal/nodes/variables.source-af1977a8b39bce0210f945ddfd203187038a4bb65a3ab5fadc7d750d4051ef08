Opal.queue(function(Opal) {/* Generated by Opal 1.8.2 */
  var $module = Opal.module, $klass = Opal.klass, $truthy = Opal.truthy, $def = Opal.def, $send = Opal.send, $range = Opal.range, $send2 = Opal.send2, $find_super = Opal.find_super, self = Opal.top, $nesting = [], nil = Opal.nil;

  Opal.add_stubs('require,handle,children,irb?,compiler,top?,scope,using_irb?,push,to_s,var_name,with_temp,property,wrap,add_local,expr,value,expr?,recv?,[],name,add_ivar,self,helper,add_gvar,handle_global_match,handle_post_match,handle_pre_match,raise,index,stmt?,class_variable_owner,inspect');
  
  self.$require("opal/nodes/base");
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Opal');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $parent_nesting) {
      var self = $module($base, 'Nodes');

      var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting);

      
      (function($base, $super) {
        var self = $klass($base, $super, 'LocalVariableNode');

        
        
        self.$handle("lvar");
        self.$children("var_name");
        
        $def(self, '$using_irb?', function $LocalVariableNode_using_irb$ques$1() {
          var self = this, $ret_or_1 = nil;

          if ($truthy(($ret_or_1 = self.$compiler()['$irb?']()))) {
            return self.$scope()['$top?']()
          } else {
            return $ret_or_1
          }
        });
        return $def(self, '$compile', function $$compile() {
          var self = this;

          
          if (!$truthy(self['$using_irb?']())) {
            return self.$push(self.$var_name().$to_s())
          };
          return $send(self, 'with_temp', [], function $$2(tmp){var self = $$2.$$s == null ? this : $$2.$$s;

            
            if (tmp == null) tmp = nil;
            self.$push(self.$property(self.$var_name().$to_s()));
            return self.$wrap("((" + (tmp) + " = Opal.irb_vars", ") == null ? nil : " + (tmp) + ")");}, {$$s: self});
        });
      })($nesting[0], $$('Base'));
      (function($base, $super) {
        var self = $klass($base, $super, 'LocalAssignNode');

        
        
        self.$handle("lvasgn");
        self.$children("var_name", "value");
        
        $def(self, '$using_irb?', function $LocalAssignNode_using_irb$ques$3() {
          var self = this, $ret_or_1 = nil;

          if ($truthy(($ret_or_1 = self.$compiler()['$irb?']()))) {
            return self.$scope()['$top?']()
          } else {
            return $ret_or_1
          }
        });
        return $def(self, '$compile', function $$compile() {
          var self = this;

          
          if ($truthy(self['$using_irb?']())) {
            self.$push("Opal.irb_vars" + (self.$property(self.$var_name().$to_s())) + " = ")
          } else {
            
            self.$add_local(self.$var_name().$to_s());
            self.$push("" + (self.$var_name()) + " = ");
          };
          self.$push(self.$expr(self.$value()));
          if ((($truthy(self['$recv?']()) || ($truthy(self['$expr?']()))) && ($truthy(self.$value())))) {
            return self.$wrap("(", ")")
          } else {
            return nil
          };
        });
      })($nesting[0], $$('Base'));
      (function($base, $super) {
        var self = $klass($base, $super, 'LocalDeclareNode');

        
        
        self.$handle("lvdeclare");
        self.$children("var_name");
        return $def(self, '$compile', function $$compile() {
          var self = this;

          
          self.$add_local(self.$var_name().$to_s());
          return nil;
        });
      })($nesting[0], $$('Base'));
      (function($base, $super) {
        var self = $klass($base, $super, 'InstanceVariableNode');

        
        
        self.$handle("ivar");
        self.$children("name");
        
        $def(self, '$var_name', function $$var_name() {
          var self = this;

          return self.$name().$to_s()['$[]']($range(1, -1, false))
        });
        return $def(self, '$compile', function $$compile() {
          var self = this, name = nil;

          
          name = self.$property(self.$var_name());
          self.$add_ivar(name);
          return self.$push("" + (self.$scope().$self()) + (name));
        });
      })($nesting[0], $$('Base'));
      (function($base, $super) {
        var self = $klass($base, $super, 'InstanceAssignNode');

        
        
        self.$handle("ivasgn");
        self.$children("name", "value");
        
        $def(self, '$var_name', function $$var_name() {
          var self = this;

          return self.$name().$to_s()['$[]']($range(1, -1, false))
        });
        return $def(self, '$compile', function $$compile() {
          var self = this, name = nil;

          
          name = self.$property(self.$var_name());
          self.$push("" + (self.$scope().$self()) + (name) + " = ");
          self.$push(self.$expr(self.$value()));
          if ((($truthy(self['$recv?']()) || ($truthy(self['$expr?']()))) && ($truthy(self.$value())))) {
            return self.$wrap("(", ")")
          } else {
            return nil
          };
        });
      })($nesting[0], $$('Base'));
      (function($base, $super) {
        var self = $klass($base, $super, 'GlobalVariableNode');

        
        
        self.$handle("gvar");
        self.$children("name");
        
        $def(self, '$var_name', function $$var_name() {
          var self = this;

          return self.$name().$to_s()['$[]']($range(1, -1, false))
        });
        return $def(self, '$compile', function $$compile() {
          var self = this, name = nil;

          
          self.$helper("gvars");
          name = self.$property(self.$var_name());
          self.$add_gvar(name);
          return self.$push("$gvars" + (name));
        });
      })($nesting[0], $$('Base'));
      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'BackRefNode');

        var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting);

        
        self.$handle("back_ref");
        
        $def(self, '$compile', function $$compile() {
          var $yield = $$compile.$$p || nil, self = this;

          $$compile.$$p = null;
          
          self.$helper("gvars");
          
          switch (self.$var_name().valueOf()) {
            case "&":
              return self.$handle_global_match()
            case "'":
              return self.$handle_post_match()
            case "`":
              return self.$handle_pre_match()
            case "+":
              return $send2(self, $find_super(self, 'compile', $$compile, false, true), 'compile', [], $yield)
            default:
              return self.$raise($$('NotImplementedError'))
          };
        });
        
        $def(self, '$handle_global_match', function $$handle_global_match() {
          var self = this;

          return $send(self, 'with_temp', [], function $$4(tmp){var self = $$4.$$s == null ? this : $$4.$$s;

            
            if (tmp == null) tmp = nil;
            return self.$push("((" + (tmp) + " = $gvars['~']) === nil ? nil : " + (tmp) + "['$[]'](0))");}, {$$s: self})
        });
        
        $def(self, '$handle_pre_match', function $$handle_pre_match() {
          var self = this;

          return $send(self, 'with_temp', [], function $$5(tmp){var self = $$5.$$s == null ? this : $$5.$$s;

            
            if (tmp == null) tmp = nil;
            return self.$push("((" + (tmp) + " = $gvars['~']) === nil ? nil : " + (tmp) + ".$pre_match())");}, {$$s: self})
        });
        return $def(self, '$handle_post_match', function $$handle_post_match() {
          var self = this;

          return $send(self, 'with_temp', [], function $$6(tmp){var self = $$6.$$s == null ? this : $$6.$$s;

            
            if (tmp == null) tmp = nil;
            return self.$push("((" + (tmp) + " = $gvars['~']) === nil ? nil : " + (tmp) + ".$post_match())");}, {$$s: self})
        });
      })($nesting[0], $$('GlobalVariableNode'), $nesting);
      (function($base, $super) {
        var self = $klass($base, $super, 'GlobalAssignNode');

        
        
        self.$handle("gvasgn");
        self.$children("name", "value");
        
        $def(self, '$var_name', function $$var_name() {
          var self = this;

          return self.$name().$to_s()['$[]']($range(1, -1, false))
        });
        return $def(self, '$compile', function $$compile() {
          var self = this, name = nil;

          
          self.$helper("gvars");
          name = self.$property(self.$var_name());
          self.$push("$gvars" + (name) + " = ");
          self.$push(self.$expr(self.$value()));
          if ((($truthy(self['$recv?']()) || ($truthy(self['$expr?']()))) && ($truthy(self.$value())))) {
            return self.$wrap("(", ")")
          } else {
            return nil
          };
        });
      })($nesting[0], $$('Base'));
      (function($base, $super) {
        var self = $klass($base, $super, 'NthrefNode');

        
        
        self.$handle("nth_ref");
        self.$children("index");
        return $def(self, '$compile', function $$compile() {
          var self = this;

          
          self.$helper("gvars");
          return $send(self, 'with_temp', [], function $$7(tmp){var self = $$7.$$s == null ? this : $$7.$$s;

            
            if (tmp == null) tmp = nil;
            return self.$push("((" + (tmp) + " = $gvars['~']) === nil ? nil : " + (tmp) + "['$[]'](" + (self.$index()) + "))");}, {$$s: self});
        });
      })($nesting[0], $$('Base'));
      (function($base, $super) {
        var self = $klass($base, $super, 'ClassVariableNode');

        
        
        self.$handle("cvar");
        self.$children("name");
        return $def(self, '$compile', function $$compile() {
          var self = this, tolerant = nil;

          
          self.$helper("class_variable_get");
          tolerant = false;
          if ($truthy(self['$stmt?']())) {
            tolerant = true
          };
          return self.$push("$class_variable_get(" + (self.$class_variable_owner()) + ", '" + (self.$name()) + "', " + (tolerant.$inspect()) + ")");
        });
      })($nesting[0], $$('Base'));
      return (function($base, $super) {
        var self = $klass($base, $super, 'ClassVarAssignNode');

        
        
        self.$handle("cvasgn");
        self.$children("name", "value");
        return $def(self, '$compile', function $$compile() {
          var self = this;

          
          self.$helper("class_variable_set");
          return self.$push("$class_variable_set(" + (self.$class_variable_owner()) + ", '" + (self.$name()) + "', ", self.$expr(self.$value()), ")");
        });
      })($nesting[0], $$('Base'));
    })($nesting[0], $nesting)
  })($nesting[0], $nesting);
});

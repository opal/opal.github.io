Opal.queue(function(Opal) {/* Generated by Opal 1.8.1 */
  var $module = Opal.module, $klass = Opal.klass, $truthy = Opal.truthy, $send = Opal.send, $def = Opal.def, $range = Opal.range, $neqeq = Opal.neqeq, $eqeq = Opal.eqeq, $to_a = Opal.to_a, self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$;

  Opal.add_stubs('require,handle,children,wrap_in_closure?,push_closure,push,in_ensure,line,stmt,body_sexp,indent,has_rescue_else?,unshift,rescue_else_code,process,compiler,ensr_sexp,pop_closure,await_encountered,scope,wrap,returns,begn,ensr,s,recv?,expr?,rescue_else_sexp,stmt?,[],meta,rescue_else_sexp=,detect,!=,type,handle_rescue_else_manually?,|,has_retry?,in_rescue,body_code,each_with_index,==,body,nil?,!,in_ensure?,expr,klasses,lvar,updated,in_resbody,rescue_body,klasses_sexp');
  
  self.$require("opal/nodes/base");
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Opal');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $parent_nesting) {
      var self = $module($base, 'Nodes');

      var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting);

      
      (function($base, $super) {
        var self = $klass($base, $super, 'EnsureNode');

        var $proto = self.$$prototype;

        $proto.sexp = nil;
        
        self.$handle("ensure");
        self.$children("begn", "ensr");
        
        $def(self, '$compile', function $$compile() {
          var self = this;

          
          if ($truthy(self['$wrap_in_closure?']())) {
            self.$push_closure()
          };
          self.$push("try {");
          $send(self, 'in_ensure', [], function $$1(){var self = $$1.$$s == null ? this : $$1.$$s;

            return self.$line(self.$stmt(self.$body_sexp()))}, {$$s: self});
          self.$line("} finally {");
          $send(self, 'indent', [], function $$2(){var self = $$2.$$s == null ? this : $$2.$$s;
            if (self.level == null) self.level = nil;

            if ($truthy(self['$has_rescue_else?']())) {
              
              self.$unshift("var $no_errors = true; ");
              self.$line("var $rescue_else_result;");
              self.$line("if ($no_errors) { ");
              $send(self, 'indent', [], function $$3(){var self = $$3.$$s == null ? this : $$3.$$s;

                
                self.$line("$rescue_else_result = (function() {");
                $send(self, 'indent', [], function $$4(){var self = $$4.$$s == null ? this : $$4.$$s;

                  return self.$line(self.$stmt(self.$rescue_else_code()))}, {$$s: self});
                return self.$line("})();");}, {$$s: self});
              self.$line("}");
              self.$line(self.$compiler().$process(self.$ensr_sexp(), self.level));
              return self.$line("if ($no_errors) { return $rescue_else_result; }");
            } else {
              return self.$line(self.$compiler().$process(self.$ensr_sexp(), self.level))
            }}, {$$s: self});
          self.$line("}");
          if ($truthy(self['$wrap_in_closure?']())) {
            self.$pop_closure()
          };
          if ($truthy(self['$wrap_in_closure?']())) {
            if ($truthy(self.$scope().$await_encountered())) {
              return self.$wrap("(await (async function() { ", "; })())")
            } else {
              return self.$wrap("(function() { ", "; })()")
            }
          } else {
            return nil
          };
        });
        
        $def(self, '$body_sexp', function $$body_sexp() {
          var self = this;

          if ($truthy(self['$wrap_in_closure?']())) {
            return self.$compiler().$returns(self.$begn())
          } else {
            return self.$begn()
          }
        });
        
        $def(self, '$ensr_sexp', function $$ensr_sexp() {
          var self = this, $ret_or_1 = nil;

          if ($truthy(($ret_or_1 = self.$ensr()))) {
            return $ret_or_1
          } else {
            return self.$s("nil")
          }
        });
        
        $def(self, '$wrap_in_closure?', function $EnsureNode_wrap_in_closure$ques$5() {
          var self = this, $ret_or_1 = nil, $ret_or_2 = nil;

          if ($truthy(($ret_or_1 = ($truthy(($ret_or_2 = self['$recv?']())) ? ($ret_or_2) : (self['$expr?']()))))) {
            return $ret_or_1
          } else {
            return self['$has_rescue_else?']()
          }
        });
        
        $def(self, '$rescue_else_code', function $$rescue_else_code() {
          var self = this, rescue_else_code = nil;

          
          rescue_else_code = self.$scope().$rescue_else_sexp();
          if (!$truthy(self['$stmt?']())) {
            rescue_else_code = self.$compiler().$returns(rescue_else_code)
          };
          return rescue_else_code;
        });
        return $def(self, '$has_rescue_else?', function $EnsureNode_has_rescue_else$ques$6() {
          var self = this;

          return self.sexp.$meta()['$[]']("has_rescue_else")
        });
      })($nesting[0], $$('Base'));
      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'RescueNode');

        var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting), $proto = self.$$prototype;

        $proto.sexp = nil;
        
        self.$handle("rescue");
        self.$children("body");
        
        $def(self, '$compile', function $$compile() {
          var self = this, _has_rescue_handlers = nil, closure_type = nil;

          
          self.$scope()['$rescue_else_sexp=']($send(self.$children()['$[]']($range(1, -1, false)), 'detect', [], function $$7(sexp){var $ret_or_1 = nil;

            
            if (sexp == null) sexp = nil;
            if ($truthy(($ret_or_1 = sexp))) {
              return sexp.$type()['$!=']("resbody")
            } else {
              return $ret_or_1
            };}));
          _has_rescue_handlers = false;
          if ($truthy(self['$handle_rescue_else_manually?']())) {
            self.$line("var $no_errors = true;")
          };
          closure_type = $$$($$('Closure'), 'NONE');
          if (($truthy(self['$expr?']()) || ($truthy(self['$recv?']())))) {
            closure_type = closure_type['$|']($$$($$('Closure'), 'JS_FUNCTION'))
          };
          if ($truthy(self['$has_retry?']())) {
            closure_type = closure_type['$|']($$$($$('Closure'), 'JS_LOOP')['$|']($$$($$('Closure'), 'JS_LOOP_INSIDE'))['$|']($$$($$('Closure'), 'RESCUE_RETRIER')))
          };
          if ($neqeq(closure_type, $$$($$('Closure'), 'NONE'))) {
            self.$push_closure(closure_type)
          };
          $send(self, 'in_rescue', [self], function $$8(){var self = $$8.$$s == null ? this : $$8.$$s;

            
            self.$push("try {");
            $send(self, 'indent', [], function $$9(){var self = $$9.$$s == null ? this : $$9.$$s;

              return self.$line(self.$stmt(self.$body_code()))}, {$$s: self});
            self.$line("} catch ($err) {");
            $send(self, 'indent', [], function $$10(){var self = $$10.$$s == null ? this : $$10.$$s;

              
              if ($truthy(self['$has_rescue_else?']())) {
                self.$line("$no_errors = false;")
              };
              $send(self.$children()['$[]']($range(1, -1, false)), 'each_with_index', [], function $$11(child, idx){var self = $$11.$$s == null ? this : $$11.$$s;
                if (self.level == null) self.level = nil;

                
                if (child == null) child = nil;
                if (idx == null) idx = nil;
                if (!($truthy(child) && ($eqeq(child.$type(), "resbody")))) {
                  return nil
                };
                _has_rescue_handlers = true;
                if (!$eqeq(idx, 0)) {
                  self.$push(" else ")
                };
                return self.$line(self.$process(child, self.level));}, {$$s: self});
              return self.$push(" else { throw $err; }");}, {$$s: self});
            self.$line("}");
            if ($truthy(self['$handle_rescue_else_manually?']())) {
              
              self.$push("finally {");
              $send(self, 'indent', [], function $$12(){var self = $$12.$$s == null ? this : $$12.$$s;

                
                self.$line("if ($no_errors) { ");
                $send(self, 'indent', [], function $$13(){var self = $$13.$$s == null ? this : $$13.$$s;

                  return self.$line(self.$stmt(self.$rescue_else_code()))}, {$$s: self});
                return self.$line("}");}, {$$s: self});
              return self.$push("}");
            } else {
              return nil
            };}, {$$s: self});
          if ($neqeq(closure_type, $$$($$('Closure'), 'NONE'))) {
            self.$pop_closure()
          };
          if ($truthy(self['$has_retry?']())) {
            self.$wrap("do { ", " break; } while(1)")
          };
          if (($truthy(self['$expr?']()) || ($truthy(self['$recv?']())))) {
            if ($truthy(self.$scope().$await_encountered())) {
              return self.$wrap("(await (async function() { ", "})())")
            } else {
              return self.$wrap("(function() { ", "})()")
            }
          } else {
            return nil
          };
        });
        
        $def(self, '$body_code', function $$body_code() {
          var self = this, body_code = nil;

          
          body_code = (($truthy(self.$body()['$nil?']()) || ($eqeq(self.$body().$type(), "resbody"))) ? (self.$s("nil")) : (self.$body()));
          if (!$truthy(self['$stmt?']())) {
            body_code = self.$compiler().$returns(body_code)
          };
          return body_code;
        });
        
        $def(self, '$rescue_else_code', function $$rescue_else_code() {
          var self = this, rescue_else_code = nil;

          
          rescue_else_code = self.$scope().$rescue_else_sexp();
          if (!$truthy(self['$stmt?']())) {
            rescue_else_code = self.$compiler().$returns(rescue_else_code)
          };
          return rescue_else_code;
        });
        
        $def(self, '$handle_rescue_else_manually?', function $RescueNode_handle_rescue_else_manually$ques$14() {
          var self = this, $ret_or_1 = nil;

          if ($truthy(($ret_or_1 = self['$in_ensure?']()['$!']()))) {
            return self['$has_rescue_else?']()
          } else {
            return $ret_or_1
          }
        });
        return $def(self, '$has_retry?', function $RescueNode_has_retry$ques$15() {
          var self = this;

          return self.sexp.$meta()['$[]']("has_retry")
        });
      })($nesting[0], $$('Base'), $nesting);
      return (function($base, $super) {
        var self = $klass($base, $super, 'ResBodyNode');

        
        
        self.$handle("resbody");
        self.$children("klasses_sexp", "lvar", "body");
        
        $def(self, '$compile', function $$compile() {
          var self = this;

          
          self.$push("if (Opal.rescue($err, ", self.$expr(self.$klasses()), ")) {");
          $send(self, 'indent', [], function $$16(){var self = $$16.$$s == null ? this : $$16.$$s;

            
            if ($truthy(self.$lvar())) {
              self.$push(self.$expr(self.$lvar().$updated(nil, [].concat($to_a(self.$lvar().$children())).concat([self.$s("js_tmp", "$err")]))))
            };
            self.$line("try {");
            $send(self, 'indent', [], function $$17(){var self = $$17.$$s == null ? this : $$17.$$s;

              return $send(self, 'in_resbody', [], function $$18(){var self = $$18.$$s == null ? this : $$18.$$s;

                return self.$line(self.$stmt(self.$rescue_body()))}, {$$s: self})}, {$$s: self});
            return self.$line("} finally { Opal.pop_exception($err); }");}, {$$s: self});
          return self.$line("}");
        });
        
        $def(self, '$klasses', function $$klasses() {
          var self = this, $ret_or_1 = nil;

          if ($truthy(($ret_or_1 = self.$klasses_sexp()))) {
            return $ret_or_1
          } else {
            return self.$s("array", self.$s("const", nil, "StandardError"))
          }
        });
        return $def(self, '$rescue_body', function $$rescue_body() {
          var self = this, body_code = nil, $ret_or_1 = nil;

          
          body_code = ($truthy(($ret_or_1 = self.$body())) ? ($ret_or_1) : (self.$s("nil")));
          if (!$truthy(self['$stmt?']())) {
            body_code = self.$compiler().$returns(body_code)
          };
          return body_code;
        });
      })($nesting[0], $$('Base'));
    })($nesting[0], $nesting)
  })($nesting[0], $nesting);
});

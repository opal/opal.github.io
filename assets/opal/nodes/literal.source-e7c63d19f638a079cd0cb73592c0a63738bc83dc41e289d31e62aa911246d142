Opal.queue(function(Opal) {/* Generated by Opal 1.8.2 */
  var $module = Opal.module, $klass = Opal.klass, $def = Opal.def, $return_val = Opal.return_val, $defs = Opal.defs, $truthy = Opal.truthy, $const_set = Opal.const_set, $regexp = Opal.regexp, $send = Opal.send, $rb_plus = Opal.rb_plus, $lambda = Opal.lambda, $rb_le = Opal.rb_le, $rb_minus = Opal.rb_minus, $slice = Opal.slice, $send2 = Opal.send2, $find_super = Opal.find_super, $to_a = Opal.to_a, $eqeq = Opal.eqeq, $eqeqeq = Opal.eqeqeq, $Opal = Opal.Opal, $rb_gt = Opal.rb_gt, self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$;

  Opal.add_stubs('require,handle,push,to_s,type,self,scope,children,value,recv?,wrap,freeze,join,keys,gsub,even?,length,last_match,+,chop,[],inspect,to_i,to_utf16,translate_escape_chars,valid_encoding?,helper,upcase,<=,call,-,>>,&,attr_accessor,extract_flags_and_value,select!,flags,=~,warning,compiler,==,compile_static_regexp,compile_dynamic_regexp,each_with_index,zero?,expr,any?,===,static_as_dynamic,new,flags=,map,to_proc,value=,empty?,s,single_line?,include?,is_a?,updated,delete,source,expression,loc,private,>,!=,!,regexp,first,each,compile_inline?,compile_inline,compile_range_initialize,start,finish,raise,expr_or_nil,absolute_const,top_scope,numerator,denominator,real,imag');
  
  self.$require("opal/nodes/base");
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Opal');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $parent_nesting) {
      var self = $module($base, 'Nodes');

      var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting);

      
      (function($base, $super) {
        var self = $klass($base, $super, 'ValueNode');

        
        
        self.$handle("true", "false", "nil");
        
        $def(self, '$compile', function $$compile() {
          var self = this;

          return self.$push(self.$type().$to_s())
        });
        return $defs(self, '$truthy_optimize?', $return_val(true));
      })($nesting[0], $$('Base'));
      (function($base, $super) {
        var self = $klass($base, $super, 'SelfNode');

        
        
        self.$handle("self");
        return $def(self, '$compile', function $$compile() {
          var self = this;

          return self.$push(self.$scope().$self())
        });
      })($nesting[0], $$('Base'));
      (function($base, $super) {
        var self = $klass($base, $super, 'NumericNode');

        
        
        self.$handle("int", "float");
        self.$children("value");
        
        $def(self, '$compile', function $$compile() {
          var self = this;

          
          self.$push(self.$value().$to_s());
          if ($truthy(self['$recv?']())) {
            return self.$wrap("(", ")")
          } else {
            return nil
          };
        });
        return $defs(self, '$truthy_optimize?', $return_val(true));
      })($nesting[0], $$('Base'));
      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'StringNode');

        var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting);

        
        self.$handle("str");
        self.$children("value");
        $const_set($nesting[0], 'ESCAPE_CHARS', (new Map([["a", "\\u0007"], ["e", "\\u001b"]])).$freeze());
        $const_set($nesting[0], 'ESCAPE_REGEX', $regexp(["(\\\\+)([", $$('ESCAPE_CHARS').$keys().$join(""), "])"]).$freeze());
        
        $def(self, '$translate_escape_chars', function $$translate_escape_chars(inspect_string) {
          
          return $send(inspect_string, 'gsub', [$$('ESCAPE_REGEX')], function $$1(original){
            
            if (original == null) original = nil;
            if ($truthy($$('Regexp').$last_match(1).$length()['$even?']())) {
              return original
            } else {
              return $rb_plus($$('Regexp').$last_match(1).$chop(), $$('ESCAPE_CHARS')['$[]']($$('Regexp').$last_match(2)))
            };})
        });
        
        $def(self, '$compile', function $$compile() {
          var self = this, string_value = nil, sanitized_value = nil;

          
          string_value = self.$value();
          sanitized_value = $send(string_value.$inspect(), 'gsub', [/\\u\{([0-9a-f]+)\}/], function $$2(){var self = $$2.$$s == null ? this : $$2.$$s, code_point = nil;

            
            code_point = $$('Regexp').$last_match(1).$to_i(16);
            return self.$to_utf16(code_point);}, {$$s: self});
          self.$push(self.$translate_escape_chars(sanitized_value));
          nil;
          if ($truthy(self.$value()['$valid_encoding?']())) {
            return nil
          } else {
            
            self.$helper("binary");
            return self.$wrap("$binary(", ")");
          };
        });
        return $def(self, '$to_utf16', function $$to_utf16(code_point) {
          var ten_bits = nil, u = nil, lead_surrogate = nil, tail_surrogate = nil;

          
          ten_bits = 1023;
          u = $lambda(function $$3(code_unit){
            
            if (code_unit == null) code_unit = nil;
            return $rb_plus("\\u", code_unit.$to_s(16).$upcase());});
          if ($truthy($rb_le(code_point, 65535))) {
            return u.$call(code_point)
          };
          code_point = $rb_minus(code_point, 65536);
          lead_surrogate = $rb_plus(55296, code_point['$>>'](10));
          tail_surrogate = $rb_plus(56320, code_point['$&'](ten_bits));
          return $rb_plus(u.$call(lead_surrogate), u.$call(tail_surrogate));
        });
      })($nesting[0], $$('Base'), $nesting);
      (function($base, $super) {
        var self = $klass($base, $super, 'SymbolNode');

        
        
        self.$handle("sym");
        self.$children("value");
        return $def(self, '$compile', function $$compile() {
          var self = this;

          return self.$push(self.$value().$to_s().$inspect())
        });
      })($nesting[0], $$('Base'));
      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'RegexpNode');

        var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting), $proto = self.$$prototype;

        $proto.sexp = nil;
        
        self.$handle("regexp");
        self.$attr_accessor("value", "flags");
        $const_set($nesting[0], 'SUPPORTED_FLAGS', /[gimuy]/.$freeze());
        
        $def(self, '$initialize', function $$initialize($a) {
          var $post_args, $fwd_rest, $yield = $$initialize.$$p || nil, self = this;

          $$initialize.$$p = null;
          
          $post_args = $slice(arguments);
          $fwd_rest = $post_args;
          $send2(self, $find_super(self, 'initialize', $$initialize, false, true), 'initialize', $to_a($fwd_rest), $yield);
          return self.$extract_flags_and_value();
        }, -1);
        
        $def(self, '$compile', function $$compile() {
          var self = this;

          
          $send(self.$flags(), 'select!', [], function $$4(flag){var self = $$4.$$s == null ? this : $$4.$$s;

            
            if (flag == null) flag = nil;
            if ($truthy($$('SUPPORTED_FLAGS')['$=~'](flag))) {
              return true
            } else {
              
              self.$compiler().$warning("Skipping the '" + (flag) + "' Regexp flag as it's not widely supported by JavaScript vendors.");
              return false;
            };}, {$$s: self});
          if ($eqeq(self.$value().$type(), "str")) {
            return self.$compile_static_regexp()
          } else {
            return self.$compile_dynamic_regexp()
          };
        });
        
        $def(self, '$compile_dynamic_regexp', function $$compile_dynamic_regexp() {
          var self = this;

          
          self.$helper("regexp");
          self.$push("$regexp([");
          $send(self.$value().$children(), 'each_with_index', [], function $$5(v, index){var self = $$5.$$s == null ? this : $$5.$$s;

            
            if (v == null) v = nil;
            if (index == null) index = nil;
            if (!$truthy(index['$zero?']())) {
              self.$push(", ")
            };
            return self.$push(self.$expr(v));}, {$$s: self});
          self.$push("]");
          if ($truthy(self.$flags()['$any?']())) {
            self.$push(", '" + (self.$flags().$join()) + "'")
          };
          return self.$push(")");
        });
        
        $def(self, '$compile_static_regexp', function $$compile_static_regexp() {
          var self = this, value = nil, $ret_or_1 = nil;

          
          value = self.$value().$children()['$[]'](0);
          if ($eqeqeq("", ($ret_or_1 = value))) {
            return self.$push("/(?:)/")
          } else if ($eqeqeq($regexp(["\\(\\?[(<>#]|[*+?]\\+"]), $ret_or_1)) {
            return self.$static_as_dynamic(value)
          } else {
            return self.$push("" + ($$('Regexp').$new(value).$inspect()) + (self.$flags().$join()))
          };
        });
        
        $def(self, '$static_as_dynamic', function $$static_as_dynamic(value) {
          var self = this;

          
          self.$helper("regexp");
          self.$push("$regexp([\"");
          self.$push(value.$gsub("\\", "\\\\\\\\"));
          self.$push("\"]");
          if ($truthy(self.$flags()['$any?']())) {
            self.$push(", '" + (self.$flags().$join()) + "'")
          };
          return self.$push(")");
        });
        
        $def(self, '$extract_flags_and_value', function $$extract_flags_and_value() {
          var $a, $b, self = this, values = nil, flags_sexp = nil, parts = nil;

          
          $a = [].concat($to_a(self.$children())), $b = $a.length - 1, $b = ($b < 0) ? 0 : $b, (values = $slice($a, 0, $b)), (flags_sexp = ($a[$b] == null ? nil : $a[$b])), $a;
          self['$flags=']($send(flags_sexp.$children(), 'map', [], "to_s".$to_proc()));
          self['$value='](($truthy(values['$empty?']()) ? (self.$s("str", "")) : ($truthy(self['$single_line?'](values)) ? (values['$[]'](0)) : ($send(self, 's', ["dstr"].concat($to_a(values)))))));
          if ($truthy(self.$flags()['$include?']("x"))) {
            
            parts = $send(self.$value().$children(), 'map', [], function $$6(part){var self = $$6.$$s == null ? this : $$6.$$s, trimmed_value = nil;

              
              if (part == null) part = nil;
              if (($truthy(part['$is_a?']($$$($$$($Opal, 'AST'), 'Node'))) && ($eqeq(part.$type(), "str")))) {
                
                trimmed_value = part.$children()['$[]'](0).$gsub(/^\s*\#.*/, "").$gsub(/\s/, "");
                return self.$s("str", trimmed_value);
              } else {
                return part
              };}, {$$s: self});
            self['$value='](self.$value().$updated(nil, parts));
            self.$flags().$delete("x");
          };
          if ($eqeq(self.$value().$type(), "str")) {
            return ($a = [self.$s("str", self.$value().$children()['$[]'](0).$gsub("\\A", "^").$gsub("\\z", "$"))], $send(self, 'value=', $a), $a[$a.length - 1])
          } else {
            return nil
          };
        });
        
        $def(self, '$raw_value', function $$raw_value() {
          var $a, self = this;

          return ($a = [self.sexp.$loc().$expression().$source()], $send(self, 'value=', $a), $a[$a.length - 1])
        });
        self.$private();
        return $def(self, '$single_line?', function $RegexpNode_single_line$ques$7(values) {
          var value = nil, $ret_or_1 = nil;

          
          if ($truthy($rb_gt(values.$length(), 1))) {
            return false
          };
          value = values['$[]'](0);
          if ($truthy(($ret_or_1 = value.$type()['$!=']("str")))) {
            return $ret_or_1
          } else {
            return value.$children()['$[]'](0)['$include?']("\n")['$!']()
          };
        });
      })($nesting[0], $$('Base'), $nesting);
      (function($base, $super) {
        var self = $klass($base, $super, 'MatchCurrentLineNode');

        
        
        self.$handle("match_current_line");
        self.$children("regexp");
        return $def(self, '$compile', function $$compile() {
          var self = this, gvar_sexp = nil, send_node = nil;

          
          gvar_sexp = self.$s("gvar", "$_");
          send_node = self.$s("send", gvar_sexp, "=~", self.$regexp());
          return self.$push(self.$expr(send_node));
        });
      })($nesting[0], $$('Base'));
      (function($base, $super) {
        var self = $klass($base, $super, 'DynamicStringNode');

        
        
        self.$handle("dstr");
        return $def(self, '$compile', function $$compile() {
          var self = this, skip_empty = nil;

          
          if (($truthy($rb_gt(self.$children().$length(), 1)) && ($eqeq(self.$children().$first().$type(), "str")))) {
            skip_empty = true
          } else {
            self.$push("\"\"")
          };
          return $send(self.$children(), 'each', [], function $$8(part){var self = $$8.$$s == null ? this : $$8.$$s;

            
            if (part == null) part = nil;
            if ($truthy(skip_empty)) {
              skip_empty = false
            } else {
              self.$push(" + ")
            };
            if ($eqeq(part.$type(), "str")) {
              self.$push(self.$expr(part))
            } else {
              self.$push("(", self.$expr(part), ")")
            };
            if ($truthy(self['$recv?']())) {
              return self.$wrap("(", ")")
            } else {
              return nil
            };}, {$$s: self});
        });
      })($nesting[0], $$('Base'));
      (function($base, $super) {
        var self = $klass($base, $super, 'DynamicSymbolNode');

        
        return self.$handle("dsym")
      })($nesting[0], $$('DynamicStringNode'));
      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'RangeNode');

        var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting);

        
        self.$children("start", "finish");
        $const_set($nesting[0], 'SIMPLE_CHILDREN_TYPES', ["int", "float", "str", "sym"].$freeze());
        
        $def(self, '$compile', function $$compile() {
          var self = this;

          if ($truthy(self['$compile_inline?']())) {
            
            self.$helper("range");
            return self.$compile_inline();
          } else {
            return self.$compile_range_initialize()
          }
        });
        
        $def(self, '$compile_inline?', function $RangeNode_compile_inline$ques$9() {
          var self = this, $ret_or_1 = nil, $ret_or_2 = nil, $ret_or_3 = nil;

          if ($truthy(($ret_or_1 = ($truthy(($ret_or_2 = self.$start()['$!']())) ? ($ret_or_2) : (($truthy(($ret_or_3 = self.$start().$type())) ? ($$('SIMPLE_CHILDREN_TYPES')['$include?'](self.$start().$type())) : ($ret_or_3))))))) {
            
            if ($truthy(($ret_or_2 = self.$finish()['$!']()))) {
              return $ret_or_2
            } else {
              
              if ($truthy(($ret_or_3 = self.$finish().$type()))) {
                return $$('SIMPLE_CHILDREN_TYPES')['$include?'](self.$finish().$type())
              } else {
                return $ret_or_3
              };
            };
          } else {
            return $ret_or_1
          }
        });
        
        $def(self, '$compile_inline', function $$compile_inline() {
          var self = this;

          return self.$raise($$('NotImplementedError'))
        });
        return $def(self, '$compile_range_initialize', function $$compile_range_initialize() {
          var self = this;

          return self.$raise($$('NotImplementedError'))
        });
      })($nesting[0], $$('Base'), $nesting);
      (function($base, $super) {
        var self = $klass($base, $super, 'InclusiveRangeNode');

        
        
        self.$handle("irange");
        
        $def(self, '$compile_inline', function $$compile_inline() {
          var self = this;

          return self.$push("$range(", self.$expr_or_nil(self.$start()), ", ", self.$expr_or_nil(self.$finish()), ", false)")
        });
        return $def(self, '$compile_range_initialize', function $$compile_range_initialize() {
          var self = this;

          return self.$push("Opal.Range.$new(", self.$expr_or_nil(self.$start()), ", ", self.$expr_or_nil(self.$finish()), ", false)")
        });
      })($nesting[0], $$('RangeNode'));
      (function($base, $super) {
        var self = $klass($base, $super, 'ExclusiveRangeNode');

        
        
        self.$handle("erange");
        
        $def(self, '$compile_inline', function $$compile_inline() {
          var self = this;

          return self.$push("$range(", self.$expr_or_nil(self.$start()), ", ", self.$expr_or_nil(self.$finish()), ", true)")
        });
        return $def(self, '$compile_range_initialize', function $$compile_range_initialize() {
          var self = this;

          return self.$push("Opal.Range.$new(", self.$expr_or_nil(self.$start()), ",", self.$expr_or_nil(self.$finish()), ", true)")
        });
      })($nesting[0], $$('RangeNode'));
      (function($base, $super) {
        var self = $klass($base, $super, 'RationalNode');

        
        
        self.$handle("rational");
        self.$children("value");
        return $def(self, '$compile', function $$compile() {
          var self = this;

          return self.$push("" + (self.$top_scope().$absolute_const()) + "('Rational').$new(" + (self.$value().$numerator()) + ", " + (self.$value().$denominator()) + ")")
        });
      })($nesting[0], $$('Base'));
      return (function($base, $super) {
        var self = $klass($base, $super, 'ComplexNode');

        
        
        self.$handle("complex");
        self.$children("value");
        return $def(self, '$compile', function $$compile() {
          var self = this;

          return self.$push("" + (self.$top_scope().$absolute_const()) + "('Complex').$new(" + (self.$value().$real()) + ", " + (self.$value().$imag()) + ")")
        });
      })($nesting[0], $$('Base'));
    })($nesting[0], $nesting)
  })($nesting[0], $nesting);
});

Opal.queue(function(Opal) {/* Generated by Opal 1.8.2 */
  var $module = Opal.module, $klass = Opal.klass, $truthy = Opal.truthy, $eqeq = Opal.eqeq, $def = Opal.def, $const_set = Opal.const_set, self = Opal.top, $nesting = [], nil = Opal.nil;

  Opal.add_stubs('require,handle,children,magical_data_const?,push,optimized_access?,helper,name,==,const_scope,s,absolute_const,top_scope,recv,eval?,compiler,relative_access,scope,nil?,eof_content,freeze,include?,base,expr,value,nesting');
  
  self.$require("opal/nodes/base");
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Opal');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $parent_nesting) {
      var self = $module($base, 'Nodes');

      var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting);

      
      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'ConstNode');

        var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting);

        
        self.$handle("const");
        self.$children("const_scope", "name");
        
        $def(self, '$compile', function $$compile() {
          var self = this;

          if ($truthy(self['$magical_data_const?']())) {
            return self.$push("$__END__")
          } else if ($truthy(self['$optimized_access?']())) {
            
            self.$helper("" + (self.$name()));
            return self.$push("$" + (self.$name()));
          } else if ($eqeq(self.$const_scope(), self.$s("cbase"))) {
            return self.$push("" + (self.$top_scope().$absolute_const()) + "('" + (self.$name()) + "')")
          } else if ($truthy(self.$const_scope())) {
            return self.$push("" + (self.$top_scope().$absolute_const()) + "(", self.$recv(self.$const_scope()), ", '" + (self.$name()) + "')")
          } else if ($truthy(self.$compiler()['$eval?']())) {
            return self.$push("" + (self.$scope().$relative_access()) + "('" + (self.$name()) + "')")
          } else {
            return self.$push("" + (self.$scope().$relative_access()) + "('" + (self.$name()) + "')")
          }
        });
        
        $def(self, '$magical_data_const?', function $ConstNode_magical_data_const$ques$1() {
          var self = this, $ret_or_1 = nil, $ret_or_2 = nil;

          if ($truthy(($ret_or_1 = ($truthy(($ret_or_2 = self.$const_scope()['$nil?']())) ? (self.$name()['$==']("DATA")) : ($ret_or_2))))) {
            return self.$compiler().$eof_content()
          } else {
            return $ret_or_1
          }
        });
        $const_set($nesting[0], 'OPTIMIZED_ACCESS_CONSTS', ["BasicObject", "Object", "Module", "Class", "Opal", "Kernel", "NilClass"].$freeze());
        return $def(self, '$optimized_access?', function $ConstNode_optimized_access$ques$2() {
          var self = this, $ret_or_1 = nil;

          if ($truthy(($ret_or_1 = self.$const_scope()['$=='](self.$s("cbase"))))) {
            return $$('OPTIMIZED_ACCESS_CONSTS')['$include?'](self.$name())
          } else {
            return $ret_or_1
          }
        });
      })($nesting[0], $$('Base'), $nesting);
      (function($base, $super) {
        var self = $klass($base, $super, 'CbaseNode');

        
        
        self.$handle("cbase");
        return $def(self, '$compile', function $$compile() {
          var self = this;

          return self.$push("'::'")
        });
      })($nesting[0], $$('Base'));
      return (function($base, $super) {
        var self = $klass($base, $super, 'ConstAssignNode');

        
        
        self.$handle("casgn");
        self.$children("base", "name", "value");
        return $def(self, '$compile', function $$compile() {
          var self = this;

          
          self.$helper("const_set");
          if ($truthy(self.$base())) {
            return self.$push("$const_set(", self.$expr(self.$base()), ", '" + (self.$name()) + "', ", self.$expr(self.$value()), ")")
          } else {
            return self.$push("$const_set(" + (self.$scope().$nesting()) + "[0], '" + (self.$name()) + "', ", self.$expr(self.$value()), ")")
          };
        });
      })($nesting[0], $$('Base'));
    })($nesting[0], $nesting)
  })($nesting[0], $nesting);
});

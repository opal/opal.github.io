Opal.queue(function(Opal) {/* Generated by Opal 1.8.2 */
  var $module = Opal.module, $klass = Opal.klass, $def = Opal.def, self = Opal.top, $nesting = [], nil = Opal.nil;

  Opal.add_stubs('require,handle,children,[],meta,<<,used_kwargs,scope,add_temp,lvar_name,helper,push,inspect,to_s');
  
  self.$require("opal/nodes/base");
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Opal');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $parent_nesting) {
      var self = $module($base, 'Nodes');

      var $nesting = [self].concat($parent_nesting);

      return (function($base, $parent_nesting) {
        var self = $module($base, 'Args');

        var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting);

        return (function($base, $super) {
          var self = $klass($base, $super, 'ExtractKwarg');

          var $proto = self.$$prototype;

          $proto.sexp = nil;
          
          self.$handle("extract_kwarg");
          self.$children("lvar_name");
          return $def(self, '$compile', function $$compile() {
            var self = this, key_name = nil;

            
            key_name = self.sexp.$meta()['$[]']("arg_name");
            self.$scope().$used_kwargs()['$<<'](key_name);
            self.$add_temp(self.$lvar_name());
            self.$helper("get_kwarg");
            return self.$push("" + (self.$lvar_name()) + " = $get_kwarg($kwargs, " + (key_name.$to_s().$inspect()) + ")");
          });
        })($nesting[0], $$('Base'))
      })($nesting[0], $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting);
});

Opal.queue(function(Opal) {/* Generated by Opal 1.8.2 */
  var $module = Opal.module, $klass = Opal.klass, $eqeq = Opal.eqeq, $def = Opal.def, self = Opal.top, $nesting = [], nil = Opal.nil;

  Opal.add_stubs('require,handle,children,add_temp,helper,==,offset,push');
  
  self.$require("opal/nodes/base");
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Opal');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $parent_nesting) {
      var self = $module($base, 'Nodes');

      var $nesting = [self].concat($parent_nesting);

      return (function($base, $parent_nesting) {
        var self = $module($base, 'Args');

        var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting);

        return (function($base, $super) {
          var self = $klass($base, $super, 'PreparePostArgs');

          
          
          self.$handle("prepare_post_args");
          self.$children("offset");
          return $def(self, '$compile', function $$compile() {
            var self = this;

            
            self.$add_temp("$post_args");
            self.$helper("slice");
            if ($eqeq(self.$offset(), 0)) {
              return self.$push("$post_args = $slice(arguments)")
            } else {
              return self.$push("$post_args = $slice(arguments, " + (self.$offset()) + ")")
            };
          });
        })($nesting[0], $$('Base'))
      })($nesting[0], $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting);
});

Opal.queue(function(Opal) {/* Generated by Opal 1.8.1 */
  var $module = Opal.module, $klass = Opal.klass, $slice = Opal.slice, $send2 = Opal.send2, $find_super = Opal.find_super, $to_a = Opal.to_a, $def = Opal.def, $truthy = Opal.truthy, $rb_minus = Opal.rb_minus, $not = Opal.not, $rb_lt = Opal.rb_lt, $rb_plus = Opal.rb_plus, $rb_gt = Opal.rb_gt, $send = Opal.send, self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$;

  Opal.add_stubs('require,handle,children,new,args_node,args,optargs,restarg,postargs,kwargs,kwoptargs,kwrestarg,kwnilarg,arity=,scope,arity,arity_check?,compiler,empty?,arity_checks,helper,inspect,to_s,mid,line,push,join,compact,size,all_args,-,!,-@,<,+,>,<<,has_only_optional_kwargs?,any?,negative_arity,positive_arity,select,include?,type,has_required_kwargs?,all?,==,def?,class_scope?,top?,parent,class?,name,module?,identity');
  
  self.$require("opal/nodes/base");
  self.$require("opal/rewriters/arguments");
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Opal');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $parent_nesting) {
      var self = $module($base, 'Nodes');

      var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting);

      
      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'ArityCheckNode');

        var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting), $proto = self.$$prototype;

        $proto.kwargs = $proto.kwoptargs = $proto.kwrestarg = $proto.all_args = $proto.args = $proto.optargs = $proto.restarg = $proto.postargs = $proto.arity_checks = nil;
        
        self.$handle("arity_check");
        self.$children("args_node");
        
        $def(self, '$initialize', function $$initialize($a) {
          var $post_args, $fwd_rest, $yield = $$initialize.$$p || nil, self = this, arguments$ = nil;

          $$initialize.$$p = null;
          
          $post_args = $slice(arguments);
          $fwd_rest = $post_args;
          $send2(self, $find_super(self, 'initialize', $$initialize, false, true), 'initialize', $to_a($fwd_rest), $yield);
          arguments$ = $$$($$('Rewriters'), 'Arguments').$new(self.$args_node().$children());
          self.args = arguments$.$args();
          self.optargs = arguments$.$optargs();
          self.restarg = arguments$.$restarg();
          self.postargs = arguments$.$postargs();
          self.kwargs = arguments$.$kwargs();
          self.kwoptargs = arguments$.$kwoptargs();
          self.kwrestarg = arguments$.$kwrestarg();
          return (self.kwnilarg = arguments$.$kwnilarg());
        }, -1);
        
        $def(self, '$compile', function $$compile() {
          var self = this, meth = nil;

          
          self.$scope()['$arity='](self.$arity());
          if (!$truthy(self.$compiler()['$arity_check?']())) {
            return nil
          };
          if ($truthy(self.$arity_checks()['$empty?']())) {
            return nil
          } else {
            
            self.$helper("ac");
            meth = self.$scope().$mid().$to_s().$inspect();
            self.$line("var $arity = arguments.length;");
            return self.$push(" if (" + (self.$arity_checks().$join(" || ")) + ") { $ac($arity, " + (self.$arity()) + ", this, " + (meth) + "); }");
          };
        });
        
        $def(self, '$kwargs', function $$kwargs() {
          var self = this;

          return [].concat($to_a(self.kwargs)).concat($to_a(self.kwoptargs)).concat([self.kwrestarg]).$compact()
        });
        
        $def(self, '$all_args', function $$all_args() {
          var self = this, $ret_or_1 = nil;

          return (self.all_args = ($truthy(($ret_or_1 = self.all_args)) ? ($ret_or_1) : ([].concat($to_a(self.args)).concat($to_a(self.optargs)).concat([self.restarg]).concat($to_a(self.postargs)).concat($to_a(self.$kwargs())).$compact())))
        });
        
        $def(self, '$arity_checks', function $$arity_checks() {
          var $a, self = this, arity = nil, min_arity = nil, max_arity = nil;

          
          if ($truthy((($a = self['arity_checks'], $a != null && $a !== nil) ? 'instance-variable' : nil))) {
            return self.arity_checks
          };
          arity = self.$all_args().$size();
          arity = $rb_minus(arity, self.optargs.$size());
          if ($truthy(self.restarg)) {
            arity = $rb_minus(arity, 1)
          };
          arity = $rb_minus(arity, self.$kwargs().$size());
          if ((($not(self.optargs['$empty?']()) || ($not(self.$kwargs()['$empty?']()))) || ($truthy(self.restarg)))) {
            arity = $rb_minus(arity['$-@'](), 1)
          };
          self.arity_checks = [];
          if ($truthy($rb_lt(arity, 0))) {
            
            min_arity = $rb_plus(arity, 1)['$-@']();
            max_arity = self.$all_args().$size();
            if ($truthy($rb_gt(min_arity, 0))) {
              self.arity_checks['$<<']("$arity < " + (min_arity))
            };
            if (!$truthy(self.restarg)) {
              self.arity_checks['$<<']("$arity > " + (max_arity))
            };
          } else {
            self.arity_checks['$<<']("$arity !== " + (arity))
          };
          return self.arity_checks;
        });
        
        $def(self, '$arity', function $$arity() {
          var self = this;

          if ((($truthy(self.restarg) || ($truthy(self.optargs['$any?']()))) || ($truthy(self['$has_only_optional_kwargs?']())))) {
            return self.$negative_arity()
          } else {
            return self.$positive_arity()
          }
        });
        
        $def(self, '$negative_arity', function $$negative_arity() {
          var self = this, required_plain_args = nil, result = nil;

          
          required_plain_args = $send(self.$all_args(), 'select', [], function $$1(arg){
            
            if (arg == null) arg = nil;
            return ["arg", "mlhs"]['$include?'](arg.$type());});
          result = required_plain_args.$size();
          if ($truthy(self['$has_required_kwargs?']())) {
            result = $rb_plus(result, 1)
          };
          return $rb_minus(result['$-@'](), 1);
        });
        
        $def(self, '$positive_arity', function $$positive_arity() {
          var self = this, result = nil;

          
          result = self.$all_args().$size();
          result = $rb_minus(result, self.$kwargs().$size());
          if ($truthy(self.$kwargs()['$any?']())) {
            result = $rb_plus(result, 1)
          };
          return result;
        });
        
        $def(self, '$has_only_optional_kwargs?', function $ArityCheckNode_has_only_optional_kwargs$ques$2() {
          var self = this, $ret_or_1 = nil;

          if ($truthy(($ret_or_1 = self.$kwargs()['$any?']()))) {
            return $send(self.$kwargs(), 'all?', [], function $$3(arg){
              
              if (arg == null) arg = nil;
              return ["kwoptarg", "kwrestarg"]['$include?'](arg.$type());})
          } else {
            return $ret_or_1
          }
        });
        return $def(self, '$has_required_kwargs?', function $ArityCheckNode_has_required_kwargs$ques$4() {
          var self = this;

          return $send(self.$kwargs(), 'any?', [], function $$5(arg){
            
            if (arg == null) arg = nil;
            return arg.$type()['$==']("kwarg");})
        });
      })($nesting[0], $$('Base'), $nesting);
      return (function($base, $super) {
        var self = $klass($base, $super, 'IterArityCheckNode');

        
        
        self.$handle("iter_arity_check");
        return $def(self, '$compile', function $$compile() {
          var self = this, parent_scope = nil, $ret_or_1 = nil, $ret_or_2 = nil, context = nil, identity = nil;

          
          self.$scope()['$arity='](self.$arity());
          if (!$truthy(self.$compiler()['$arity_check?']())) {
            return nil
          };
          if ($truthy(self.$arity_checks()['$empty?']())) {
            return nil
          } else {
            
            parent_scope = self.$scope();
            while (!($truthy(($truthy(($ret_or_1 = ($truthy(($ret_or_2 = parent_scope['$def?']())) ? ($ret_or_2) : (parent_scope['$class_scope?']())))) ? ($ret_or_1) : (parent_scope['$top?']()))))) {
            parent_scope = parent_scope.$parent()
            };
            context = ($truthy(parent_scope['$top?']()) ? ("'<main>'") : ($truthy(parent_scope['$def?']()) ? ("'" + (parent_scope.$mid()) + "'") : ($truthy(parent_scope['$class?']()) ? ("'<class:" + (parent_scope.$name()) + ">'") : ($truthy(parent_scope['$module?']()) ? ("'<module:" + (parent_scope.$name()) + ">'") : nil))));
            identity = self.$scope().$identity();
            self.$line("if (" + (identity) + ".$$is_lambda || " + (identity) + ".$$define_meth) {");
            self.$line("  var $arity = arguments.length;");
            self.$line("  if (" + (self.$arity_checks().$join(" || ")) + ") { Opal.block_ac($arity, " + (self.$arity()) + ", " + (context) + "); }");
            return self.$line("}");
          };
        });
      })($nesting[0], $$('ArityCheckNode'));
    })($nesting[0], $nesting)
  })($nesting[0], $nesting);
});

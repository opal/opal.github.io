Opal.queue(function(Opal) {/* Generated by Opal 1.8.1 */
  var $module = Opal.module, $klass = Opal.klass, $truthy = Opal.truthy, $eqeq = Opal.eqeq, $def = Opal.def, self = Opal.top, $nesting = [], nil = Opal.nil;

  Opal.add_stubs('require,handle,children,name,add_temp,==,args_to_keep,push');
  
  self.$require("opal/nodes/base");
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Opal');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $parent_nesting) {
      var self = $module($base, 'Nodes');

      var $nesting = [self].concat($parent_nesting);

      return (function($base, $parent_nesting) {
        var self = $module($base, 'Args');

        var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting);

        return (function($base, $super) {
          var self = $klass($base, $super, 'ExtractRestarg');

          
          
          self.$handle("extract_restarg");
          self.$children("name", "args_to_keep");
          return $def(self, '$compile', function $$compile() {
            var self = this, name = nil, $ret_or_1 = nil;

            
            name = ($truthy(($ret_or_1 = self.$name())) ? ($ret_or_1) : ("$rest_arg"));
            self.$add_temp(name);
            if ($eqeq(self.$args_to_keep(), 0)) {
              return self.$push("" + (name) + " = $post_args")
            } else {
              return self.$push("" + (name) + " = $post_args.splice(0, $post_args.length - " + (self.$args_to_keep()) + ")")
            };
          });
        })($nesting[0], $$('Base'))
      })($nesting[0], $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting);
});

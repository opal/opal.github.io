Opal.queue(function(Opal) {/* Generated by Opal 1.8.2 */
  var $module = Opal.module, $klass = Opal.klass, $truthy = Opal.truthy, $def = Opal.def, $send = Opal.send, self = Opal.top, $nesting = [], nil = Opal.nil;

  Opal.add_stubs('require,handle,children,name,add_temp,helper,push,used_kwargs,map,scope,join');
  
  self.$require("opal/nodes/base");
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Opal');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $parent_nesting) {
      var self = $module($base, 'Nodes');

      var $nesting = [self].concat($parent_nesting);

      return (function($base, $parent_nesting) {
        var self = $module($base, 'Args');

        var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting);

        return (function($base, $super) {
          var self = $klass($base, $super, 'ExtractKwrestarg');

          
          
          self.$handle("extract_kwrestarg");
          self.$children("name");
          
          $def(self, '$compile', function $$compile() {
            var self = this, name = nil, $ret_or_1 = nil;

            
            name = ($truthy(($ret_or_1 = self.$name())) ? ($ret_or_1) : ("$kw_rest_arg"));
            self.$add_temp(name);
            self.$helper("kwrestargs");
            return self.$push("" + (name) + " = $kwrestargs($kwargs, " + (self.$used_kwargs()) + ")");
          });
          return $def(self, '$used_kwargs', function $$used_kwargs() {
            var self = this, args = nil;

            
            args = $send(self.$scope().$used_kwargs(), 'map', [], function $$1(arg_name){
              
              if (arg_name == null) arg_name = nil;
              return "'" + (arg_name) + "': true";});
            return "{" + (args.$join(",")) + "}";
          });
        })($nesting[0], $$('Base'))
      })($nesting[0], $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting);
});

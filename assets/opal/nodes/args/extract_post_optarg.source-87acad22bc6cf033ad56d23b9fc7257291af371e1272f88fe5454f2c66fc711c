Opal.queue(function(Opal) {/* Generated by Opal 1.8.1 */
  var $module = Opal.module, $klass = Opal.klass, $eqeq = Opal.eqeq, $def = Opal.def, self = Opal.top, $nesting = [], nil = Opal.nil;

  Opal.add_stubs('require,handle,children,add_temp,name,line,args_to_keep,==,[],default_value,push,expr');
  
  self.$require("opal/nodes/base");
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Opal');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $parent_nesting) {
      var self = $module($base, 'Nodes');

      var $nesting = [self].concat($parent_nesting);

      return (function($base, $parent_nesting) {
        var self = $module($base, 'Args');

        var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting);

        return (function($base, $super) {
          var self = $klass($base, $super, 'ExtractPostOptarg');

          
          
          self.$handle("extract_post_optarg");
          self.$children("name", "default_value", "args_to_keep");
          return $def(self, '$compile', function $$compile() {
            var self = this;

            
            self.$add_temp(self.$name());
            self.$line("if ($post_args.length > " + (self.$args_to_keep()) + ") " + (self.$name()) + " = $post_args.shift();");
            if ($eqeq(self.$default_value().$children()['$[]'](1), "undefined")) {
              return nil
            };
            return self.$push("if (" + (self.$name()) + " == null) " + (self.$name()) + " = ", self.$expr(self.$default_value()));
          });
        })($nesting[0], $$('Base'))
      })($nesting[0], $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting);
});

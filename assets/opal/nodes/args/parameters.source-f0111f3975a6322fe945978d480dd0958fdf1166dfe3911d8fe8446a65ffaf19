Opal.queue(function(Opal) {/* Generated by Opal 1.8.1 */
  var $module = Opal.module, $klass = Opal.klass, $def = Opal.def, $send = Opal.send, $return_val = Opal.return_val, $truthy = Opal.truthy, $eqeq = Opal.eqeq, $nesting = [], nil = Opal.nil;

  Opal.add_stubs('children,map,public_send,type,join,compact,[],meta,==');
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Opal');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $parent_nesting) {
      var self = $module($base, 'Nodes');

      var $nesting = [self].concat($parent_nesting);

      return (function($base, $parent_nesting) {
        var self = $module($base, 'Args');

        var $nesting = [self].concat($parent_nesting);

        return (function($base, $super) {
          var self = $klass($base, $super, 'Parameters');

          var $proto = self.$$prototype;

          $proto.args = nil;
          
          
          $def(self, '$initialize', function $$initialize(args) {
            var self = this;

            return (self.args = args.$children())
          });
          
          $def(self, '$to_code', function $$to_code() {
            var self = this, stringified_parameters = nil;

            
            stringified_parameters = $send(self.args, 'map', [], function $$1(arg){var self = $$1.$$s == null ? this : $$1.$$s;

              
              if (arg == null) arg = nil;
              return self.$public_send("on_" + (arg.$type()), arg);}, {$$s: self});
            return "[" + (stringified_parameters.$compact().$join(", ")) + "]";
          });
          
          $def(self, '$on_arg', function $$on_arg(arg) {
            var arg_name = nil;

            
            arg_name = arg.$meta()['$[]']("arg_name");
            return "['req', '" + (arg_name) + "']";
          });
          
          $def(self, '$on_mlhs', $return_val("['req']"));
          
          $def(self, '$on_optarg', function $$on_optarg(arg) {
            var arg_name = nil;

            
            arg_name = arg.$meta()['$[]']("arg_name");
            return "['opt', '" + (arg_name) + "']";
          });
          
          $def(self, '$on_restarg', function $$on_restarg(arg) {
            var arg_name = nil;

            
            arg_name = arg.$meta()['$[]']("arg_name");
            if ($truthy(arg_name)) {
              
              if ($eqeq(arg_name, "fwd_rest_arg")) {
                arg_name = "*"
              };
              return "['rest', '" + (arg_name) + "']";
            } else {
              return "['rest']"
            };
          });
          
          $def(self, '$on_kwarg', function $$on_kwarg(arg) {
            var arg_name = nil;

            
            arg_name = arg.$meta()['$[]']("arg_name");
            return "['keyreq', '" + (arg_name) + "']";
          });
          
          $def(self, '$on_kwoptarg', function $$on_kwoptarg(arg) {
            var arg_name = nil;

            
            arg_name = arg.$meta()['$[]']("arg_name");
            return "['key', '" + (arg_name) + "']";
          });
          
          $def(self, '$on_kwrestarg', function $$on_kwrestarg(arg) {
            var arg_name = nil;

            
            arg_name = arg.$meta()['$[]']("arg_name");
            if ($truthy(arg_name)) {
              return "['keyrest', '" + (arg_name) + "']"
            } else {
              return "['keyrest']"
            };
          });
          
          $def(self, '$on_blockarg', function $$on_blockarg(arg) {
            var arg_name = nil;

            
            arg_name = arg.$meta()['$[]']("arg_name");
            if ($eqeq(arg_name, "fwd_block_arg")) {
              arg_name = "&"
            };
            return "['block', '" + (arg_name) + "']";
          });
          
          $def(self, '$on_kwnilarg', $return_val("['nokey']"));
          return $def(self, '$on_shadowarg', $return_val(nil));
        })($nesting[0], null)
      })($nesting[0], $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting)
});

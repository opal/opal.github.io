Opal.queue(function(Opal) {/* Generated by Opal 1.8.2 */
  var $module = Opal.module, $klass = Opal.klass, $send = Opal.send, $truthy = Opal.truthy, $def = Opal.def, self = Opal.top, $nesting = [], nil = Opal.nil;

  Opal.add_stubs('require,handle,children,push,in_scope,stmt,returns,compiler,body,add_temp,line,to_vars,scope,recv,object,nesting');
  
  self.$require("opal/nodes/scope");
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Opal');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $parent_nesting) {
      var self = $module($base, 'Nodes');

      var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting);

      return (function($base, $super) {
        var self = $klass($base, $super, 'SingletonClassNode');

        
        
        self.$handle("sclass");
        self.$children("object", "body");
        return $def(self, '$compile', function $$compile() {
          var self = this;

          
          self.$push("(function(self, $parent_nesting) {");
          $send(self, 'in_scope', [], function $$1(){var self = $$1.$$s == null ? this : $$1.$$s, body_stmt = nil;
            if (self.define_nesting == null) self.define_nesting = nil;
            if (self.define_relative_access == null) self.define_relative_access = nil;

            
            body_stmt = self.$stmt(self.$compiler().$returns(self.$body()));
            if ($truthy(self.define_nesting)) {
              self.$add_temp("$nesting = [self].concat($parent_nesting)")
            };
            if ($truthy(self.define_relative_access)) {
              self.$add_temp("$$ = Opal.$r($nesting)")
            };
            self.$line(self.$scope().$to_vars());
            return self.$line(body_stmt);}, {$$s: self});
          return self.$line("})(Opal.get_singleton_class(", self.$recv(self.$object()), "), " + (self.$scope().$nesting()) + ")");
        });
      })($nesting[0], $$('ScopeNode'))
    })($nesting[0], $nesting)
  })($nesting[0], $nesting);
});

Opal.queue(function(Opal) {/* Generated by Opal 1.8.1 */
  var $module = Opal.module, $klass = Opal.klass, $truthy = Opal.truthy, $send2 = Opal.send2, $find_super = Opal.find_super, $defs = Opal.defs, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$;

  return (function($base, $parent_nesting) {
    var self = $module($base, 'Opal');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $parent_nesting) {
      var self = $module($base, 'Parser');

      var $nesting = [self].concat($parent_nesting);

      return (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'SourceBuffer');

        var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting);

        return $defs(self, '$recognize_encoding', function $$recognize_encoding(string) {
          var $yield = $$recognize_encoding.$$p || nil, self = this, $ret_or_1 = nil;

          $$recognize_encoding.$$p = null;
          if ($truthy(($ret_or_1 = $send2(self, $find_super(self, 'recognize_encoding', $$recognize_encoding, false, true), 'recognize_encoding', [string], $yield)))) {
            return $ret_or_1
          } else {
            return $$$($$('Encoding'), 'UTF_8')
          }
        })
      })($nesting[0], $$$($$$($$$('Parser'), 'Source'), 'Buffer'), $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting)
});

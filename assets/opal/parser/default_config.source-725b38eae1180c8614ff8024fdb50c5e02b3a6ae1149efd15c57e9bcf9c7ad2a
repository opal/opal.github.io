Opal.queue(function(Opal) {/* Generated by Opal 1.8.2 */
  var $module = Opal.module, $send2 = Opal.send2, $find_super = Opal.find_super, $def = Opal.def, $lambda = Opal.lambda, $send = Opal.send, $defs = Opal.defs, $slice = Opal.slice, $truthy = Opal.truthy, $Opal = Opal.Opal, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$;

  Opal.add_stubs('attr_accessor,all_errors_are_fatal=,diagnostics,ignore_warnings=,consumer=,diagnostics_consumer,extend,diagnostics_consumer=,new,rewrite,process,default_parser,default_parser_class');
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Opal');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $parent_nesting) {
      var self = $module($base, 'Parser');

      var $nesting = [self].concat($parent_nesting);

      
      (function($base, $parent_nesting) {
        var self = $module($base, 'DefaultConfig');

        var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting);

        
        (function($base) {
          var self = $module($base, 'ClassMethods');

          
          
          self.$attr_accessor("diagnostics_consumer");
          return $def(self, '$default_parser', function $$default_parser() {
            var $yield = $$default_parser.$$p || nil, self = this, parser = nil;

            $$default_parser.$$p = null;
            
            parser = $send2(self, $find_super(self, 'default_parser', $$default_parser, false, true), 'default_parser', [], $yield);
            parser.$diagnostics()['$all_errors_are_fatal='](true);
            parser.$diagnostics()['$ignore_warnings='](false);
            parser.$diagnostics()['$consumer='](self.$diagnostics_consumer());
            return parser;
          });
        })($nesting[0]);
        $defs(self, '$included', function $$included(klass) {
          var $a;

          
          klass.$extend($$('ClassMethods'));
          return ($a = [$lambda(function $$1(diagnostic){
            
            if (diagnostic == null) diagnostic = nil;
            return nil;})], $send(klass, 'diagnostics_consumer=', $a), $a[$a.length - 1]);
        });
        
        $def(self, '$initialize', function $$initialize($a) {
          var $post_args, $fwd_rest, $yield = $$initialize.$$p || nil, self = this;

          $$initialize.$$p = null;
          
          $post_args = $slice(arguments);
          $fwd_rest = $post_args;
          return $send2(self, $find_super(self, 'initialize', $$initialize, false, true), 'initialize', [$$$($$$($$('Opal'), 'AST'), 'Builder').$new()], null);
        }, -1);
        
        $def(self, '$parse', function $$parse(source_buffer) {
          var $yield = $$parse.$$p || nil, self = this, parsed = nil, $ret_or_1 = nil, wrapped = nil;

          $$parse.$$p = null;
          
          parsed = ($truthy(($ret_or_1 = $send2(self, $find_super(self, 'parse', $$parse, false, true), 'parse', [source_buffer], $yield))) ? ($ret_or_1) : ($$$($$$($Opal, 'AST'), 'Node').$new("nil")));
          wrapped = $$$($$$($Opal, 'AST'), 'Node').$new("top", [parsed]);
          return self.$rewrite(wrapped);
        });
        return $def(self, '$rewrite', function $$rewrite(node) {
          
          return $$$($$('Opal'), 'Rewriter').$new(node).$process()
        });
      })($nesting[0], $nesting);
      return (function(self, $parent_nesting) {
        
        
        self.$attr_accessor("default_parser_class");
        return $def(self, '$default_parser', function $$default_parser() {
          var self = this;

          return self.$default_parser_class().$default_parser()
        });
      })(Opal.get_singleton_class(self), $nesting);
    })($nesting[0], $nesting)
  })($nesting[0], $nesting)
});

Opal.queue(function(Opal) {/* Generated by Opal 1.8.1 */
  var $module = Opal.module, $klass = Opal.klass, $def = Opal.def, $send2 = Opal.send2, $find_super = Opal.find_super, $send = Opal.send, $find_block_super = Opal.find_block_super, $truthy = Opal.truthy, $range = Opal.range, $slice = Opal.slice, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$;

  Opal.add_stubs('tracking,pushing,to_proc,on_loop,detect,[],children,!=,type,private,each,push,map,last,[]=,meta');
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Opal');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $parent_nesting) {
      var self = $module($base, 'Rewriters');

      var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting);

      return (function($base, $super) {
        var self = $klass($base, $super, 'ThrowerFinder');

        var $proto = self.$$prototype;

        $proto.break_stack = $proto.redo_stack = $proto.retry_stack = $proto.rescue_else_stack = nil;
        
        
        $def(self, '$initialize', function $$initialize() {
          var self = this;

          
          self.break_stack = [];
          self.redo_stack = [];
          self.retry_stack = [];
          return (self.rescue_else_stack = []);
        });
        
        $def(self, '$on_break', function $$on_break(node) {
          var $yield = $$on_break.$$p || nil, self = this;

          $$on_break.$$p = null;
          
          self.$tracking("break", self.break_stack);
          return $send2(self, $find_super(self, 'on_break', $$on_break, false, true), 'on_break', [node], $yield);
        });
        
        $def(self, '$on_redo', function $$on_redo(node) {
          var $yield = $$on_redo.$$p || nil, self = this;

          $$on_redo.$$p = null;
          
          self.$tracking("redo", self.redo_stack);
          return $send2(self, $find_super(self, 'on_redo', $$on_redo, false, true), 'on_redo', [node], $yield);
        });
        
        $def(self, '$on_retry', function $$on_retry(node) {
          var $yield = $$on_retry.$$p || nil, self = this;

          $$on_retry.$$p = null;
          
          self.$tracking("retry", self.retry_stack);
          return $send2(self, $find_super(self, 'on_retry', $$on_retry, false, true), 'on_retry', [node], $yield);
        });
        
        $def(self, '$on_iter', function $$on_iter(node) {
          var $yield = $$on_iter.$$p || nil, self = this;

          $$on_iter.$$p = null;
          return $send(self, 'pushing', [[self.break_stack, node]], function $$1(){var self = $$1.$$s == null ? this : $$1.$$s;

            return $send2(self, $find_block_super(self, 'on_iter', ($$1.$$def || $$on_iter), false, true), 'on_iter', [node], $yield)}, {$$s: self})
        });
        
        $def(self, '$on_loop', function $$on_loop(node) {
          var block = $$on_loop.$$p || nil, self = this;

          $$on_loop.$$p = null;
          
          ;
          return $send(self, 'pushing', [[self.redo_stack, node], [self.break_stack, nil]], block.$to_proc());
        });
        
        $def(self, '$on_for', function $$on_for(node) {
          var $yield = $$on_for.$$p || nil, self = this;

          $$on_for.$$p = null;
          return $send(self, 'on_loop', [node], function $$2(){var self = $$2.$$s == null ? this : $$2.$$s;

            return $send2(self, $find_block_super(self, 'on_for', ($$2.$$def || $$on_for), false, true), 'on_for', [node], $yield)}, {$$s: self})
        });
        
        $def(self, '$on_while', function $$on_while(node) {
          var $yield = $$on_while.$$p || nil, self = this;

          $$on_while.$$p = null;
          return $send(self, 'on_loop', [node], function $$3(){var self = $$3.$$s == null ? this : $$3.$$s;

            return $send2(self, $find_block_super(self, 'on_while', ($$3.$$def || $$on_while), false, true), 'on_while', [node], $yield)}, {$$s: self})
        });
        
        $def(self, '$on_while_post', function $$on_while_post(node) {
          var $yield = $$on_while_post.$$p || nil, self = this;

          $$on_while_post.$$p = null;
          return $send(self, 'on_loop', [node], function $$4(){var self = $$4.$$s == null ? this : $$4.$$s;

            return $send2(self, $find_block_super(self, 'on_while_post', ($$4.$$def || $$on_while_post), false, true), 'on_while_post', [node], $yield)}, {$$s: self})
        });
        
        $def(self, '$on_until', function $$on_until(node) {
          var $yield = $$on_until.$$p || nil, self = this;

          $$on_until.$$p = null;
          return $send(self, 'on_loop', [node], function $$5(){var self = $$5.$$s == null ? this : $$5.$$s;

            return $send2(self, $find_block_super(self, 'on_until', ($$5.$$def || $$on_until), false, true), 'on_until', [node], $yield)}, {$$s: self})
        });
        
        $def(self, '$on_until_post', function $$on_until_post(node) {
          var $yield = $$on_until_post.$$p || nil, self = this;

          $$on_until_post.$$p = null;
          return $send(self, 'on_loop', [node], function $$6(){var self = $$6.$$s == null ? this : $$6.$$s;

            return $send2(self, $find_block_super(self, 'on_until_post', ($$6.$$def || $$on_until_post), false, true), 'on_until_post', [node], $yield)}, {$$s: self})
        });
        
        $def(self, '$on_defined', function $$on_defined(node) {
          var $yield = $$on_defined.$$p || nil, self = this;

          $$on_defined.$$p = null;
          return $send(self, 'pushing', [[self.redo_stack, nil], [self.break_stack, nil], [self.retry_stack, nil]], function $$7(){var self = $$7.$$s == null ? this : $$7.$$s;

            return $send2(self, $find_block_super(self, 'on_defined', ($$7.$$def || $$on_defined), false, true), 'on_defined', [node], $yield)}, {$$s: self})
        });
        
        $def(self, '$on_ensure', function $$on_ensure(node) {
          var $yield = $$on_ensure.$$p || nil, self = this;

          $$on_ensure.$$p = null;
          return $send(self, 'pushing', [[self.rescue_else_stack, node]], function $$8(){var self = $$8.$$s == null ? this : $$8.$$s;

            return $send2(self, $find_block_super(self, 'on_ensure', ($$8.$$def || $$on_ensure), false, true), 'on_ensure', [node], $yield)}, {$$s: self})
        });
        
        $def(self, '$on_rescue', function $$on_rescue(node) {
          var $yield = $$on_rescue.$$p || nil, self = this;

          $$on_rescue.$$p = null;
          
          if ($truthy($send(node.$children()['$[]']($range(1, -1, false)), 'detect', [], function $$9(sexp){var $ret_or_1 = nil;

            
            if (sexp == null) sexp = nil;
            if ($truthy(($ret_or_1 = sexp))) {
              return sexp.$type()['$!=']("resbody")
            } else {
              return $ret_or_1
            };}))) {
            self.$tracking("rescue_else", self.rescue_else_stack)
          };
          return $send(self, 'pushing', [[self.rescue_else_stack, nil], [self.retry_stack, node]], function $$10(){var self = $$10.$$s == null ? this : $$10.$$s;

            return $send2(self, $find_block_super(self, 'on_rescue', ($$10.$$def || $$on_rescue), false, true), 'on_rescue', [node], $yield)}, {$$s: self});
        });
        self.$private();
        
        $def(self, '$pushing', function $$pushing($a) {
          var $post_args, stacks, $yield = $$pushing.$$p || nil, result = nil;

          $$pushing.$$p = null;
          
          $post_args = $slice(arguments);
          stacks = $post_args;
          $send(stacks, 'each', [], function $$11(stack, node){
            
            if (stack == null) stack = nil;
            if (node == null) node = nil;
            return stack.$push(node);});
          result = Opal.yieldX($yield, []);
          $send($send(stacks, 'map', [], "first".$to_proc()), 'each', [], "pop".$to_proc());
          return result;
        }, -1);
        return $def(self, '$tracking', function $$tracking(breaker, stack) {
          var $a;

          if ($truthy(stack.$last())) {
            return ($a = ["has_" + (breaker), true], $send(stack.$last().$meta(), '[]=', $a), $a[$a.length - 1])
          } else {
            return nil
          }
        });
      })($nesting[0], $$$($$$($$('Opal'), 'Rewriters'), 'Base'))
    })($nesting[0], $nesting)
  })($nesting[0], $nesting)
});

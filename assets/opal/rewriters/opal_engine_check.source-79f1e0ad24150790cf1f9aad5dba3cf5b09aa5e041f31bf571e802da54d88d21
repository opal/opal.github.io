Opal.queue(function(Opal) {/* Generated by Opal 1.8.2 */
  var $module = Opal.module, $klass = Opal.klass, $to_a = Opal.to_a, $truthy = Opal.truthy, $send2 = Opal.send2, $find_super = Opal.find_super, $def = Opal.def, $const_set = Opal.const_set, self = Opal.top, $nesting = [], nil = Opal.nil;

  Opal.add_stubs('require,children,skip_check_present?,process,s,skip_check_present_not?,==');
  
  self.$require("opal/rewriters/base");
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Opal');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $parent_nesting) {
      var self = $module($base, 'Rewriters');

      var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting);

      return (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'OpalEngineCheck');

        var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting);

        
        
        $def(self, '$on_if', function $$on_if(node) {
          var $a, $yield = $$on_if.$$p || nil, self = this, test = nil, true_body = nil, false_body = nil, $ret_or_1 = nil;

          $$on_if.$$p = null;
          
          $a = [].concat($to_a(node.$children())), (test = ($a[0] == null ? nil : $a[0])), (true_body = ($a[1] == null ? nil : $a[1])), (false_body = ($a[2] == null ? nil : $a[2])), $a;
          if ($truthy(self['$skip_check_present?'](test))) {
            return self.$process(($truthy(($ret_or_1 = true_body)) ? ($ret_or_1) : (self.$s("nil"))))
          } else if ($truthy(self['$skip_check_present_not?'](test))) {
            return self.$process(($truthy(($ret_or_1 = false_body)) ? ($ret_or_1) : (self.$s("nil"))))
          } else {
            return $send2(self, $find_super(self, 'on_if', $$on_if, false, true), 'on_if', [node], $yield)
          };
        });
        
        $def(self, '$skip_check_present?', function $OpalEngineCheck_skip_check_present$ques$1(test) {
          var $ret_or_1 = nil;

          if ($truthy(($ret_or_1 = test['$==']($$('RUBY_ENGINE_CHECK'))))) {
            return $ret_or_1
          } else {
            return test['$==']($$('RUBY_PLATFORM_CHECK'))
          }
        });
        
        $def(self, '$skip_check_present_not?', function $OpalEngineCheck_skip_check_present_not$ques$2(test) {
          var $ret_or_1 = nil;

          if ($truthy(($ret_or_1 = test['$==']($$('RUBY_ENGINE_CHECK_NOT'))))) {
            return $ret_or_1
          } else {
            return test['$==']($$('RUBY_PLATFORM_CHECK_NOT'))
          }
        });
        $const_set($nesting[0], 'RUBY_ENGINE_CHECK', self.$s("send", self.$s("const", nil, "RUBY_ENGINE"), "==", self.$s("str", "opal")));
        $const_set($nesting[0], 'RUBY_ENGINE_CHECK_NOT', self.$s("send", self.$s("const", nil, "RUBY_ENGINE"), "!=", self.$s("str", "opal")));
        $const_set($nesting[0], 'RUBY_PLATFORM_CHECK', self.$s("send", self.$s("const", nil, "RUBY_PLATFORM"), "==", self.$s("str", "opal")));
        return $const_set($nesting[0], 'RUBY_PLATFORM_CHECK_NOT', self.$s("send", self.$s("const", nil, "RUBY_PLATFORM"), "!=", self.$s("str", "opal")));
      })($nesting[0], $$('Base'), $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting);
});

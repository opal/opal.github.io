Opal.queue(function(Opal) {/* Generated by Opal 1.8.1 */
  var $module = Opal.module, $klass = Opal.klass, $send2 = Opal.send2, $find_super = Opal.find_super, $to_a = Opal.to_a, $truthy = Opal.truthy, $def = Opal.def, $const_set = Opal.const_set, $ensure_kwargs = Opal.ensure_kwargs, $get_kwarg = Opal.get_kwarg, $send = Opal.send, $eqeq = Opal.eqeq, $Opal = Opal.Opal, self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$;

  Opal.add_stubs('require,s,new,updated,inline,prepend_to_body,initialization,attr_reader,freeze,children,each,send,any?,blockarg,<<,shadowargs,args,==,has_post_args?,length,has_any_kwargs?,can_inline_kwargs?,kwargs,kwoptargs,kwrestarg,postargs,optargs,args_to_keep,restarg,[]');
  
  self.$require("opal/rewriters/base");
  self.$require("opal/rewriters/arguments");
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Opal');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $parent_nesting) {
      var self = $module($base, 'Rewriters');

      var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting);

      return (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'InlineArgs');

        var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting);

        
        
        $def(self, '$on_def', function $$on_def(node) {
          var $a, $yield = $$on_def.$$p || nil, self = this, mid = nil, args = nil, body = nil, $ret_or_1 = nil, initializer = nil, inline_args = nil;

          $$on_def.$$p = null;
          
          node = $send2(self, $find_super(self, 'on_def', $$on_def, false, true), 'on_def', [node], null);
          $a = [].concat($to_a(node)), (mid = ($a[0] == null ? nil : $a[0])), (args = ($a[1] == null ? nil : $a[1])), (body = ($a[2] == null ? nil : $a[2])), $a;
          body = ($truthy(($ret_or_1 = body)) ? ($ret_or_1) : (self.$s("nil")));
          initializer = $$('Initializer').$new(args, (new Map([["type", "def"]])));
          inline_args = args.$updated(nil, initializer.$inline());
          body = self.$prepend_to_body(body, initializer.$initialization());
          return node.$updated(nil, [mid, inline_args, body]);
        });
        
        $def(self, '$on_defs', function $$on_defs(node) {
          var $a, $yield = $$on_defs.$$p || nil, self = this, recv = nil, mid = nil, args = nil, body = nil, $ret_or_1 = nil, initializer = nil, inline_args = nil;

          $$on_defs.$$p = null;
          
          node = $send2(self, $find_super(self, 'on_defs', $$on_defs, false, true), 'on_defs', [node], null);
          $a = [].concat($to_a(node)), (recv = ($a[0] == null ? nil : $a[0])), (mid = ($a[1] == null ? nil : $a[1])), (args = ($a[2] == null ? nil : $a[2])), (body = ($a[3] == null ? nil : $a[3])), $a;
          body = ($truthy(($ret_or_1 = body)) ? ($ret_or_1) : (self.$s("nil")));
          initializer = $$('Initializer').$new(args, (new Map([["type", "defs"]])));
          inline_args = args.$updated(nil, initializer.$inline());
          body = self.$prepend_to_body(body, initializer.$initialization());
          return node.$updated(nil, [recv, mid, inline_args, body]);
        });
        
        $def(self, '$on_iter', function $$on_iter(node) {
          var $a, $yield = $$on_iter.$$p || nil, self = this, args = nil, body = nil, $ret_or_1 = nil, initializer = nil, inline_args = nil;

          $$on_iter.$$p = null;
          
          node = $send2(self, $find_super(self, 'on_iter', $$on_iter, false, true), 'on_iter', [node], null);
          $a = [].concat($to_a(node)), (args = ($a[0] == null ? nil : $a[0])), (body = ($a[1] == null ? nil : $a[1])), $a;
          body = ($truthy(($ret_or_1 = body)) ? ($ret_or_1) : (self.$s("nil")));
          initializer = $$('Initializer').$new(args, (new Map([["type", "iter"]])));
          inline_args = args.$updated(nil, initializer.$inline());
          body = self.$prepend_to_body(body, initializer.$initialization());
          return node.$updated(nil, [inline_args, body]);
        });
        return (function($base, $super, $parent_nesting) {
          var self = $klass($base, $super, 'Initializer');

          var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting), $proto = self.$$prototype;

          $proto.initialization = $proto.args = $proto.inline = nil;
          
          self.$attr_reader("inline", "initialization");
          $const_set($nesting[0], 'STEPS', ["extract_blockarg", "initialize_shadowargs", "extract_args", "prepare_post_args", "prepare_kwargs", "extract_optargs", "extract_restarg", "extract_post_args", "extract_kwargs", "extract_kwoptargs", "extract_kwrestarg"].$freeze());
          
          $def(self, '$initialize', function $$initialize(args, $kwargs) {
            var type, self = this;

            
            $kwargs = $ensure_kwargs($kwargs);
            type = $get_kwarg($kwargs, "type");
            self.args = $$('Arguments').$new(args.$children());
            self.inline = [];
            self.initialization = [];
            self.type = type;
            $send($$('STEPS'), 'each', [], function $$1(step){var self = $$1.$$s == null ? this : $$1.$$s;

              
              if (step == null) step = nil;
              return self.$send(step);}, {$$s: self});
            if ($truthy(self.initialization['$any?']())) {
              return (self.initialization = $send(self, 's', ["begin"].concat($to_a(self.initialization))))
            } else {
              return (self.initialization = nil)
            };
          });
          
          $def(self, '$extract_blockarg', function $$extract_blockarg() {
            var self = this, arg = nil;

            if ($truthy((arg = self.args.$blockarg()))) {
              return self.initialization['$<<'](arg.$updated("extract_blockarg"))
            } else {
              return nil
            }
          });
          
          $def(self, '$initialize_shadowargs', function $$initialize_shadowargs() {
            var self = this;

            return $send(self.args.$shadowargs(), 'each', [], function $$2(arg){var self = $$2.$$s == null ? this : $$2.$$s;
              if (self.initialization == null) self.initialization = nil;

              
              if (arg == null) arg = nil;
              return self.initialization['$<<'](arg.$updated("initialize_shadowarg"));}, {$$s: self})
          });
          
          $def(self, '$extract_args', function $$extract_args() {
            var self = this;

            return $send(self.args.$args(), 'each', [], function $$3(arg){var self = $$3.$$s == null ? this : $$3.$$s;
              if (self.type == null) self.type = nil;
              if (self.initialization == null) self.initialization = nil;
              if (self.inline == null) self.inline = nil;

              
              if (arg == null) arg = nil;
              if ($eqeq(self.type, "iter")) {
                self.initialization['$<<'](arg.$updated("initialize_iter_arg"))
              };
              return self.inline['$<<'](arg);}, {$$s: self})
          });
          
          $def(self, '$prepare_post_args', function $$prepare_post_args() {
            var self = this;

            if ($truthy(self.args['$has_post_args?']())) {
              return self.initialization['$<<'](self.$s("prepare_post_args", self.args.$args().$length()))
            } else {
              return nil
            }
          });
          
          $def(self, '$prepare_kwargs', function $$prepare_kwargs() {
            var self = this;

            
            if (!$truthy(self.args['$has_any_kwargs?']())) {
              return nil
            };
            if ($truthy(self.args['$can_inline_kwargs?']())) {
              self.inline['$<<'](self.$s("arg", "$kwargs"))
            } else {
              
              self.initialization['$<<'](self.$s("extract_kwargs"));
              self.inline['$<<'](self.$s("fake_arg"));
            };
            return self.initialization['$<<'](self.$s("ensure_kwargs_are_kwargs"));
          });
          
          $def(self, '$extract_kwargs', function $$extract_kwargs() {
            var self = this;

            return $send(self.args.$kwargs(), 'each', [], function $$4(arg){var self = $$4.$$s == null ? this : $$4.$$s;
              if (self.initialization == null) self.initialization = nil;

              
              if (arg == null) arg = nil;
              return self.initialization['$<<'](arg.$updated("extract_kwarg"));}, {$$s: self})
          });
          
          $def(self, '$extract_kwoptargs', function $$extract_kwoptargs() {
            var self = this;

            return $send(self.args.$kwoptargs(), 'each', [], function $$5(arg){var self = $$5.$$s == null ? this : $$5.$$s;
              if (self.initialization == null) self.initialization = nil;

              
              if (arg == null) arg = nil;
              return self.initialization['$<<'](arg.$updated("extract_kwoptarg"));}, {$$s: self})
          });
          
          $def(self, '$extract_kwrestarg', function $$extract_kwrestarg() {
            var self = this, arg = nil;

            if ($truthy((arg = self.args.$kwrestarg()))) {
              return self.initialization['$<<'](arg.$updated("extract_kwrestarg"))
            } else {
              return nil
            }
          });
          
          $def(self, '$extract_post_args', function $$extract_post_args() {
            var self = this;

            return $send(self.args.$postargs(), 'each', [], function $$6(arg){var self = $$6.$$s == null ? this : $$6.$$s;
              if (self.initialization == null) self.initialization = nil;
              if (self.inline == null) self.inline = nil;

              
              if (arg == null) arg = nil;
              self.initialization['$<<'](arg.$updated("extract_post_arg"));
              return self.inline['$<<'](self.$s("fake_arg"));}, {$$s: self})
          });
          
          $def(self, '$extract_optargs', function $$extract_optargs() {
            var self = this, has_post_args = nil;

            
            has_post_args = self.args['$has_post_args?']();
            return $send(self.args.$optargs(), 'each', [], function $$7(arg){var $a, self = $$7.$$s == null ? this : $$7.$$s, arg_name = nil, default_value = nil;
              if (self.initialization == null) self.initialization = nil;
              if (self.inline == null) self.inline = nil;

              
              if (arg == null) arg = nil;
              if ($truthy(has_post_args)) {
                
                $a = [].concat($to_a(arg)), (arg_name = ($a[0] == null ? nil : $a[0])), (default_value = ($a[1] == null ? nil : $a[1])), $a;
                self.initialization['$<<'](arg.$updated("extract_post_optarg", [arg_name, default_value, self.$args_to_keep()]));
                return self.inline['$<<'](self.$s("fake_arg"));
              } else {
                
                self.inline['$<<'](arg.$updated("arg"));
                return self.initialization['$<<'](arg.$updated("extract_optarg"));
              };}, {$$s: self});
          });
          
          $def(self, '$extract_restarg', function $$extract_restarg() {
            var self = this, arg = nil, arg_name = nil;

            if ($truthy((arg = self.args.$restarg()))) {
              
              arg_name = arg.$children()['$[]'](0);
              self.initialization['$<<'](arg.$updated("extract_restarg", [arg_name, self.$args_to_keep()]));
              return self.inline['$<<'](self.$s("fake_arg"));
            } else {
              return nil
            }
          });
          return $def(self, '$args_to_keep', function $$args_to_keep() {
            var self = this;

            return self.args.$postargs().$length()
          });
        })($nesting[0], $$$($$$($Opal, 'Rewriters'), 'Base'), $nesting);
      })($nesting[0], $$('Base'), $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting);
});

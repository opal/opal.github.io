Opal.queue(function(Opal) {/* Generated by Opal 1.8.2 */
  var $module = Opal.module, $klass = Opal.klass, $send = Opal.send, $send2 = Opal.send2, $find_super = Opal.find_super, $def = Opal.def, $truthy = Opal.truthy, $to_ary = Opal.to_ary, $rb_plus = Opal.rb_plus, $rb_gt = Opal.rb_gt, $nesting = [], nil = Opal.nil;

  Opal.add_stubs('new,map,children,rename_arg,updated,type,[],unique_name,[]=,+,>');
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Opal');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $parent_nesting) {
      var self = $module($base, 'Rewriters');

      var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting);

      return (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'DeduplicateArgName');

        var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting), $proto = self.$$prototype;

        $proto.arg_name_count = nil;
        
        
        $def(self, '$on_args', function $$on_args(node) {
          var $yield = $$on_args.$$p || nil, self = this, children = nil;

          $$on_args.$$p = null;
          
          self.arg_name_count = $$('Hash').$new(0);
          children = $send(node.$children(), 'map', [], function $$1(arg){var self = $$1.$$s == null ? this : $$1.$$s;

            
            if (arg == null) arg = nil;
            return self.$rename_arg(arg);}, {$$s: self});
          return $send2(self, $find_super(self, 'on_args', $$on_args, false, true), 'on_args', [node.$updated(nil, children)], null);
        });
        
        $def(self, '$rename_arg', function $$rename_arg(arg) {
          var $a, $b, self = this, name = nil, value = nil, new_children = nil;

          
          switch (arg.$type().valueOf()) {
            case "arg":
            case "restarg":
            case "kwarg":
            case "kwrestarg":
            case "blockarg":
              
              name = arg.$children()['$[]'](0);
              if ($truthy(name)) {
                return arg.$updated(nil, [self.$unique_name(name)])
              } else {
                return arg
              };
              break;
            case "optarg":
            case "kwoptarg":
              
              $b = arg.$children(), $a = $to_ary($b), (name = ($a[0] == null ? nil : $a[0])), (value = ($a[1] == null ? nil : $a[1])), $b;
              return arg.$updated(nil, [self.$unique_name(name), value]);
            case "mlhs":
              
              new_children = $send(arg.$children(), 'map', [], function $$2(child){var self = $$2.$$s == null ? this : $$2.$$s;

                
                if (child == null) child = nil;
                return self.$rename_arg(child);}, {$$s: self});
              return arg.$updated(nil, new_children);
            default:
              return arg
          }
        });
        return $def(self, '$unique_name', function $$unique_name(name) {
          var $a, self = this, count = nil;

          
          count = ($a = [name, $rb_plus(self.arg_name_count['$[]'](name), 1)], $send(self.arg_name_count, '[]=', $a), $a[$a.length - 1]);
          if ($truthy($rb_gt(count, 1))) {
            return "" + (name) + "_$" + (count)
          } else {
            return name
          };
        });
      })($nesting[0], $$('Base'), $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting)
});

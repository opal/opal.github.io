Opal.queue(function(Opal) {/* Generated by Opal 1.8.1 */
  var $module = Opal.module, $klass = Opal.klass, $def = Opal.def, $send2 = Opal.send2, $find_super = Opal.find_super, $to_a = Opal.to_a, $truthy = Opal.truthy, $eqeq = Opal.eqeq, $Opal = Opal.Opal, self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$;

  Opal.add_stubs('require,new,include?,type,<<,==,process_regular_node,updated,inspect,warn');
  
  self.$require("opal/rewriters/base");
  self.$require("set");
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Opal');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $parent_nesting) {
      var self = $module($base, 'Rewriters');

      var $nesting = [self].concat($parent_nesting);

      return (function($base, $parent_nesting) {
        var self = $module($base, 'Hashes');

        var $nesting = [self].concat($parent_nesting);

        return (function($base, $super, $parent_nesting) {
          var self = $klass($base, $super, 'KeyDuplicatesRewriter');

          var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting), $proto = self.$$prototype;

          $proto.keys = nil;
          
          
          $def(self, '$initialize', function $$initialize() {
            var self = this;

            return (self.keys = $$('UniqKeysSet').$new())
          });
          
          $def(self, '$on_hash', function $$on_hash(node) {
            var $a, $yield = $$on_hash.$$p || nil, self = this, previous_keys = nil;

            $$on_hash.$$p = null;
            return (function() { try {
            
            $a = [self.keys, $$('UniqKeysSet').$new()], (previous_keys = $a[0]), (self.keys = $a[1]), $a;
            return $send2(self, $find_super(self, 'on_hash', $$on_hash, false, true), 'on_hash', [node], null);
            } finally {
              (self.keys = previous_keys)
            }; })()
          });
          
          $def(self, '$on_pair', function $$on_pair(node) {
            var $a, $yield = $$on_pair.$$p || nil, self = this, key = nil, _value = nil;

            $$on_pair.$$p = null;
            
            $a = [].concat($to_a(node)), (key = ($a[0] == null ? nil : $a[0])), (_value = ($a[1] == null ? nil : $a[1])), $a;
            if ($truthy(["str", "sym"]['$include?'](key.$type()))) {
              self.keys['$<<'](key)
            };
            return $send2(self, $find_super(self, 'on_pair', $$on_pair, false, true), 'on_pair', [node], null);
          });
          
          $def(self, '$on_kwsplat', function $$on_kwsplat(node) {
            var $a, self = this, hash = nil, _ = nil;

            
            $a = [].concat($to_a(node)), (hash = ($a[0] == null ? nil : $a[0])), (_ = ($a[1] == null ? nil : $a[1])), $a;
            if ($eqeq(hash.$type(), "hash")) {
              hash = self.$process_regular_node(hash)
            };
            return node.$updated(nil, [hash]);
          });
          return (function($base, $super, $parent_nesting) {
            var self = $klass($base, $super, 'UniqKeysSet');

            var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting), $proto = self.$$prototype;

            $proto.set = nil;
            
            
            $def(self, '$initialize', function $$initialize() {
              var self = this;

              return (self.set = $$('Set').$new())
            });
            return $def(self, '$<<', function $UniqKeysSet_$lt$lt$1(element) {
              var $a, self = this, key = nil, _ = nil;

              if ($truthy(self.set['$include?'](element))) {
                
                $a = [].concat($to_a(element)), (key = ($a[0] == null ? nil : $a[0])), (_ = ($a[1] == null ? nil : $a[1])), $a;
                key = ($eqeq(element.$type(), "str") ? (key.$inspect()) : (":" + (key)));
                return $$('Kernel').$warn("warning: key " + (key) + " is duplicated and overwritten");
              } else {
                return self.set['$<<'](element)
              }
            });
          })($nesting[0], null, $nesting);
        })($nesting[0], $$$($$$($Opal, 'Rewriters'), 'Base'), $nesting)
      })($nesting[0], $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting);
});

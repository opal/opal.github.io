Opal.queue(function(Opal) {/* Generated by Opal 1.8.2 */
  var $module = Opal.module, $klass = Opal.klass, $send = Opal.send, $truthy = Opal.truthy, $def = Opal.def, $nesting = [], nil = Opal.nil;

  Opal.add_stubs('attr_reader,each,type,<<,any?,raise,!,nil?,has_any_kwargs?,can_inline_kwargs?,empty?');
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Opal');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $parent_nesting) {
      var self = $module($base, 'Rewriters');

      var $nesting = [self].concat($parent_nesting);

      return (function($base, $super) {
        var self = $klass($base, $super, 'Arguments');

        var $proto = self.$$prototype;

        $proto.restarg = $proto.postargs = $proto.kwargs = $proto.kwoptargs = $proto.kwrestarg = $proto.optargs = nil;
        
        self.$attr_reader("args", "optargs", "restarg", "postargs", "kwargs", "kwoptargs", "kwrestarg", "kwnilarg", "shadowargs", "blockarg");
        
        $def(self, '$initialize', function $$initialize(args) {
          var self = this;

          
          self.args = [];
          self.optargs = [];
          self.restarg = nil;
          self.postargs = [];
          self.kwargs = [];
          self.kwoptargs = [];
          self.kwrestarg = nil;
          self.kwnilarg = false;
          self.shadowargs = [];
          self.blockarg = nil;
          return $send(args, 'each', [], function $$1(arg){var self = $$1.$$s == null ? this : $$1.$$s;
            if (self.optargs == null) self.optargs = nil;
            if (self.restarg == null) self.restarg = nil;
            if (self.postargs == null) self.postargs = nil;
            if (self.args == null) self.args = nil;
            if (self.kwargs == null) self.kwargs = nil;
            if (self.kwoptargs == null) self.kwoptargs = nil;
            if (self.shadowargs == null) self.shadowargs = nil;

            
            if (arg == null) arg = nil;
            
            switch (arg.$type().valueOf()) {
              case "arg":
              case "mlhs":
                return (($truthy(self.restarg) || ($truthy(self.optargs['$any?']()))) ? (self.postargs) : (self.args))['$<<'](arg)
              case "optarg":
                return self.optargs['$<<'](arg)
              case "restarg":
                return (self.restarg = arg)
              case "kwarg":
                return self.kwargs['$<<'](arg)
              case "kwoptarg":
                return self.kwoptargs['$<<'](arg)
              case "kwnilarg":
                return (self.kwnilarg = true)
              case "kwrestarg":
                return (self.kwrestarg = arg)
              case "shadowarg":
                return self.shadowargs['$<<'](arg)
              case "blockarg":
                return (self.blockarg = arg)
              default:
                return self.$raise("Unsupported arg type " + (arg.$type()))
            };}, {$$s: self});
        });
        
        $def(self, '$has_post_args?', function $Arguments_has_post_args$ques$2() {
          var self = this, $ret_or_1 = nil, $ret_or_2 = nil;

          if ($truthy(($ret_or_1 = ($truthy(($ret_or_2 = self.restarg['$nil?']()['$!']())) ? ($ret_or_2) : (self.postargs['$any?']()))))) {
            return $ret_or_1
          } else {
            
            if ($truthy(($ret_or_2 = self['$has_any_kwargs?']()))) {
              return self['$can_inline_kwargs?']()['$!']()
            } else {
              return $ret_or_2
            };
          }
        });
        
        $def(self, '$has_any_kwargs?', function $Arguments_has_any_kwargs$ques$3() {
          var self = this, $ret_or_1 = nil, $ret_or_2 = nil;

          if ($truthy(($ret_or_1 = ($truthy(($ret_or_2 = self.kwargs['$any?']())) ? ($ret_or_2) : (self.kwoptargs['$any?']()))))) {
            return $ret_or_1
          } else {
            return self.kwrestarg['$nil?']()['$!']()
          }
        });
        return $def(self, '$can_inline_kwargs?', function $Arguments_can_inline_kwargs$ques$4() {
          var self = this, $ret_or_1 = nil, $ret_or_2 = nil;

          if ($truthy(($ret_or_1 = ($truthy(($ret_or_2 = self.optargs['$empty?']())) ? (self.restarg['$nil?']()) : ($ret_or_2))))) {
            return self.postargs['$empty?']()
          } else {
            return $ret_or_1
          }
        });
      })($nesting[0], null)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting)
});

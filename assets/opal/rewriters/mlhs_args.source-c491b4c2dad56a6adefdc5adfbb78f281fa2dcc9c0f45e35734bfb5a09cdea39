Opal.queue(function(Opal) {/* Generated by Opal 1.8.2 */
  var $module = Opal.module, $klass = Opal.klass, $send2 = Opal.send2, $find_super = Opal.find_super, $to_a = Opal.to_a, $truthy = Opal.truthy, $def = Opal.def, $assign_ivar_val = Opal.assign_ivar_val, $rb_plus = Opal.rb_plus, $send = Opal.send, $eqeq = Opal.eqeq, self = Opal.top, $nesting = [], nil = Opal.nil;

  Opal.add_stubs('require,new,updated,rewritten,initialization,s,prepend_to_body,attr_reader,split!,+,each,children,==,type,new_mlhs_tmp,process,<<,length,[],empty?');
  
  self.$require("opal/rewriters/base");
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Opal');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $parent_nesting) {
      var self = $module($base, 'Rewriters');

      var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting);

      return (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'MlhsArgs');

        var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting);

        
        
        $def(self, '$on_def', function $$on_def(node) {
          var $a, $yield = $$on_def.$$p || nil, self = this, mid = nil, args = nil, body = nil, arguments$ = nil, $ret_or_1 = nil;

          $$on_def.$$p = null;
          
          node = $send2(self, $find_super(self, 'on_def', $$on_def, false, true), 'on_def', [node], null);
          $a = [].concat($to_a(node)), (mid = ($a[0] == null ? nil : $a[0])), (args = ($a[1] == null ? nil : $a[1])), (body = ($a[2] == null ? nil : $a[2])), $a;
          arguments$ = $$('Arguments').$new(args);
          args = args.$updated(nil, arguments$.$rewritten());
          if ($truthy(arguments$.$initialization())) {
            
            body = ($truthy(($ret_or_1 = body)) ? ($ret_or_1) : (self.$s("nil")));
            body = self.$prepend_to_body(body, arguments$.$initialization());
          };
          return node.$updated(nil, [mid, args, body]);
        });
        
        $def(self, '$on_defs', function $$on_defs(node) {
          var $a, $yield = $$on_defs.$$p || nil, self = this, recv = nil, mid = nil, args = nil, body = nil, arguments$ = nil, $ret_or_1 = nil;

          $$on_defs.$$p = null;
          
          node = $send2(self, $find_super(self, 'on_defs', $$on_defs, false, true), 'on_defs', [node], null);
          $a = [].concat($to_a(node)), (recv = ($a[0] == null ? nil : $a[0])), (mid = ($a[1] == null ? nil : $a[1])), (args = ($a[2] == null ? nil : $a[2])), (body = ($a[3] == null ? nil : $a[3])), $a;
          arguments$ = $$('Arguments').$new(args);
          args = args.$updated(nil, arguments$.$rewritten());
          if ($truthy(arguments$.$initialization())) {
            
            body = ($truthy(($ret_or_1 = body)) ? ($ret_or_1) : (self.$s("nil")));
            body = self.$prepend_to_body(body, arguments$.$initialization());
          };
          return node.$updated(nil, [recv, mid, args, body]);
        });
        
        $def(self, '$on_iter', function $$on_iter(node) {
          var $a, $yield = $$on_iter.$$p || nil, self = this, args = nil, body = nil, arguments$ = nil, $ret_or_1 = nil;

          $$on_iter.$$p = null;
          
          node = $send2(self, $find_super(self, 'on_iter', $$on_iter, false, true), 'on_iter', [node], null);
          $a = [].concat($to_a(node)), (args = ($a[0] == null ? nil : $a[0])), (body = ($a[1] == null ? nil : $a[1])), $a;
          arguments$ = $$('Arguments').$new(args);
          args = args.$updated(nil, arguments$.$rewritten());
          if ($truthy(arguments$.$initialization())) {
            
            body = ($truthy(($ret_or_1 = body)) ? ($ret_or_1) : (self.$s("nil")));
            body = self.$prepend_to_body(body, arguments$.$initialization());
          };
          return node.$updated(nil, [args, body]);
        });
        (function($base, $super, $parent_nesting) {
          var self = $klass($base, $super, 'Arguments');

          var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting), $proto = self.$$prototype;

          $proto.counter = $proto.args = $proto.initialization = nil;
          
          self.$attr_reader("rewritten", "initialization");
          
          $def(self, '$initialize', function $$initialize(args) {
            var self = this;

            
            self.args = args;
            self.rewritten = [];
            self.initialization = [];
            self.rewriter = $$('MlhsRewriter').$new();
            return self['$split!']();
          });
          
          $def(self, '$reset_tmp_counter!', $assign_ivar_val("counter", 0));
          
          $def(self, '$new_mlhs_tmp', function $$new_mlhs_tmp() {
            var self = this, $ret_or_1 = nil;

            
            self.counter = ($truthy(($ret_or_1 = self.counter)) ? ($ret_or_1) : (0));
            self.counter = $rb_plus(self.counter, 1);
            return "$mlhs_tmp" + (self.counter);
          });
          return $def(self, '$split!', function $Arguments_split$excl$1() {
            var self = this;

            
            $send(self.args.$children(), 'each', [], function $$2(arg){var self = $$2.$$s == null ? this : $$2.$$s, var_name = nil, rhs = nil, mlhs = nil;
              if (self.rewriter == null) self.rewriter = nil;
              if (self.initialization == null) self.initialization = nil;
              if (self.rewritten == null) self.rewritten = nil;

              
              if (arg == null) arg = nil;
              if ($eqeq(arg.$type(), "mlhs")) {
                
                var_name = self.$new_mlhs_tmp();
                rhs = self.$s("lvar", var_name);
                mlhs = self.rewriter.$process(arg);
                self.initialization['$<<'](self.$s("masgn", mlhs, rhs));
                return self.rewritten['$<<'](self.$s("arg", var_name).$updated(nil, nil, (new Map([["meta", (new Map([["arg_name", var_name]]))]]))));
              } else {
                return self.rewritten['$<<'](arg)
              };}, {$$s: self});
            if ($eqeq(self.initialization.$length(), 1)) {
              return (self.initialization = self.initialization['$[]'](0))
            } else if ($truthy(self.initialization['$empty?']())) {
              return (self.initialization = nil)
            } else {
              return (self.initialization = $send(self, 's', ["begin"].concat($to_a(self.initialization))))
            };
          });
        })($nesting[0], $$('Base'), $nesting);
        return (function($base, $super) {
          var self = $klass($base, $super, 'MlhsRewriter');

          
          
          
          $def(self, '$on_arg', function $$on_arg(node) {
            
            return node.$updated("lvasgn")
          });
          return $def(self, '$on_restarg', function $$on_restarg(node) {
            var self = this, name = nil;

            
            name = node.$children()['$[]'](0);
            if ($truthy(name)) {
              return self.$s("splat", node.$updated("lvasgn"))
            } else {
              return self.$s("splat")
            };
          });
        })($nesting[0], $$('Base'));
      })($nesting[0], $$('Base'), $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting);
});

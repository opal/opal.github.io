Opal.queue(function(Opal) {/* Generated by Opal 1.8.2 */
  var $module = Opal.module, $klass = Opal.klass, $send2 = Opal.send2, $find_super = Opal.find_super, $to_a = Opal.to_a, $def = Opal.def, self = Opal.top, $nesting = [], nil = Opal.nil;

  Opal.add_stubs('require,updated');
  
  self.$require("opal/rewriters/base");
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Opal');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $parent_nesting) {
      var self = $module($base, 'Rewriters');

      var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting);

      return (function($base, $super) {
        var self = $klass($base, $super, 'DumpArgs');

        
        
        
        $def(self, '$on_def', function $$on_def(node) {
          var $a, $yield = $$on_def.$$p || nil, self = this, _mid = nil, args = nil, _body = nil;

          $$on_def.$$p = null;
          
          node = $send2(self, $find_super(self, 'on_def', $$on_def, false, true), 'on_def', [node], null);
          $a = [].concat($to_a(node)), (_mid = ($a[0] == null ? nil : $a[0])), (args = ($a[1] == null ? nil : $a[1])), (_body = ($a[2] == null ? nil : $a[2])), $a;
          return node.$updated(nil, nil, (new Map([["meta", (new Map([["original_args", args]]))]])));
        });
        
        $def(self, '$on_defs', function $$on_defs(node) {
          var $a, $yield = $$on_defs.$$p || nil, self = this, _recv = nil, _mid = nil, args = nil, _body = nil;

          $$on_defs.$$p = null;
          
          node = $send2(self, $find_super(self, 'on_defs', $$on_defs, false, true), 'on_defs', [node], null);
          $a = [].concat($to_a(node)), (_recv = ($a[0] == null ? nil : $a[0])), (_mid = ($a[1] == null ? nil : $a[1])), (args = ($a[2] == null ? nil : $a[2])), (_body = ($a[3] == null ? nil : $a[3])), $a;
          return node.$updated(nil, nil, (new Map([["meta", (new Map([["original_args", args]]))]])));
        });
        return $def(self, '$on_iter', function $$on_iter(node) {
          var $a, $yield = $$on_iter.$$p || nil, self = this, args = nil, _body = nil;

          $$on_iter.$$p = null;
          
          node = $send2(self, $find_super(self, 'on_iter', $$on_iter, false, true), 'on_iter', [node], null);
          $a = [].concat($to_a(node)), (args = ($a[0] == null ? nil : $a[0])), (_body = ($a[1] == null ? nil : $a[1])), $a;
          return node.$updated(nil, nil, (new Map([["meta", (new Map([["original_args", args]]))]])));
        });
      })($nesting[0], $$('Base'))
    })($nesting[0], $nesting)
  })($nesting[0], $nesting);
});

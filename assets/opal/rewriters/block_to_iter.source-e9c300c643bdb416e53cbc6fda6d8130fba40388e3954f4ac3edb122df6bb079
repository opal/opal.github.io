Opal.queue(function(Opal) {/* Generated by Opal 1.8.2 */
  var $module = Opal.module, $klass = Opal.klass, $to_a = Opal.to_a, $rb_plus = Opal.rb_plus, $def = Opal.def, self = Opal.top, $nesting = [], nil = Opal.nil;

  Opal.add_stubs('require,s,process,updated,+,children');
  
  self.$require("opal/rewriters/base");
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Opal');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $parent_nesting) {
      var self = $module($base, 'Rewriters');

      var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting);

      return (function($base, $super) {
        var self = $klass($base, $super, 'BlockToIter');

        
        return $def(self, '$on_block', function $$on_block(node) {
          var $a, self = this, recvr = nil, args = nil, body = nil, iter_node = nil;

          
          $a = [].concat($to_a(node)), (recvr = ($a[0] == null ? nil : $a[0])), (args = ($a[1] == null ? nil : $a[1])), (body = ($a[2] == null ? nil : $a[2])), $a;
          iter_node = self.$s("iter", args, body);
          return self.$process(recvr.$updated(nil, $rb_plus(recvr.$children(), [iter_node])));
        })
      })($nesting[0], $$('Base'))
    })($nesting[0], $nesting)
  })($nesting[0], $nesting);
});

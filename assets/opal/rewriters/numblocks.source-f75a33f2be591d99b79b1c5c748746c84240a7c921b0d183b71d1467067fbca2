Opal.queue(function(Opal) {/* Generated by Opal 1.8.1 */
  var $module = Opal.module, $klass = Opal.klass, $to_ary = Opal.to_ary, $send = Opal.send, $to_a = Opal.to_a, $def = Opal.def, self = Opal.top, $nesting = [], nil = Opal.nil;

  Opal.add_stubs('require,children,s,gen_args,map');
  
  self.$require("opal/rewriters/base");
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Opal');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $parent_nesting) {
      var self = $module($base, 'Rewriters');

      var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting);

      return (function($base, $super) {
        var self = $klass($base, $super, 'Numblocks');

        
        
        
        $def(self, '$on_numblock', function $$on_numblock(node) {
          var $a, $b, self = this, left = nil, arg_count = nil, right = nil;

          
          $b = node.$children(), $a = $to_ary($b), (left = ($a[0] == null ? nil : $a[0])), (arg_count = ($a[1] == null ? nil : $a[1])), (right = ($a[2] == null ? nil : $a[2])), $b;
          return self.$s("block", left, $send(self, 's', ["args"].concat($to_a(self.$gen_args(arg_count)))), right);
        });
        return $def(self, '$gen_args', function $$gen_args(arg_count) {
          var self = this;

          return $send(Opal.Range.$new(1, arg_count, false), 'map', [], function $$1(i){var self = $$1.$$s == null ? this : $$1.$$s;

            
            if (i == null) i = nil;
            return self.$s("arg", "_" + (i));}, {$$s: self})
        });
      })($nesting[0], $$('Base'))
    })($nesting[0], $nesting)
  })($nesting[0], $nesting);
});

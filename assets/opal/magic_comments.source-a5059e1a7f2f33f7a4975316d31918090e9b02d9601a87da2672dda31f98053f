Opal.queue(function(Opal) {/* Generated by Opal 1.8.1 */
  var $module = Opal.module, $const_set = Opal.const_set, $truthy = Opal.truthy, $send = Opal.send, $rb_ge = Opal.rb_ge, $eqeqeq = Opal.eqeqeq, $defs = Opal.defs, $nesting = [], $$ = Opal.$r($nesting), nil = Opal.nil;

  Opal.add_stubs('freeze,line,loc,take,each,>=,any?,scan,text,[]=,to_sym,===');
  return (function($base, $parent_nesting) {
    var self = $module($base, 'MagicComments');

    var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting);

    
    $const_set($nesting[0], 'MAGIC_COMMENT_RE', /^# *(\w+) *: *(\S+.*?) *$/.$freeze());
    $const_set($nesting[0], 'EMACS_MAGIC_COMMENT_RE', /^# *-\*- *(\w+) *: *(\S+.*?) *-\*- *$/.$freeze());
    return $defs(self, '$parse', function $$parse(sexp, comments) {
      var flags = nil, first_line = nil;

      
      flags = (new Map());
      if ($truthy(sexp)) {
        
        first_line = sexp.$loc().$line();
        comments = comments.$take(first_line);
      };
      $send(comments, 'each', [], function $$1(comment){var parts = nil;

        
        if (comment == null) comment = nil;
        if (($truthy(first_line) && ($truthy($rb_ge(comment.$loc().$line(), first_line))))) {
          return nil
        };
        if (($truthy((parts = comment.$text().$scan($$('MAGIC_COMMENT_RE')))['$any?']()) || ($truthy((parts = comment.$text().$scan($$('EMACS_MAGIC_COMMENT_RE')))['$any?']())))) {
          return $send(parts, 'each', [], function $$2(key, value){var $a, $ret_or_1 = nil;

            
            if (key == null) key = nil;
            if (value == null) value = nil;
            return ($a = [key.$to_sym(), ($eqeqeq("true", ($ret_or_1 = value)) || (($eqeqeq("false", $ret_or_1) ? (false) : (value))))], $send(flags, '[]=', $a), $a[$a.length - 1]);})
        } else {
          return nil
        };});
      return flags;
    });
  })($$('Opal'), $nesting)
});

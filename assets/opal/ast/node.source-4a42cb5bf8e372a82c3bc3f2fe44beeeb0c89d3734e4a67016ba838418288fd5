Opal.queue(function(Opal) {/* Generated by Opal 1.8.2 */
  var $module = Opal.module, $klass = Opal.klass, $truthy = Opal.truthy, $send2 = Opal.send2, $find_super = Opal.find_super, $def = Opal.def, self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$;

  Opal.add_stubs('require,attr_reader,[],frozen?,dup,merge!,loc,line,column');
  
  self.$require("ast");
  self.$require("parser/ast/node");
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Opal');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $parent_nesting) {
      var self = $module($base, 'AST');

      var $nesting = [self].concat($parent_nesting);

      return (function($base, $super) {
        var self = $klass($base, $super, 'Node');

        var $proto = self.$$prototype;

        $proto.meta = nil;
        
        self.$attr_reader("meta");
        
        $def(self, '$assign_properties', function $$assign_properties(properties) {
          var $yield = $$assign_properties.$$p || nil, self = this, meta = nil, $ret_or_1 = nil;

          $$assign_properties.$$p = null;
          
          if ($truthy((meta = properties['$[]']("meta")))) {
            
            if ($truthy(meta['$frozen?']())) {
              meta = meta.$dup()
            };
            self.meta['$merge!'](meta);
          } else {
            self.meta = ($truthy(($ret_or_1 = self.meta)) ? ($ret_or_1) : ((new Map())))
          };
          return $send2(self, $find_super(self, 'assign_properties', $$assign_properties, false, true), 'assign_properties', [properties], $yield);
        });
        
        $def(self, '$line', function $$line() {
          var self = this;

          if ($truthy(self.$loc())) {
            return self.$loc().$line()
          } else {
            return nil
          }
        });
        return $def(self, '$column', function $$column() {
          var self = this;

          if ($truthy(self.$loc())) {
            return self.$loc().$column()
          } else {
            return nil
          }
        });
      })($nesting[0], $$$($$$($$$('Parser'), 'AST'), 'Node'))
    })($nesting[0], $nesting)
  })($nesting[0], $nesting);
});

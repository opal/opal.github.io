Opal.queue(function(Opal) {/* Generated by Opal 1.8.1 */
  var $module = Opal.module, $klass = Opal.klass, $Opal = Opal.Opal, $def = Opal.def, self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$;

  Opal.add_stubs('require,emit_lambda=,new');
  
  self.$require("opal/ast/node");
  self.$require("parser/ruby32");
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Opal');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $parent_nesting) {
      var self = $module($base, 'AST');

      var $nesting = [self].concat($parent_nesting);

      return (function($base, $super) {
        var self = $klass($base, $super, 'Builder');

        
        
        self['$emit_lambda='](true);
        return $def(self, '$n', function $$n(type, children, location) {
          
          return $$$($$$($Opal, 'AST'), 'Node').$new(type, children, (new Map([["location", location]])))
        });
      })($nesting[0], $$$($$$($$$('Parser'), 'Builders'), 'Default'))
    })($nesting[0], $nesting)
  })($nesting[0], $nesting);
});
